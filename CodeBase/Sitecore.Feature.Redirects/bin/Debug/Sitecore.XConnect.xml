<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sitecore.XConnect</name>
    </assembly>
    <members>
        <member name="M:Sitecore.XConnect.AsyncInteractionBatchEnumerator.Split(Sitecore.XConnect.Operations.SplitPreference)">
            <summary>
            Splits off a new enumerator with the specified preference. After the operation this enumerator will contain the remaining entities.
            The estimated entity count and position properties will be updated.
            </summary>
            <param name="splitPreference">The split preference.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Constants">
            <summary>
            Implements a static class for holding miscellaneous constant values.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Constants.AliasIdentifierSource">
            <summary>
            xDB Alias Identifier Source
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Constants.MergeIdentifierSource">
            <summary>
            Merge Identifier Source
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbValidationException">
            <summary>
            The exception that is thrown when the application's state does not pass validation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.XConnect.Operations.XdbValidationException"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.XConnect.Operations.XdbValidationException"/>
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbUnavailableException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ClearFacetOperation`1">
            <summary>
            Clears a facet on an entity in xDB.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <seealso cref="T:Sitecore.XConnect.FacetReference" />
            <seealso cref="T:Sitecore.XConnect.Facet" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.ClearFacetOperation`1.#ctor(Sitecore.XConnect.FacetReference,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ClearFacetOperation`1"/> class.
            </summary>
            <param name="facetReference">The facet reference.</param>
            <param name="facet">The facet.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ClearFacetOperation`1.Facet">
            <summary>
            Gets the facet to clear with this operation.
            </summary>
            <value>
            The facet.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ClearFacetOperation`1.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider to return a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ClearFacetOperation`1.CreateFacetResult(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
            Creates a facet result given the specified facet. Allows generic type in typed ClearFacet operation
            </summary>
            <param name="status">The status.</param>
            <param name="facet">The facet.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ClearFacetOperation`1.Validate">
            <summary>
                Validates the facet against the model.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Interaction cannot be validated before operation is registered in an
                XdbContext
            </exception>
            <exception cref="T:Sitecore.XConnect.Schema.XdbModelException">
                The specified facet key is not defined in the model
                or
                The facet is not of the correct type
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ClearFacetOperation`1.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
            Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the facet, or null depending on status.</param>
            <exception cref="T:System.ArgumentException">Invalid facet type for this operation</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.CountSplitPreference">
            <summary>
            Represents a split preference where the new <see cref="T:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1"/> will contain approximately the specified number of entities.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.SplitPreference" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.CountSplitPreference.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CountSplitPreference"/> class.
            </summary>
            <param name="preferredCount">The preferred number of entities in the new enumerator.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CountSplitPreference.PreferredCount">
            <summary>
            Gets the preferred entity count for the split enumerator.
            </summary>
            <value>
            The preferred count.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.CreateContactCursorOperation">
            <summary>
            An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> that creates a cursor to read contacts from
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.CreateEntityCursorOperation" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.CreateContactCursorOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CreateContactCursorOperation"/> class.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.CreateEntityCursorOperation">
            <summary>
            An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> that creates a cursor to read entities from.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.CreateEntityCursorOperation.#ctor(Sitecore.XConnect.Schema.XdbEntitySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CreateEntityCursorOperation"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CreateEntityCursorOperation.Result">
            <summary>
            Gets the result for this operation when it has succeeded.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CreateEntityCursorOperation.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CreateEntityCursorOperation.Complete(Sitecore.XConnect.Operations.CursorResult)">
            <summary>
            Completes the operation with the specified result.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.CreateInteractionCursorOperation">
            <summary>
            An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> that creates a cursor to read interactions from
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.CreateEntityCursorOperation" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.CreateInteractionCursorOperation.#ctor(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CreateInteractionCursorOperation"/> class.
            </summary>
            <param name="cutoff">The cutoff date, that is the exclusive upper bound for the interactions' save date.</param>
            <param name="minStartDateTime">The minimum start date time.</param>
            <param name="maxStartDateTime">The maximum start date time.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CreateInteractionCursorOperation.Cutoff">
            <summary>
            Gets the cutoff date, that is the exclusive upper bound for the interactions' save date.
            </summary>
            <value>
            The cutoff.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CreateInteractionCursorOperation.MinStartDateTime">
            <summary>
            Gets the minimum start date time.
            </summary>
            <value>
            The minimum start date time.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CreateInteractionCursorOperation.MaxStartDateTime">
            <summary>
            Gets the maximum start date time.
            </summary>
            <value>
            The maximum start date time.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.CursorResult">
            <summary>
            Represents a cursor returned by some data provider.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CursorResult.#ctor(System.Int64,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CursorResult" /> class.
            </summary>
            <param name="totalCount">The total number of entities in the cursor.</param>
            <param name="countIsEstimated">if set to <c>true</c> totalCount is estimated.</param>
            <param name="cursorBookmark">The cursor.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CursorResult.TotalCount">
            <summary>
            Gets the total number of entities in the cursor.
            </summary>
            <value>
            The estimated number of entities.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CursorResult.IsCountEstimated">
            <summary>
            Gets a value indicating whether <see cref="P:Sitecore.XConnect.Operations.CursorResult.TotalCount"/> is estimated.
            </summary>
            <value>
            <c>true</c> if the count is estimated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CursorResult.CursorBookmark">
            <summary>
            Gets the cursor's bookmark.
            </summary>
            <value>
            The cursor.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CursorResult.ToBytes">
            <summary>
            Returns a binary representation of this <see cref="T:Sitecore.XConnect.Operations.CursorResult"/> that can be deserialized using the <see cref="M:Sitecore.XConnect.Operations.CursorResult.FromBytes(System.Byte[])"/> method.
            </summary>
            <returns>A binary representation</returns>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CursorResult.CursorType">
            <summary>
            Gets the type of the cursor to be used in its binary representation.
            </summary>
            <value>
            The type of the cursor.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CursorResult.GetSpecificBytes">
            <summary>
            Gets the byte representation of specific fields in inheriting types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CursorResult.InitializeFromSpecificBytes(System.Byte[],System.Int32)">
            <summary>
            Initializes specific fields from the byte representation in inheriting types.
            </summary>
            <param name="value">The byte representation of a cursor.</param>
            <param name="offset">The number of bytes already read in base implementation.</param>
            <returns>
            The number of specific bytes read
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CursorResult.FromBytes(System.Byte[])">
            <summary>
            Creates a <see cref="T:Sitecore.XConnect.Operations.CursorResult"/> from its binary representation obtained with the <see cref="M:Sitecore.XConnect.Operations.CursorResult.ToBytes"/> methods
            </summary>
            <param name="value">The binary represenation of a <see cref="T:Sitecore.XConnect.Operations.CursorResult"/>.</param>
            <returns>The cursor result</returns>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CursorResult.IsEmpty">
            <summary>
            Gets a value indicating whether this cursor is empty.
            </summary>
            <value>
              <c>true</c> if this cursor is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CursorResult.CreateEmpty">
            <summary>
            Creates a new cursor result with this cursor's total count that will not return any entites when read.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sitecore.XConnect.Operations.CursorResult.Empty">
            <summary>
            Represents an empty cursor result.
            </summary>
            <value>
            An empty.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.InteractionCursorResult">
            <summary>
            Represents a cursor returned by some data provider.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.InteractionCursorResult.MinimumStartDateTime">
            <summary>
            Gets the minimum start date time for the interactions.
            </summary>
            <value>
            The minimum start date time.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.InteractionCursorResult.MaximumStartDateTime">
            <summary>
            Gets the maximum start date time for the interactions.
            </summary>
            <value>
            The maximum start date time.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionCursorResult.#ctor(System.Int64,System.Boolean,System.DateTime,System.DateTime,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.InteractionCursorResult" /> class.
            </summary>
            <param name="totalCount">The estimated number of entities in the cursor.</param>
            <param name="countIsEstimated">if set to <c>true</c> totalCount is estimated.</param>
            <param name="minimumStartDateTime">The minimum start date time.</param>
            <param name="maximumStartDateTime">The maximum start date time.</param>
            <param name="cursorBookmark">The cursor.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.InteractionCursorResult.CursorType">
            <summary>
            Gets the type of the cursor to be used in its binary representation.
            </summary>
            <value>
            The type of the cursor.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionCursorResult.GetSpecificBytes">
            <summary>
            Gets the byte representation of specific fields in inheriting members.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionCursorResult.InitializeFromSpecificBytes(System.Byte[],System.Int32)">
            <summary>
            Initializes specific fields from the byte representation in inheriting types.
            </summary>
            <param name="value"></param>
            <param name="offset">The number of bytes already read in base implementation.</param>
            <returns>
            The number of specific bytes read
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionCursorResult.CreateEmpty">
            <summary>
            Creates a new cursor result with this cursor's total count and date range that will not return any entites when read.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ReadEntityCursorResult`1">
            <summary>
            The result for a <see cref="T:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1"/> operation.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReadEntityCursorResult`1.#ctor(Sitecore.XConnect.Operations.CursorResult,System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReadEntityCursorResult`1"/> class.
            </summary>
            <param name="nextCursor">The cursor to read the next batch from.</param>
            <param name="entities">The entities read.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorResult`1.NextCursor">
            <summary>
            Gets the cursor to read the next batch from.
            </summary>
            <value>
            The next cursor.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorResult`1.Entities">
            <summary>
            Gets the entities.
            </summary>
            <value>
            The entities.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.SetFacetOperation">
            <summary>
            Sets a facet on an entity in xDB.
            </summary>
            <seealso cref="T:Sitecore.XConnect.FacetReference" />
            <seealso cref="T:Sitecore.XConnect.Facet" />
        </member>
        <member name="P:Sitecore.XConnect.Operations.SetFacetOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SetFacetOperation.#ctor(Sitecore.XConnect.FacetReference,Sitecore.XConnect.Facet)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.SetFacetOperation"/> class.
            </summary>
            <param name="facetReference">The facet reference.</param>
            <param name="facet">The facet.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SetFacetOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the facet, or null depending on status.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.SplitCursorResult">
            <summary>
            The result for a <see cref="T:Sitecore.XConnect.Operations.SplitEntityCursorOperation"/>.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SplitCursorResult.#ctor(Sitecore.XConnect.Operations.CursorResult,Sitecore.XConnect.Operations.CursorResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.SplitCursorResult"/> class.
            </summary>
            <param name="split">The cursor for the split.</param>
            <param name="remainder">The cursor for the remaining data.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SplitCursorResult.Split">
            <summary>
            Gets the cursor for the split.
            </summary>
            <value>
            The split.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SplitCursorResult.Remainder">
            <summary>
            Gets the cursor for the remainder.
            </summary>
            <value>
            The remainder.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1">
            <summary>
            An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> that reads a batch of entities from a cursor.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.#ctor(Sitecore.XConnect.Schema.XdbEntitySet,Sitecore.XConnect.Operations.CursorResult,System.Int32,Sitecore.XConnect.ExpandOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1" /> class.
            </summary>
            <param name="target">The target entity set.</param>
            <param name="cursor">The cursor to read from.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="expandOptions">The expand options.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.Cursor">
            <summary>
            Gets the cursor to read from.
            </summary>
            <value>
            The cursor.
            </value>        
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.BatchSize">
            <summary>
            Gets the number of entities to read
            </summary>
            <value>
            The size of the batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.ExpandOptions">
            <summary>
            Gets the expand options for the entities to read.
            </summary>
            <value>
            The expand options.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.Result">
            <summary>
            Gets the result when this operation has succeeded.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReadEntityCursorOperation`1.Complete(Sitecore.XConnect.Operations.ReadEntityCursorResult{`0})">
            <summary>
            Completes the operation with the specified result.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.SplitEntityCursorOperation">
            <summary>
            An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> that splits a cursor.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.SplitEntityCursorOperation.#ctor(Sitecore.XConnect.Schema.XdbEntitySet,Sitecore.XConnect.Operations.CursorResult,Sitecore.XConnect.Operations.SplitPreference)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.SplitEntityCursorOperation"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="cursor">The cursor to split.</param>
            <param name="splitPreference">The split preference.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SplitEntityCursorOperation.Cursor">
            <summary>
            Gets the cursor to split.
            </summary>
            <value>
            The cursor.
            </value>        
        </member>
        <member name="P:Sitecore.XConnect.Operations.SplitEntityCursorOperation.SplitPreference">
            <summary>
            Gets the split preference.
            </summary>
            <value>
            The split preference.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SplitEntityCursorOperation.Result">
            <summary>
            Gets the result for this operation when it has succeeded.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SplitEntityCursorOperation.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SplitEntityCursorOperation.Complete(Sitecore.XConnect.Operations.SplitCursorResult)">
            <summary>
            Completes the operatoin with specified result.
            </summary>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.SplitPreference">
            <summary>
            Represents a preference for how <see cref="T:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1"/> should be split.
            Depending on context this preference may not be honored.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SplitPreference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.SplitPreference"/> class.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.AddContactIdentifierOperation">
            <summary>
                Adds a <see cref="T:Sitecore.XConnect.ContactIdentifier" /> to a <see cref="T:Sitecore.XConnect.Contact" />.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.ContactIdentifierOperation" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddContactIdentifierOperation.#ctor(Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.ContactIdentifier)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.AddContactIdentifierOperation" /> class.
            </summary>
            <param name="contact">The contact.</param>
            <param name="identifier">The identifier to add.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.AddContactIdentifierOperation.Identifier">
            <summary>
                Gets the identifier.
            </summary>
            <value>
                The identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.AddContactIdentifierOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddContactIdentifierOperation.UpdateContact(Sitecore.XConnect.Contact)">
            <summary>
                Updates the contact with the identifier if the operation succeeded.
            </summary>
            <param name="contact">The contact.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddContactIdentifierOperation.UpdateNewContact(Sitecore.XConnect.Contact)">
            <summary>
                If the target for this operation is a new contact, this method must apply the changes to the contact so they are
                included with the AddContactOperation.
            </summary>
            <param name="newContact">The new contact.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddContactIdentifierOperation.Validate">
            <summary>
                Validates the data involved in the operation according to the operation's requirements.
                If validation fails an exception is thrown describing the kind of validation error that occured.
                This method does not change the state of the operation.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ClearFacetOperation">
            <summary>
            Clears a facet on an entity in xDB.
            </summary>
            <seealso cref="T:Sitecore.XConnect.FacetReference" />
            <seealso cref="T:Sitecore.XConnect.Facet" />
        </member>
        <member name="P:Sitecore.XConnect.Operations.ClearFacetOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ClearFacetOperation.#ctor(Sitecore.XConnect.FacetReference,Sitecore.XConnect.Facet)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ClearFacetOperation"/> class.
            </summary>
            <param name="facetReference">The facet reference.</param>
            <param name="facet">The facet.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ClearFacetOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the facet, or null depending on status.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ContactIdentifierOperation">
            <summary>
            Base class for operations that change <see cref="T:Sitecore.XConnect.ContactIdentifier"/>s.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.ContactIdentifierOperation._addedContact">
            <summary>
            If the contact identifier operation's target is a new contact with an add operation, the identifiers are added to the contact.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactIdentifierOperation.#ctor(Sitecore.XConnect.ContactIdentifierReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ContactIdentifierOperation"/> class.
            </summary>
            <param name="contactIdentifierReference">The contact identifier reference.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ContactIdentifierOperation.Result">
            <summary>
            Gets the result returned by the provider when this operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactIdentifierOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus,System.Nullable{System.DateTime},System.Nullable{System.Guid})">
            <summary>
            Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="contactLastModified">The last modified date for the contact after this operation succeeded.</param>
            <param name="contactConcurrencyToken">The concurrency token for the contact after this operation succeeded.</param>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactIdentifierOperation.UpdateContact(Sitecore.XConnect.Contact)">
            <summary>
            Updates the contact with the identifier if the operation succeeded.
            </summary>
            <param name="contact">The contact.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactIdentifierOperation.ResolveDependencies">
            <summary>
            Validates any preconditions before the operation is marked as ready.
            Use <see cref="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Fail(System.Exception)" /> if any precondition failed.
            Default behavior fails the operation is any dependencies failed with <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactIdentifierOperation.UpdateNewContact(Sitecore.XConnect.Contact)">
            <summary>
            If the target for this operation is a new contact, this method must apply the changes to the contact so they are included with the AddContactOperation.
            </summary>
            <param name="newContact">The new contact.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ContactIdentifierOperationResult">
            <summary>
            The result of a copmleted <see cref="T:Sitecore.XConnect.Operations.ContactIdentifierOperation"/>.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactIdentifierOperationResult.#ctor(Sitecore.XConnect.Operations.SaveResultStatus,System.Nullable{System.DateTime},System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ContactIdentifierOperationResult"/> class.
            </summary>
            <param name="status">The status.</param>
            <param name="contactLastModified">The contact last modified date after the operatino completed.</param>
            <param name="contactConcurrencyToken">The contact concurrency token after the operatino completed..</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ContactIdentifierOperationResult.Status">
            <summary>
            Gets the result status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ContactIdentifierOperationResult.ContactLastModified">
            <summary>
            Gets the last modified date for the target contact after the operation completed
            </summary>
            <value>
            The contact last modified.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ContactIdentifierOperationResult.ContactConcurrencyToken">
            <summary>
            Gets the concurrency token for the target contact after the operation completed
            </summary>
            <value>
            The contact concurrency token.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.DuplicateTargetException">
            <summary>
            The exception that is thrown when multiple mutating operations exist for a single <see cref="T:Sitecore.XConnect.Schema.IXdbReference"/> in a batch in an <see cref="T:Sitecore.XConnect.IXdbContext"/>.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.DuplicateTargetException.#ctor(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DuplicateTargetException" /> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DuplicateTargetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DuplicateTargetException"/> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DuplicateTargetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DuplicateTargetException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DuplicateTargetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DuplicateTargetException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DuplicateTargetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DuplicateTargetException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.FacetOperation">
            <summary>
            A base class for facet operations on an entity in xDB.
            </summary>
            <seealso cref="P:Sitecore.XConnect.Operations.FacetOperation.FacetReference" />
            <seealso cref="P:Sitecore.XConnect.Operations.FacetOperation.Facet" />
        </member>
        <member name="F:Sitecore.XConnect.Operations.FacetOperation._resolveReferenceOperations">
            <summary>
                Operations required to resolve referenced entities (add or get).
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperation.Facet">
            <summary>
            Gets the facet to operate with this operation.
            </summary>
            <value>
            The facet.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperation.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider to return a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperation.FacetReference">
            <summary>
                Gets the reference for the facet in this operation
            </summary>
            <value>
                The facet reference.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperation.Sitecore#XConnect#Operations#IFacetOperation#Facet">
            <summary>
                Gets the facet involved in this operation.
            </summary>
            <value>
                The facet.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.#ctor(Sitecore.XConnect.FacetReference,Sitecore.XConnect.Facet)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperation"/> class.
            </summary>
            <param name="facetReference">The facet reference.</param>
            <param name="facet">The facet.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.Validate">
            <summary>
                Validates the facet against the model.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Interaction cannot be validated before operation is registered in an
                XdbContext
            </exception>
            <exception cref="T:Sitecore.XConnect.Schema.XdbModelException">
                The specified facet key is not defined in the model
                or
                The facet is not of the correct type
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the facet, or null depending on status.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.CreateFacetResult(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
            Creates a facet result given the specified facet. Allows generic type in typed Facet operation
            </summary>
            <param name="status">The status.</param>
            <param name="facet">The facet.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.MergeFields(Sitecore.XConnect.Facet,Sitecore.XConnect.Facet)">
            <summary>
                Merges the fields from the current version of a facet returned by the provider to the client's version.
            </summary>
            <param name="clientVersion">The client version.</param>
            <param name="currentVersion">The current version.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.ResolveDependencies">
            <summary>
                Resolves the operation's dependencies from the
                <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> executing the operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperation.ValidatePreconditions">
            <summary>
                Validates any preconditions before the operation is marked as ready.
                Use <see cref="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Fail(System.Exception)" /> if any
                precondition failed
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.EntityLookupResult`1">
            <summary>
            The results returned by the <see cref="T:Sitecore.XConnect.XdbContextOperationExtensions"/> GetAsync extension methods.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityLookupResult`1.#ctor(Sitecore.XConnect.IEntityReference{`0},`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityLookupResult`1"/> class.
            </summary>
            <param name="reference">The reference to get.</param>
            <param name="entity">The entity if it exists.</param>        
            <param name="exception">Any exception that occured while looking up the entity.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityLookupResult`1.Reference">
            <summary>
            Gets the requested entity reference.
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityLookupResult`1.Entity">
            <summary>
            Gets the referenced entity if it was successfully retrieved; <c>null</c> otherwise.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityLookupResult`1.Exists">
            <summary>
            Gets a value indicating whether the entity exists
            </summary>
            <value>
              <c>true</c> if the entity exists, or an exception occurred while looking up the entity, in which case it may exist; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityLookupResult`1.Exception">
            <summary>
            Gets any exception that occured while looking up the reference. If the entity does not exists or was successfully retrieved this is null.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.FacetOperationException">
            <summary>
                The exception that is thrown when an <see cref="T:Sitecore.XConnect.Operations.IEntityOperation" /> fails.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.#ctor(Sitecore.XConnect.Operations.IFacetOperation,Sitecore.XConnect.Operations.SaveResultStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperationException"/> class.
            </summary>
            <param name="operation">The facet operation that caused this exception</param>
            <param name="result">The status returned by the provider.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.#ctor(Sitecore.XConnect.Operations.IFacetOperation,Sitecore.XConnect.Operations.SaveResultStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperationException" /> class.
            </summary>
            <param name="operation">The facet operation that caused this exception</param>
            <param name="result">The status returned by the provider.</param>
            <param name="innerMessage">An optional message that describes the exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Success status code cannot cause an exception</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperationException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperationException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.FacetOperationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperationException.EntityId">
            <summary>
            The ID of the entity in the operation that caused this exception. For new entities this is null.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperationException.FacetKey">
            <summary>
            Gets the facet key in the operatino that caused this exception.
            </summary>
            <value>
            The facet key.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.FacetOperationException.Result">
            <summary>
                Gets the status from the provider that caused this exception.
            </summary>
            <value>
                The status.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbFacetSaveResult`1">
            <summary>
            Represents the result of a mutating facet operation.
            </summary>
            <typeparam name="TFacet">The type of the XdbFacet.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbFacetSaveResult`1.#ctor(Sitecore.XConnect.Operations.SaveResultStatus,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbFacetSaveResult`1"/> class.
            </summary>
            <param name="status">The status returned by the provider.</param>
            <param name="currentVersion">The current version.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbFacetSaveResult`1.CurrentVersion">
            <summary>
            Gets the current version of the facet returned from the provider.
            This may be null depending on the <see cref="P:Sitecore.XConnect.Operations.XdbFacetSaveResult.Status" />.
            </summary>
            <value>
            The current version.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationHelpers.TryFindFacet``1(Sitecore.XConnect.Operations.XdbOperationBatch,Sitecore.XConnect.FacetReference,``0@)">
            <summary>
            Tries to find the referenced facet among the operations in the batch including executed.
            The most recent version of the facet will be returned if found (based on LastModified)
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="batch">The batch.</param>
            <param name="reference">The facet reference.</param>
            <param name="facet">The facet if found.</param>
            <returns><c>true</c> if the facet was found; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.FacetOperationHelpers.Convert``1(Sitecore.XConnect.Facet)">
            <summary>
            Converts the specified facet to the type specified. If this is not possible null is returned.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="facet">The facet.</param>
            <returns>The converted facet or null</returns>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IEntityLookupResult`1">
            <summary>
            The results returned by the <see cref="T:Sitecore.XConnect.XdbContextOperationExtensions"/> GetAsync extension methods.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IEntityLookupResult`1.Entity">
            <summary>
            Gets the referenced entity if it was successfully retrieved; <c>null</c> otherwise.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IEntityLookupResult`1.Exception">
            <summary>
            Gets any exception that occured while looking up the reference. If the entity does not exists or was successfully retrieved this is null.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IEntityLookupResult`1.Exists">
            <summary>
            Gets a value indicating whether the entity exists
            </summary>
            <value>
              <c>true</c> if the entity exists, or an exception occurred while looking up the entity, in which case it may exist; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IEntityLookupResult`1.Reference">
            <summary>
            Gets the requested entity reference.
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.MergeContactsOperation">
            <summary>
            Merges two <see cref="T:Sitecore.XConnect.Contact" />s. The information in the source contact, including interactions, will be merged into the target contact.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.ContactOperation" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.MergeContactsOperation.#ctor(Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.MergeContactsOperation"/> class.
            </summary>
            <param name="source">The source contact, that is, the contact that will be merged into the target.</param>
            <param name="target">The target contact, that is, the contact where the information from the source contact will be merged into.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.MergeContactsOperation.Source">
            <summary>
            Gets the source contact, that is, the contact that will be merged into the target.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.MergeContactsOperation.Result">
            <summary>
            Gets the result returned by the provider when this operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.MergeContactsOperation.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.MergeContactsOperation.ResolveDependencies">
            <summary>
            Resolves the operation's dependencies in the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> executing the operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.MergeContactsOperation.ValidatePreconditions">
            <summary>
            Validates any preconditions before the operation is marked as ready.
            Use <see cref="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Fail(System.Exception)" /> if any precondition failed.
            Default behavior fails the operation is any dependencies failed with <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.MergeContactsOperation.Validate">
            <summary>
            Validates this instance.
            </summary>
            <exception cref="T:Sitecore.XConnect.Operations.EntityValidationException">
            New contacts cannot be merged
            or
            Source and target cannot be the same contact
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.MergeContactsOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus)">
            <summary>
            Completes the operation with the specified status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.PatchFacetOperation`1">
            <summary>
            Applies one or more changes to an <see cref="T:Sitecore.XConnect.Facet"/>.
            This does not require a concurrency token since the change are applied to the current version.      
            In case of conflicts this operation will retry by reapplying the changes.
            This pattern is suitable for changes that are commutative, such as incrementing a number or maintaining a max date, where multiple patch operations will end with same result regardless of the order they are applied.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>        
        </member>
        <member name="F:Sitecore.XConnect.Operations.PatchFacetOperation`1._internalOperations">
            <summary>
            Internal get and set operations. This operation will not fail even if one of these fail, since that is part of expected execution.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.PatchFacetOperation`1.#ctor(Sitecore.XConnect.FacetReference,System.Action{`0},System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.PatchFacetOperation`1" /> class.
            </summary>
            <param name="target">The target facet.</param>
            <param name="patchAction">The action that applies the changes to the current version of the referenced facet.</param>
            <param name="factory">A factory that creates and initializes the facet if it does not exist. The patch action will be applied to this facet</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.PatchFacetOperation`1.#ctor(Sitecore.XConnect.FacetReference,System.Func{`0,System.Boolean},System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.PatchFacetOperation`1" /> class.
            </summary>
            <remarks>
            If the patch function changes the facet and returns <c>false</c>, the changes may be saved anyway depending on other operations in the batch where it is executed.
            </remarks>
            <param name="target">The target facet.</param>
            <param name="patchAction">The action that applies the changes to the current version of the referenced facet. This can return <c>false</c> to indicate that no changes were made, and hence an update is not required</param>
            <param name="factory">A factory that creates and initializes the facet if it does not exist. The patch action will be applied to this facet</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Operations.PatchFacetOperation`1.PatchAction">
            <summary>
            Gets the patch action.
            </summary>
            <value>
            The patch action.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.PatchFacetOperation`1.Factory">
            <summary>
            Gets the factory for creating and initializing a new facet if it does not exist.
            </summary>
            <value>
            The factory.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.PatchFacetOperation`1.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.PatchFacetOperation`1.Sitecore#XConnect#Operations#IFacetOperation#Facet">
            <summary>
            Since this is a patch operation this value is null before this operation has completed.
            </summary>
            <value>
            The current version of the referenced facet if this operation succeeded.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.PatchFacetOperation`1.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider from returning a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.PatchFacetOperation`1.ValidatePreconditions">
            <summary>
            Validates any preconditions before the operation is marked as ready.        
            This operation ensures that prerequisite get and set operations are present in the batch depending on state.        
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.PatchFacetOperation`1.Complete(Sitecore.XConnect.Operations.SaveResultStatus,`0)">
            <summary>
            Completes the operation with the specified result. If a conflict occurred this operation will retry.
            </summary>
            <param name="status">The status.</param>
            <param name="currentVersion">The current version.</param>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbFacetSaveResult">
            <summary>
            Represents the result of a mutating facet operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbFacetSaveResult.#ctor(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbFacetSaveResult"/> class.
            </summary>
            <param name="status">The status returned by the provider.</param>
            <param name="currentVersion">The current version.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbFacetSaveResult.Status">
            <summary>
            Gets the status of the operation returned by the provider.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbFacetSaveResult.CurrentVersion">
            <summary>
            Gets the current version of the facet returned from the provider.
            This may be null depending on the <see cref="P:Sitecore.XConnect.Operations.XdbFacetSaveResult.Status"/>.
            </summary>
            <value>
            The current version.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.EntitySaveResult">
            <summary>
            Represents the result of a mutating entity operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntitySaveResult.#ctor(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntitySaveResult"/> class.
            </summary>
            <param name="status">The status returned by the provider.</param>
            <param name="currentVersion">The current version.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntitySaveResult.Status">
            <summary>
            Gets the status of the operation returned by the provider.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntitySaveResult.CurrentVersion">
            <summary>
            Gets the current version of the entity returned from the provider.
            This may be null depending on the <see cref="P:Sitecore.XConnect.Operations.EntitySaveResult.Status"/>.
            </summary>
            <value>
            The current version.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.EntitySaveResult`1">
            <summary>
            Represents the result of a mutating entity operation.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntitySaveResult`1.#ctor(Sitecore.XConnect.Operations.SaveResultStatus,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntitySaveResult`1"/> class.
            </summary>
            <param name = "status" > The status returned by the provider.</param>
            <param name="currentVersion">The current version.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntitySaveResult`1.CurrentVersion">
            <summary>
            Gets the current version of the entity returned from the provider.
            This may be null depending on the <see cref="P:Sitecore.XConnect.Operations.EntitySaveResult.Status" />.
            </summary>
            <value>
            The current version.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.RemoveContactIdentifierOperation">
            <summary>
            Removes a <see cref="T:Sitecore.XConnect.ContactIdentifier"/> from a <see cref="T:Sitecore.XConnect.Contact"/>.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.RemoveContactIdentifierOperation.#ctor(Sitecore.XConnect.ContactIdentifierReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.RemoveContactIdentifierOperation"/> class.
            </summary>
            <param name="contactIdentifierReference">The contact identifier to remove.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.RemoveContactIdentifierOperation.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.RemoveContactIdentifierOperation.UpdateContact(Sitecore.XConnect.Contact)">
            <summary>
            Updates the contact with the identifier if the operation succeeded.
            </summary>
            <param name="contact">The contact.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.RemoveContactIdentifierOperation.UpdateNewContact(Sitecore.XConnect.Contact)">
            <summary>
            If the target for this operation is a new contact, this method must apply the changes to the contact so they are included with the AddContactOperation.
            </summary>
            <param name="newContact">The new contact.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.RightToBeForgottenOperation">
            <summary>
            An operation that executes the references contact's Right to be Forgotten, that is clears personally identifiable information from the contact.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.RightToBeForgottenOperation.#ctor(Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.RightToBeForgottenOperation"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.RightToBeForgottenOperation.Contact">
            <summary>
            Gets the contact that executed the right to be forgotten if this operation succeeded.
            </summary>
            <value>
            The contact.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.RightToBeForgottenOperation.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.RightToBeForgottenOperation.Complete(Sitecore.XConnect.Contact)">
            <summary>
            Completes this operation with the updated contact, or null if it did not exists.
            </summary>
            <param name="contact">The contact that executed the right to be forgotten.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.UnknownFacetKeyException">
            <summary>
            The exception that is thrown when an unknown facet key is specified in <see cref="T:Sitecore.XConnect.ExpandOptions"/>
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.UnknownFacetKeyException.#ctor(Sitecore.XConnect.EntityType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.UnknownFacetKeyException"/> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="facetKey">The unknown facet key.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.UnknownFacetKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.UnknownFacetKeyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.UnknownFacetKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.UnknownFacetKeyException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.UnknownFacetKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.UnknownFacetKeyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.UnknownFacetKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.UnknownFacetKeyException"/> class.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.UnknownFacetKeyException.EntityType">
            <summary>
            Gets the type of the entity the unknown facet key was specified for.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.UnknownFacetKeyException.FacetKey">
            <summary>
            Gets the unknown facet key.
            </summary>
            <value>
            The facet key.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.UnknownFacetKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Sitecore.XConnect.IXdbContext.BatchExecutionFailed"/> event.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs.#ctor(System.Exception,Sitecore.XConnect.Operations.XdbOperationBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs"/> class.
            </summary>
            <param name="exception">The exception that interrupted batch execution.</param>
            <param name="batch">The batch.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs.Exception">
            <summary>
            The exception that interrupted the batch execution.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationException">
            <summary>
            The exception that is thrown when an <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> does not succeed.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.#ctor(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationException"/> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>        
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.#ctor(Sitecore.XConnect.Operations.IXdbOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationException"/> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <param name="innerMessage">The message.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationException"/> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationException.BatchIndex">
            <summary>
            Gets the index of the operation that caused this exception in the batch where it was executed.
            If the operation is not associated with a batch, this will be null
            </summary>
            <remarks>
            Use <see cref="P:Sitecore.XConnect.IXdbContext.LastBatch"/> to get the operation that caused this exception.
            </remarks>
            <value>
            The index of the operation in the batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationException.BatchId">
            <summary>
            Gets the unique identifier for the batch that contains the failing operation
            </summary>
            <value>
            The batch identifier.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationRetryException">
            <summary>
            The exception that is thrown when an <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/> fails because maximum number of retries was exceeded as defined by the execution <see cref="T:Sitecore.XConnect.IXdbContext"/>'s <see cref="T:Sitecore.XConnect.RetryStrategy"/>.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.XdbOperationException" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationRetryException.#ctor(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationRetryException"/> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationRetryException.#ctor(Sitecore.XConnect.Operations.IXdbOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationRetryException"/> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <param name="innerMessage">The message.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationRetryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationRetryException"/> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationRetryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationRetryException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationRetryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationRetryException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationRetryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationRetryException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationInvoker">
            <summary>
                Provides logic to execute specific types of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in an <see cref="T:Sitecore.XConnect.IXdbContext" />.    
                Extend the generic class <see cref="T:Sitecore.XConnect.Operations.XdbOperationBase`1" /> to constrain invokation to specific types of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/>.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker.CanExecute(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Determines whether this instance can execute the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker.Execute(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation},System.Threading.CancellationToken)">
            <summary>
                Executes the operations that this invoker supports
            </summary>
            <param name="operations">The operations.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker.ExpandOperations(System.Collections.Generic.List{Sitecore.XConnect.Operations.IXdbOperation})">
            <summary>
                Given a list of operations, the invoker may expand the operations to execute with pending operations that can be
                executed ahead of time (for example be included in an OData batch).
            </summary>
            <param name="operations">The operations.</param>
            <returns>The list of operations that will be executed</returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker.CanExecuteAheadOfTime(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Determines whether this instance can execute the specified operation ahead of time.
                In some cases pending operations may be included in a batch to be executed against some storage service.
                For example, new interactions can be included with the new contacts both in an OData batch, and a repository change
                set.
            </summary>
            <param name="parent">The parent.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationInvoker`1">
            <summary>
                Provides logic to execute specific types of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in an <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker`1.CanExecute(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Determines whether this instance can execute the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker`1.CanExecute(`0)">
            <summary>
                Determines whether this instance can execute the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker`1.Execute(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation},System.Threading.CancellationToken)">
            <summary>
                Executes the operations that this invoker supports
            </summary>
            <param name="operations">The operations.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker`1.Execute(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Executes the operations that this invoker can execute including operations to execute ahead of time.
            </summary>
            <param name="operations">The operations.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker`1.CanExecuteAheadOfTime(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Determines whether this instance can execute the specified operation ahead of time.
            In some cases pending operations may be included in a batch to be executed against some storage service.
            For example, new interactions can be included with the new contacts both in an OData batch, and a repository change
            set.
            </summary>
            <param name="parent">The parent.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationInvoker`1.CanExecuteAheadOfTime(`0,`0)">
            <summary>
            Determines whether this instance can execute the specified operation ahead of time.
            In some cases pending operations may be included in a batch to be executed against some storage service.
            For example, new interactions can be included with the new contacts both in an OData batch, and a repository change
            set.
            </summary>
            <param name="parent">The parent.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperations">
            <summary>
                Helper methods to construct operations
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.IGetEntityOperation" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperations.GetEntity(Sitecore.XConnect.IEntityReference)">
            <summary>
                Constructs a generic <see cref="T:Sitecore.XConnect.Operations.GetEntityOperation`1" /> from a non-generic entity reference.
            </summary>
            <param name="reference">The entity reference.</param>
            <returns>
                A generic <see cref="T:Sitecore.XConnect.Operations.GetEntityOperation`1" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unsupported entity type</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperations.GetEntity(Sitecore.XConnect.IEntityReference,Sitecore.XConnect.ExpandOptions)">
            <summary>
                Constructs a generic <see cref="T:Sitecore.XConnect.Operations.GetEntityOperation`1" /> from a non-generic entity reference with the given
                expand options.
            </summary>
            <param name="reference">The entity reference.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <returns>
                A generic <see cref="T:Sitecore.XConnect.Operations.GetEntityOperation`1" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unsupported entity type</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ItemChangedEventArgs`1">
            <summary>
                Provides data for the <see cref="T:Sitecore.XConnect.Operations.ObservableSet`1" /> item added and removed events.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ItemChangedEventArgs`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ItemChangedEventArgs`1" /> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.ItemChangedEventArgs`1.Item">
            <summary>
                Gets the item that was addded or removed.
            </summary>
            <value>
                The item.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.GetEntityOperation`1">
            <summary>
                An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> that gets an <see cref="P:Sitecore.XConnect.Operations.GetEntityOperation`1.Entity" /> by reference
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetEntityOperation`1.#ctor(Sitecore.XConnect.IEntityReference{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.GetEntityOperation`1" /> class.
            </summary>
            <param name="reference">The target to get.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetEntityOperation`1.#ctor(Sitecore.XConnect.IEntityReference{`0},Sitecore.XConnect.ExpandOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.GetEntityOperation`1" /> class.
            </summary>
            <param name="reference">The target to get.</param>
            <param name="expandOptions">The expand options for the entity.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.Entity">
            <summary>
                The entity if this operation succeeds, null otherwise.
            </summary>
            <value>
                The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.Reference">
            <summary>
                Gets the reference to the entity to get.
            </summary>
            <value>
                The reference.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.Timeout">
            <summary>
                Gets or sets a timeout to be used to read the entity from the storage.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.ExpandOptions">
            <summary>
                The expand options for the entity.
            </summary>
            <value>
                The expand options.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.Sitecore#XConnect#Operations#IGetEntityOperation#Entity">
            <summary>
                The entity if this operation succeeds, null otherwise.
            </summary>
            <value>
                The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetEntityOperation`1.Sitecore#XConnect#Operations#IGetEntityOperation#Reference">
            <summary>
                Gets the reference to the entity to get.
            </summary>
            <value>
                The reference.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetEntityOperation`1.Validate">
            <summary>
            Validates the data involved in the operation according to the operation's requirements.
            If validation fails an exception is thrown describing the kind of validation error that occured.
            This method does not change the state of the operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetEntityOperation`1.Sitecore#XConnect#Operations#IGetEntityOperation#Complete(Sitecore.XConnect.Entity)">
            <summary>
                Completes the operation with the referenced entity. If the entity is not found call this method with a null value.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.InvalidOperationException">Wrong type of entity</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetEntityOperation`1.ResolveDependencies">
            <summary>
            Resolves the operation's dependencies in the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> executing the operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetEntityOperation`1.Complete(`0)">
            <summary>
                Completes the operation with the referenced entity. If the entity is not found call this method with a null value.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.GetFacetOperation`1">
            <summary>
                An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> that gets a <see cref="T:Sitecore.XConnect.Facet" /> by reference
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <seealso cref="T:Sitecore.XConnect.FacetReference" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetFacetOperation`1.#ctor(Sitecore.XConnect.FacetReference)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.GetFacetOperation`1" /> class.
            </summary>
            <param name="reference">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetFacetOperation`1.Facet">
            <summary>
                The facet if this operation succeeds, null otherwise.
            </summary>
            <value>
                The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetFacetOperation`1.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetFacetOperation`1.Reference">
            <summary>
                Gets the reference to the facet to get.
            </summary>
            <value>
                The reference.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.GetFacetOperation`1.Sitecore#XConnect#Operations#IGetFacetOperation#Facet">
            <summary>
                The facet if this operation succeeds, null otherwise.
            </summary>
            <value>
                The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetFacetOperation`1.Sitecore#XConnect#Operations#IGetFacetOperation#Complete(Sitecore.XConnect.Facet)">
            <summary>
                Completes the specified entity.
            </summary>
            <param name="facet">The entity.</param>
            <exception cref="T:System.InvalidOperationException">Wrong type of facet</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetFacetOperation`1.Validate">
            <summary>
            Validates the data involved in the operation according to the operation's requirements.
            If validation fails an exception is thrown describing the kind of validation error that occured.
            This method does not change the state of the operation.
            </summary>
            <exception cref="T:Sitecore.XConnect.Operations.UnknownFacetKeyException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.GetFacetOperation`1.Complete(`0)">
            <summary>
                Completes the operation with the referenced entity. If the entity is not found call this method with a null value.
            </summary>
            <param name="facet">The entity.</param>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IGetEntityOperation">
            <summary>
                <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> that gets an entity by reference
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.IXdbOperation" />
        </member>
        <member name="P:Sitecore.XConnect.Operations.IGetEntityOperation.ExpandOptions">
            <summary>
                The expand options for the entity.
            </summary>
            <value>
                The expand options.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IGetEntityOperation.Entity">
            <summary>
                The entity if this operation succeeds, null otherwise.
            </summary>
            <value>
                The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IGetEntityOperation.Reference">
            <summary>
                Gets the reference to the entity to get.
            </summary>
            <value>
                The reference.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IGetEntityOperation.Complete(Sitecore.XConnect.Entity)">
            <summary>
                Completes the operation with the referenced entity. If the entity is not found call this method with a null value.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IGetFacetOperation">
            <summary>
                <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> that gets a facet by reference
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.IXdbOperation" />
        </member>
        <member name="P:Sitecore.XConnect.Operations.IGetFacetOperation.Facet">
            <summary>
                The facet if this operation succeeds, null otherwise.
            </summary>
            <value>
                The result.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IGetFacetOperation.Reference">
            <summary>
                Gets the reference to the facet to get.
            </summary>
            <value>
                The reference.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IGetFacetOperation.Complete(Sitecore.XConnect.Facet)">
            <summary>
                Completes the operation with the referenced facet. If the facet is not found call this method with a null value.
            </summary>
            <param name="facet">The facet.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.AddContactOperation">
            <summary>
                Adds a contact to xDB.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddContactOperation.#ctor(Sitecore.XConnect.Contact)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.AddContactOperation" /> class.
            </summary>
            <param name="contact">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.AddContactOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.AddDeviceProfileOperation">
            <summary>
                Adds a device profile to xDB.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddDeviceProfileOperation.#ctor(Sitecore.XConnect.DeviceProfile)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.AddDeviceProfileOperation" /> class.
            </summary>
            <param name="deviceProfile">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.AddDeviceProfileOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.AddInteractionOperation">
            <summary>
                Adds an interaction to xDB.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.AddInteractionOperation.#ctor(Sitecore.XConnect.Interaction)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.AddInteractionOperation" /> class.
            </summary>
            <param name="interaction">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.AddInteractionOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CollectionHelpers.Add``3(System.Collections.Generic.IDictionary{``0,``2},``0,``1)">
            <summary>
                Adds the specified item to the list corresponding the key. If no list is found, a new one is created.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TList">The type of the list.</typeparam>
            <param name="dict">The dictionary of lists.</param>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CollectionHelpers.TryGetValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2@)">
            <summary>
                Like <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />, but allows match to be of a more specific type than the
                value type for the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="result">The result.</param>
            <returns>
                <c>true</c>, if a match for the given key was found, in which case it will be assigned to result. <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CollectionHelpers.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
                Sorts the items so that each item comes after its dependencies.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The items to sort.</param>
            <param name="dependencyResolver">A function that returns the dependencies for an item.</param>
            <param name="comparer">An optional comparer to compare equality between two items in the list.</param>
            <param name="ignoreCycles">if set to <c>true</c> an exception will be thrown if items have cyclic dependencies.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CollectionHelpers.Visit``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{``0,System.Boolean},System.Boolean)">
            <summary>
                Supporting method for <see cref="M:Sitecore.XConnect.Operations.CollectionHelpers.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item to vist.</param>
            <param name="dependencyResolver">A function that returns the dependencies for an item.</param>
            <param name="sorted">The sorted list of items.</param>
            <param name="visited">The items already visited.</param>
            <param name="ignoreCycles">if set to <c>true</c> an exception will be thrown if items have cyclic dependencies.</param>
            <exception cref="T:System.Exception">Cyclic dependency</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CollectionHelpers.CopyTo``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copies the keys and value from the source dictionary to the target for the keys not already contained in the target.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CollectionHelpers.CopyTo``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
            <summary>
            Copies the keys and from the source set to the target for the keys not already contained in the target.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>        
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ContactOperation">
            <summary>
                Base class for operations that mutate a <see cref="T:Sitecore.XConnect.Contact" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Contact" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactOperation.#ctor(Sitecore.XConnect.Contact)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ContactOperation" /> class.
            </summary>
            <param name="contact">The target.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ContactOperation.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.CyclicDependencyException">
            <summary>
                The exception that is thrown when a cyclic dependency between items is detected.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CyclicDependencyException.#ctor(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CyclicDependencyException"/> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CyclicDependencyException.#ctor(Sitecore.XConnect.Operations.IXdbOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CyclicDependencyException"/> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <param name="innerMessage">The message.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CyclicDependencyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CyclicDependencyException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CyclicDependencyException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CyclicDependencyException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CyclicDependencyException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CyclicDependencyException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.CyclicDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.CyclicDependencyException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.DependencyAddedEventArgs">
            <summary>
                Provides data for the <see cref="E:Sitecore.XConnect.Operations.IXdbOperation.DependencyAdded" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyAddedEventArgs.#ctor(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyAddedEventArgs" /> class.
            </summary>
            <param name="predecessor">The dependency.</param>
            <param name="successor">The dependent operation.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.DependencyAddedEventArgs.Predecessor">
            <summary>
                Gets the dependency added for the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />.
            </summary>
            <value>
                The dependency.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.DependencyAddedEventArgs.Successor">
            <summary>
                Gets the dependent operation in the relationship.
            </summary>
            <value>
                The dependency.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.DependencyFailedException">
            <summary>
                The exception that is thrown when one or more of an <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />'s dependencies failed.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException"/> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyFailedException.#ctor(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" /> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyFailedException.#ctor(Sitecore.XConnect.Operations.IXdbOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" /> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <param name="innerMessage">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DependencyFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.DeviceProfileOperation">
            <summary>
                Base class for operations that mutate a device profile.
            </summary>
            <seealso cref="T:Sitecore.XConnect.DeviceProfile" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.DeviceProfileOperation.#ctor(Sitecore.XConnect.DeviceProfile)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.DeviceProfileOperation" /> class.
            </summary>
            <param name="deviceProfile">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.DeviceProfileOperation.EntityReferences">
            <summary>
                Gets the device profile's last known contact, if any.
            </summary>
            <value>
                The device profile's references.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.DeviceProfileOperation.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.EntityOperation`1">
            <summary>
                Base class for <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s that mutates an entity
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.EntityOperation`1._resolveReferenceOperations">
            <summary>
                Operations required to resolve referenced entities (add or get).
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperation`1" /> class.
            </summary>
            <param name="entity">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityOperation`1.Entity">
            <summary>
                Gets the entity to update
            </summary>
            <value>
                The data.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityOperation`1.EntityReferences">
            <summary>
                Gets the entities referenced by the entity for this operation
            </summary>
            <value>
                The referenced entities.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityOperation`1.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider to return a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.Sitecore#XConnect#Operations#IEntityOperation#Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Entity)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the data.</param>
            <exception cref="T:System.InvalidOperationException">Wrong type of entity</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.Validate">
            <summary>
            Validates the data involved in the operation according to the operation's requirements.
            If validation fails an exception is thrown describing the kind of validation error that occured.
            This method does not change the state of the operation.
            </summary>
            <exception cref="T:Sitecore.XConnect.Operations.EntityValidationException">
            Concurrency token must not be specified for new entities
            or
            Concurrency token must be specified for changed entities
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.Complete(Sitecore.XConnect.Operations.SaveResultStatus,`0)">
            <summary>
            Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the entity, or null depending on status.</param>
            <exception cref="T:System.InvalidOperationException">This operation has already completed</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.MergeFields(`0,`0)">
            <summary>
                Merges the fields from the current version of an entity returned by the provider to the client's version.
            </summary>
            <param name="clientVersion">The client version.</param>
            <param name="currentVersion">The current version.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.ResolveDependencies">
            <summary>
                Adds referenced new entities as dependencies
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperation`1.ValidatePreconditions">
            <summary>
                Validates any preconditions before the operation is marked as ready.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.EntityOperationException">
            <summary>
                The exception that is thrown when an <see cref="T:Sitecore.XConnect.Operations.IEntityOperation" /> fails.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.#ctor(Sitecore.XConnect.Operations.IEntityOperation,Sitecore.XConnect.Operations.SaveResultStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperationException"/> class.
            </summary>
            <param name="operation">The entity operation that caused this exception</param>
            <param name="result">The result status returned by the provider.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.#ctor(Sitecore.XConnect.Operations.IEntityOperation,Sitecore.XConnect.Operations.SaveResultStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperationException" /> class.
            </summary>
            <param name="operation">The entity operation that caused this exception</param>
            <param name="result">The status returned by the provider.</param>
            <param name="innerMessage">An optional message that describes the exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Success status code cannot cause an exception</exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperationException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperationException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityOperationException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityOperationException.Result">
            <summary>
                Gets the status from the provider that caused this exception.
            </summary>
            <value>
                The status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityOperationException.EntityId">
            <summary>
            The ID of the entity in the operation that caused this exception. For new entities this is null.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Operations.SaveResultStatus">
            <summary>
                Represents the result of an entity operation.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.Success">
            <summary>
                The operation succeeded
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.Conflict">
            <summary>
                The version of the entity being saved was out of date. (<see cref="P:Sitecore.XConnect.IConcurrencyVersionInfo.ConcurrencyToken" />
                mismatch)
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.AlreadyExists">
            <summary>
                The entity was marked as new, but another entity with the same ID already exists
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.NotFound">
            <summary>
                The entity to update does not exist
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.UniqueKeyViolation">
            <summary>
                The data would violate a unique key constraint.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.ReferenceNotFound">
            <summary>
                An entity referenced by the entity was not found
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.SaveResultStatus.Unknown">
            <summary>
                The operation failed for unkown reasons.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IEntityOperation">
            <summary>
                <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s that mutates an entity.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Operations.IXdbOperation" />
        </member>
        <member name="P:Sitecore.XConnect.Operations.IEntityOperation.Entity">
            <summary>
                Gets the entity involved in this operation.
            </summary>
            <value>
                The entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IEntityOperation.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider to return a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IEntityOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Entity)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the entity.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IFacetOperation">
            <summary>
                <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s that mutates a facet
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IFacetOperation.FacetReference">
            <summary>
                Gets the reference to the facet targeted by this operation.
            </summary>
            <value>
                The facet reference.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IFacetOperation.Facet">
            <summary>
                Gets the facet involved in this operation.
            </summary>
            <value>
                The facet.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IFacetOperation.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider from returning a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IFacetOperation.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the facet.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IMutatingOperation`1">
            <summary>
                An <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> that mutates its target with the data provided.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <seealso cref="T:Sitecore.XConnect.Operations.IXdbOperation" />
        </member>
        <member name="P:Sitecore.XConnect.Operations.IMutatingOperation`1.Data">
            <summary>
                Gets the data for the target of the operation.
            </summary>
            <value>
                The data.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IMutatingOperation`1.Complete(Sitecore.XConnect.Operations.SaveResultStatus,`0)">
            <summary>
                Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the data.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.InteractionOperation">
            <summary>
                Base class for operations mutating an <see cref="T:Sitecore.XConnect.Interaction" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Interaction" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionOperation.#ctor(Sitecore.XConnect.Interaction)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.InteractionOperation" /> class.
            </summary>
            <param name="interaction">The interaction.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.InteractionOperation.EntityReferences">
            <summary>
                The interaction and its contact, and possible device profile.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionOperation.ResolveDependencies">
            <summary>
                Adds referenced new entities as dependencies
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.InteractionOperation.Validate">
            <summary>
                Validates the interaction's data.
            </summary>
            <exception cref="T:Sitecore.XConnect.Operations.EntityValidationException">
                Interaction must have at least one event
                or
                Empty Guid is not allowed as event ID
                or
                Duplicate event ID
                or
                Referenced event ID does not exist or cyclic references exist in event collection
            </exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.IXdbOperation">
            <summary>
                Represents an operation that can be performed in xDB.
                An operation defines:
                - the type of operation that must be performed
                - its parameters
                - the logic to resolve dependencies from context, and update state given dependencies state during execution
                - the logic to update state, and entities involved in the operation from the result.
                Specfic operations define the format of the result.
                Implementations of <see cref="T:Sitecore.XConnect.Operations.XdbOperationInvoker" /> executes the operation and pass back the result to the operation in its
                expected format. Implementors may support different kinds of operations, and each must implement the logic to
                perform specific types of operations in their environment.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.BatchIndex">
            <summary>
            Gets the index of this operation in the batch where it is executed.
            </summary>
            <value>
            The index in the batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.Batch">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> this operation is associated with. This is null when the status is
                <see cref="F:Sitecore.XConnect.Operations.XdbOperationStatus.Created" />.
            </summary>
            <value>
                The batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.Exception">
            <summary>
                Gets the exception that caused the operation to fail if any.
            </summary>
            <value>
                The exception.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.Predecessors">
            <summary>
                Gets the operations this operation depends on, if any. The operation cannot be executed before these operations
                have completed.
            </summary>
            <value>
                The predecessors.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.Status">
            <summary>
                Gets the current status of the operation.
            </summary>
            <remarks>
                Invariant: The status must not change from a completed state to a non-completed state.
                That is, a succeeded or failed operation cannot be ready or pending again.
                Also, a succeeded operation cannot fail after success and vice versa
            </remarks>
            <value>
                The status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.Successors">
            <summary>
                Gets the operations dependent on this operation. These cannot be executed before this operation has completed.
            </summary>
            <value>
                The successors.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.IXdbOperation.Target">
            <summary>
                Gets the xDB object targeted by the operation.
            </summary>
            <value>
                The target.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IXdbOperation.Cancel">
            <summary>
                Cancels the operation and all its successors.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IXdbOperation.Retry">
            <summary>
            Instructs the executing <see cref="T:Sitecore.XConnect.IXdbContext"/> to retry this operation.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.Operations.IXdbOperation.DependencyAdded">
            <summary>
                Occurs when an operation is added to the <see cref="P:Sitecore.XConnect.Operations.IXdbOperation.Predecessors" /> set.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IXdbOperation.Fail(System.Exception)">
            <summary>
                Aborts the operation, setting its status to <see cref="F:Sitecore.XConnect.Operations.XdbOperationStatus.Failed" />.
            </summary>
            <param name="reason">The reason why the operation failed.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IXdbOperation.Initialize">
            <summary>
                Initializes the operation allowing it to resolve dependencies in the batch executing it.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IXdbOperation.Attach(Sitecore.XConnect.Operations.XdbOperationBatch,System.Int32)">
            <summary>
            Occurs when the operation has been added to an <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" />.
            Allows the operation to validate its data against the model, and perform other logic that requires an
            <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <param name="batch">The batch.</param>
            <param name="batchIndex">Index of the operation in the operation.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.IXdbOperation.Validate">
            <summary>
                Validates the data involved in the operation according to the operation's requirements.
                If validation fails an exception is thrown describing the kind of validation error that occured.
                This method does not change the state of the operation.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Sitecore.XConnect.Operations.IXdbOperation.StatusChanged">
            <summary>
                Occurs when the status changes
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ObservableSet`1">
            <summary>
                A set where actions a triggered whenever items are added or removed
            </summary>
            <typeparam name="TItem">The type of the items contained in the set.</typeparam>
            <seealso cref="T:System.Collections.Generic.ISet`1" />
        </member>
        <member name="F:Sitecore.XConnect.Operations.ObservableSet`1._innerSet">
            <summary>
                The underlying set containing the elements for this set.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.Add(`0)">
            <summary>
                Adds an element to the current set and returns a value to indicate if the element was successfully added.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>
                true if the element is added to the set; false if the element is already in the set.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.Contains(`0)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
                <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a proper subset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a proper superset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether a set is a subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a subset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a superset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.Remove(`0)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
                <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is equal to <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current set so that it contains only elements that are present either in the current set or in the
                specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current set so that it contains all elements that are present in either the current set or the
                specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.System#Collections#Generic#ICollection{TItem}#Add(`0)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="E:Sitecore.XConnect.Operations.ObservableSet`1.ItemAdded">
            <summary>
                Occurs when an item is added to the set.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.Operations.ObservableSet`1.ItemRemoved">
            <summary>
                Occurs when an item is removed from the set.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.Diff(System.Action)">
            <summary>
                Executes an action on the backing set, and triggers ItemAdded and ItemRemoved for the items added or removed by the
                action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.OnItemAdded(Sitecore.XConnect.Operations.ItemChangedEventArgs{`0})">
            <summary>
                Raises the <see cref="E:ItemAdded" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.ItemChangedEventArgs`1" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ObservableSet`1.OnItemRemoved(Sitecore.XConnect.Operations.ItemChangedEventArgs{`0})">
            <summary>
                Raises the <see cref="E:ItemRemoved" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.ItemChangedEventArgs`1" /> instance containing the event data.</param>
        </member>
        <member name="T:Sitecore.XConnect.Operations.SetFacetOperation`1">
            <summary>
            Sets a facet on an entity in xDB.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <seealso cref="T:Sitecore.XConnect.FacetReference" />
            <seealso cref="T:Sitecore.XConnect.Facet" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.SetFacetOperation`1.#ctor(Sitecore.XConnect.FacetReference,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.SetFacetOperation`1"/> class.
            </summary>
            <param name="facetReference">The facet reference.</param>
            <param name="facet">The facet.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SetFacetOperation`1.Facet">
            <summary>
            Gets the facet to set with this operation.
            </summary>
            <value>
            The facet.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.SetFacetOperation`1.Result">
            <summary>
            Gets the result returned from the provider when this operation has completed.
            If an exception prevented the provider to return a result this is null, even if the operation has completed.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SetFacetOperation`1.CreateFacetResult(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
            Creates a facet result given the specified facet. Allows generic type in typed SetFacet operation
            </summary>
            <param name="status">The status.</param>
            <param name="facet">The facet.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SetFacetOperation`1.Validate">
            <summary>
                Validates the facet against the model.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Interaction cannot be validated before operation is registered in an
                XdbContext
            </exception>
            <exception cref="T:Sitecore.XConnect.Schema.XdbModelException">
                The specified facet key is not defined in the model
                or
                The facet is not of the correct type
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.SetFacetOperation`1.Complete(Sitecore.XConnect.Operations.SaveResultStatus,Sitecore.XConnect.Facet)">
            <summary>
            Marks the operation as completed (either succeeded or failed) based on the result from the provider.
            </summary>
            <param name="status">The status returned from the provider.</param>
            <param name="currentVersion">The current version of the facet, or null depending on status.</param>
            <exception cref="T:System.ArgumentException">Invalid facet type for this operation</exception>
        </member>
        <member name="T:Sitecore.XConnect.Operations.StatusChangedEventArgs">
            <summary>
                Provides data for the <see cref="E:Sitecore.XConnect.Operations.IXdbOperation.StatusChanged" /> event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.StatusChangedEventArgs.#ctor(Sitecore.XConnect.Operations.XdbOperationStatus,Sitecore.XConnect.Operations.XdbOperationStatus)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.StatusChangedEventArgs" /> class.
            </summary>
            <param name="oldStatus">The operation's status before it changed.</param>
            <param name="newStatus">The operation's status after it changed.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.StatusChangedEventArgs.NewStatus">
            <summary>
                Gets the new status of the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />.
            </summary>
            <value>
                The new status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.StatusChangedEventArgs.OldStatus">
            <summary>
                Gets the status of the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> before its status changed.
            </summary>
            <value>
                The old status.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.ReferenceNotFoundException">
            <summary>
                The exception that is thrown when the referenced target is not found for an <see cref="T:Sitecore.XConnect.Operations.IGetEntityOperation" /> or
                <see cref="T:Sitecore.XConnect.Operations.IGetFacetOperation" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReferenceNotFoundException.#ctor(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.Schema.IXdbReference)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReferenceNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReferenceNotFoundException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReferenceNotFoundException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReferenceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReferenceNotFoundException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReferenceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReferenceNotFoundException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.ReferenceNotFoundException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.ReferenceNotFoundException" /> class.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.UpdateDeviceProfileOperation">
            <summary>
                Updates a device profile in xDB.
            </summary>
            <seealso cref="T:Sitecore.XConnect.DeviceProfile" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.UpdateDeviceProfileOperation.#ctor(Sitecore.XConnect.DeviceProfile)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.UpdateDeviceProfileOperation" /> class.
            </summary>
            <param name="deviceProfile">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.UpdateDeviceProfileOperation.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationBase`1">
            <summary>
                Base class for implementations of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <seealso cref="T:Sitecore.XConnect.Operations.IXdbOperation" />
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationBase`1._pendingPredecessors">
            <summary>
                The number dependencies that has not completed.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationBase`1._status">
            <summary>
                Backing field for <see cref="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Status" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBase`1" /> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Target">
            <summary>
                Gets the xDB object targeted by the operation.
            </summary>
            <value>
                The target.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.BatchIndex">
            <summary>
            Gets the index of this operation in the batch where it is executed.
            </summary>
            <value>
            The index in the batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Batch">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> this operation is associated with. This is null when the status is
                <see cref="F:Sitecore.XConnect.Operations.XdbOperationStatus.Created" />.
            </summary>
            <value>
                The batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Exception">
            <summary>
                Gets the exception that caused the operation to fail if any.
            </summary>
            <value>
                The exception.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.OperationType">
            <summary>
                Gets the type of the operation.
            </summary>
            <value>
                The type of the operation.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Predecessors">
            <summary>
                Gets the operations this operation depends on, if any. The operation cannot be executed before these operations
                have completed.
            </summary>
            <value>
                The predecessors.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Status">
            <summary>
                Gets the current status of the operation.
            </summary>
            <value>
                The status.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Successors">
            <summary>
                Gets the operations dependent on this operation. These cannot be executed before this operation has completed.
            </summary>
            <value>
                The successors.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Cancel">
            <summary>
                Cancels the operation and all its successors.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Retry">
            <summary>
            Instructs the executing <see cref="T:Sitecore.XConnect.IXdbContext" /> to retry this operation.
            </summary>
            <returns><c>true</c> if the operation can be retried; <c>false</c> otherwise</returns>
            <exception cref="T:System.InvalidOperationException">This operation is not associated with a batch</exception>
        </member>
        <member name="E:Sitecore.XConnect.Operations.XdbOperationBase`1.DependencyAdded">
            <summary>
                Occurs when an operation is added to the <see cref="P:Sitecore.XConnect.Operations.XdbOperationBase`1.Predecessors" /> set.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Fail(System.Exception)">
            <summary>
                Aborts the operation, setting its status to <see cref="F:Sitecore.XConnect.Operations.XdbOperationStatus.Failed" />.
            </summary>
            <param name="reason">The reason why the operation failed.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Initialize">
            <summary>
                Initializes the operation allowing it to resolve dependencies in the batch executing it.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.Operations.XdbOperationBase`1.StatusChanged">
            <summary>
                Occurs when the status changes
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Attach(Sitecore.XConnect.Operations.XdbOperationBatch,System.Int32)">
            <summary>
                Occurs when the operation has been added to an <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" />.
                Allows the operation to validate its data against the model, and perform other logic that requires an
                <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Validate">
            <summary>
                Validates the data involved in the operation according to the operation's requirements.
                If validation fails an exception is thrown describing the kind of validation error that occured.
                This method does not change the state of the operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.OnDependencyAdded(Sitecore.XConnect.Operations.DependencyAddedEventArgs)">
            <summary>
                Raises the <see cref="E:DependencyAdded" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.DependencyAddedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.OnStatusChanged(Sitecore.XConnect.Operations.StatusChangedEventArgs)">
            <summary>
                Raises the <see cref="E:StatusChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.StatusChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.ResolveDependencies">
            <summary>
                Resolves the operation's dependencies in the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> executing the operation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Succeed">
            <summary>
                Marks this operation as succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                The operation cannot succeed with outstanding predecessors
                or
                Only ready operations can complete
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBase`1.ValidatePreconditions">
            <summary>
                Validates any preconditions before the operation is marked as ready.
                Use <see cref="M:Sitecore.XConnect.Operations.XdbOperationBase`1.Fail(System.Exception)" /> if any precondition failed.
                Default behavior fails the operation is any dependencies failed with <see cref="T:Sitecore.XConnect.Operations.DependencyFailedException" />
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationBatch">
            <summary>
                A batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> to be executed in an <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationBatch._operationList">
            <summary>
            Preserves order of added operation to trace operation's batch indices to operation in <see cref="P:Sitecore.XConnect.IXdbContext.LastBatch"/>
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationBatch._operations">
            <summary>
                The operations in this batch.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationBatch._operationsByTarget">
            <summary>
                Operations grouped by target
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationBatch._readySet">
            <summary>
                The operations ready to execute.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.#ctor(Sitecore.XConnect.IXdbContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" /> class.
            </summary>
            <param name="context">The context that initialized this batch.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.BatchId">
            <summary>
            Gets a unique identifier for this batch.
            </summary>
            <value>
            The batch identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.DirectOperations">
            <summary>
            Gets the operations added directly to this batch through an <see cref="T:Sitecore.XConnect.IXdbContext"/>. This does not include operations added in event handlers or internally by operations' logic.
            </summary>
            <value>
            The direct operations.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.Operations">
            <summary>
                Gets all operations in this <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" />.
            </summary>
            <value>
                The operations.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.Context">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.IXdbContext" /> that initialized this batch.
            </summary>
            <value>
                The owner.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.ReadyOperations">
            <summary>
                Gets all operations ready to execute in this <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch" />.
            </summary>
            <value>
                The operations.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.Locked">
            <summary>
            Gets or sets a value indicating whether operations can be added to this <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatch"/>.
            </summary>
            <value>
              <c>true</c> if locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatch.RetryOperations">
            <summary>
            Gets the operations to retry in next execution round, if any. The value is the number of times the operation has been retried
            </summary>
            <value>
            The retry set.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through all the operations in this batch.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.Retry(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Retries the specified operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.Add(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Adds the specified operation to this batch.
            </summary>
            <param name="operation">The operation to add.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.Add(Sitecore.XConnect.Operations.IXdbOperation,System.Boolean)">
            <summary>
            Adds the specified operation to this batch.
            </summary>
            <param name="operation">The operation to add.</param>
            <param name="directlyAdded">A flag used for exception behavior of the owning, submitting context. If <c>true</c>, the operation was added explicitly by the user through an XdbContext, and not in events or indirectly through operation execution.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.CopyOperationToStationaryReference(Sitecore.XConnect.ITransientXdbReference)">
            <summary>
            Copies the operation to a stationary reference for completed transient reference, if a such exist.
            </summary>
            <param name="transient">The transient.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.ValidateTargetUniqueness(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
            Validates that only one non completed create, update or delete operation for a target exists in the batch.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.GetOperationsForTarget(Sitecore.XConnect.Schema.IXdbReference)">
            <summary>
                Gets the operations in this batch for the specified target.
                If the reference is an indirect reference (that is, entity ID is resolved by some other means), an operation to
                lookup the ID is added to this batch.
            </summary>
            <param name="target">The target.</param>
            <returns>The operations</returns>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.InitializeNewOperations">
            <summary>
                Initializes the operations that have recently been added.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.Operations.XdbOperationBatch.OperationAdded">
            <summary>
                Occurs when an operation is added to this batch.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.Operations.XdbOperationBatch.OperationCompleted">
            <summary>
                Occurs when an operation has executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.Operations.XdbOperationBatch.OperationsChanging">
            <summary>
                Occurs when operations are added to this batch, or when operations' dependencies change.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.OnOperationAdded(Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationAdded" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.OnOperationCompleted(Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationExecuted" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatch.OnOperationsChanging">
            <summary>
                Raises the <see cref="E:OperationsChanging" /> event.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs">
            <summary>
                Provides data for the operation batch events in an <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs.#ctor(Sitecore.XConnect.Operations.XdbOperationBatch)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> class.
            </summary>
            <param name="batch">The operation that triggerede the event.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs.Batch">
            <summary>
                Gets the batch of operations that triggered the event.
            </summary>
            <value>
                The operation.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationEventArgs">
            <summary>
                Provides data for the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> events in an <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationEventArgs.#ctor(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.Operations.XdbOperationBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> class.
            </summary>
            <param name="operation">The operation that triggered the event.</param>
            <param name="batch">The batch where the operation is executed.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationEventArgs.Operation">
            <summary>
                Gets the operation that triggered the event.
            </summary>
            <value>
                The operation.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbOperationEventArgs.Batch">
            <summary>
            Gets the batch that triggered the event.
            </summary>
            <value>
            The batch.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationHelpers">
            <summary>
                Helper methods for <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" /> and their related types
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbOperationHelpers.IsFinal(Sitecore.XConnect.Operations.XdbOperationStatus)">
            <summary>
                Determines whether the specified status represents a completed operation.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationStatus">
            <summary>
                The status of an <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationStatus.Created">
            <summary>
                The operation has been created but not yet added to an IXdbContext
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationStatus.Pending">
            <summary>
                The operation has been added to an IXdbContext, and one or more dependencies have not yet completed
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationStatus.Ready">
            <summary>
                The operation is ready to execute
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationStatus.Canceled">
            <summary>
                The operation was cancelled
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationStatus.Succeeded">
            <summary>
                The operation succeeded
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationStatus.Failed">
            <summary>
                The operation failed
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbOperationType">
            <summary>
                The general types of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationType.Read">
            <summary>
                The operation reads data
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationType.Create">
            <summary>
                The operation creates data
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationType.Update">
            <summary>
                The operation updates data
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationType.Patch">
            <summary>
            The operation patches data (partial update)
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationType.Delete">
            <summary>
                The operation deletes data
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Operations.XdbOperationType.Other">
            <summary>
                The operation performs an application specific action
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.EntityValidationException">
            <summary>
                The exception that is thrown when validation for an <see cref="T:Sitecore.XConnect.Entity" /> fails.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor(Sitecore.XConnect.Operations.IEntityOperation)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor(Sitecore.XConnect.Operations.IEntityOperation,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.IEntityReference,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
            <param name="operation">The operation that caused this exception.</param>
            <param name="entity">The entity related to the operation</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.EntityValidationException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.EntityValidationException.EntityId">
            <summary>
            The ID of the entity in the operation that caused this exception. For new entities this is null.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Operations.EntityValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbSearchOperation">
            <summary>
            Represents a search for contacts or interactions
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbSearchOperation.#ctor(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.XConnect.ExpandOptions,Sitecore.XConnect.EntityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbSearchOperation" /> class.
            </summary>
            <param name="searchQuery">The search query.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="entityType">Type of the entity searched.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbSearchOperation.ExpandOptions">
            <summary>
            Gets the expand options for projecting the matching entities.
            </summary>
            <value>
            The expand options.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbSearchOperation.SearchQuery">
            <summary>
            Gets the search query.
            </summary>
            <value>
            The search query.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbSearchOperation.EntityType">
            <summary>
            Gets the type of the entity being searched.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbSearchOperation.Results">
            <summary>
            Gets the results from the query after it has been executed.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbSearchOperation.OperationType">
            <summary>
            Gets the type of the operation.
            </summary>
            <value>
            The type of the operation.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbSearchOperation.Complete(Sitecore.XConnect.SearchResults)">
            <summary>
            Completes this operation with the given results.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbSearchOperation.Validate">
            <summary>
            Validates the data involved in the operation according to the operation's requirements.
            If validation fails an exception is thrown describing the kind of validation error that occured.
            This method does not change the state of the operation.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Operations.XdbSearchOperation`1">
            <summary>
            Represents a search for contacts or interactions
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbSearchOperation`1.#ctor(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.XConnect.ExpandOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Operations.XdbSearchOperation"/> class.
            </summary>        
            <param name="searchQuery">The search query.</param>
            <param name="expandOptions">The expand options.</param>
        </member>
        <member name="P:Sitecore.XConnect.Operations.XdbSearchOperation`1.Results">
            <summary>
            Gets the results from the query after it has been executed.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Operations.XdbSearchOperation`1.Validate">
            <summary>
            Validates the data involved in the operation according to the operation's requirements.
            If validation fails an exception is thrown describing the kind of validation error that occured.
            This method does not change the state of the operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Wrong entity type for query</exception>
        </member>
        <member name="F:Sitecore.XConnect.Search.AsyncSearchHitEnumerator`1._firstIteration">
            <summary>
            Flag indicating that the initial search results should be used for the first call to MoveNext()
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Search.AsyncSearchHitEnumerator`1.Results">
            <summary>
            The search predicate without percentile constraints.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Search.AnnotatedObjectsFilter`1">
            <summary>
            Filters all properties and types from <see cref="T:Sitecore.XConnect.Schema.XdbModel"/> that marked with <typeparamref name="TAnnotation"/> annotation.
            </summary>
            <typeparam name="TAnnotation">The type of annotation to check when filtering the model.</typeparam>
        </member>
        <member name="T:Sitecore.XConnect.Search.TypeFilterExpander">
            <summary>
            Expands type filters to OR predicates for all known inherited types. 
            For example Events.OfType&lt;Outcome&gt;().Any() expands to Events.Any(@odata.type="#Sitecore.XConnect.Outcome" OR @odata.type="#KnownOutcomeType1" OR ...)
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.#ctor(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Search.TypeFilterExpander"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Rewrite(Sitecore.XConnect.Search.Queries.FieldComparisonNode,System.Func{Sitecore.XConnect.Search.Queries.FieldNode,Sitecore.XConnect.Search.Queries.ConstantNode,Sitecore.XConnect.Search.Queries.QueryNode})">
            <summary>
            Validates the specified <see cref="T:Sitecore.XConnect.Search.Queries.FieldComparisonNode"/>.
            </summary>
            <param name="node">The node.</param>        
            <param name="updateFunction">The update method from the concrete implementation of the <see cref="T:Sitecore.XConnect.Search.Queries.FieldComparisonNode"/>.</param>
            <returns>A valid <see cref="T:Sitecore.XConnect.Search.Queries.QueryNode"/></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.FieldEqualsNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.FieldNotEqualsNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.FieldGreaterThanNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.FieldGreaterThanOrEqualNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.FieldLessThanNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.FieldLessThanOrEqualNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.Visit(Sitecore.XConnect.Search.Queries.AnyNode,System.Object)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Search.TypeFilterExpander.RemoveTypeConversion(Sitecore.XConnect.Search.Queries.FieldNode,Sitecore.XConnect.Schema.XdbObjectType@,Sitecore.XConnect.Search.Queries.FieldNode@)">
            <summary>
            Removes type conversions from field names and returns the matching type, if any.
            </summary>
            <param name="fieldNode">The field node.</param>
            <param name="type">The type.</param>
            <param name="newField">The updated field with out conversion in name.</param>
            <returns></returns>
            <exception cref="T:Sitecore.XConnect.Schema.XdbModelException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Search.AsyncEntityQueryProvider.ProjectResults``1(System.Type,Sitecore.XConnect.Search.AsyncSearchHitEnumerator{``0},Sitecore.XConnect.Search.SearchResultType)">
            <summary>
            Gets the query result from the search results.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="expectedResultType">The expected result.</param>
            <param name="enumerator">The results.</param>
            <param name="resultType">Type of the result.</param>        
            <returns></returns>
            <exception cref="T:Sitecore.XConnect.Search.YourLinqIsTooStrongException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Search.QueryNodeModelValidator.Validate(Sitecore.XConnect.Search.Queries.FieldComparisonNode,Sitecore.XConnect.Schema.ModelNavigator,System.Func{Sitecore.XConnect.Search.Queries.FieldNode,Sitecore.XConnect.Search.Queries.ConstantNode,Sitecore.XConnect.Search.Queries.QueryNode})">
            <summary>
            Validates the specified <see cref="T:Sitecore.XConnect.Search.Queries.FieldComparisonNode"/>.
            </summary>
            <param name="node">The node.</param>
            <param name="argument">The argument.</param>
            <param name="updateFunction">The update method from the concrete implementation of the <see cref="T:Sitecore.XConnect.Search.Queries.FieldComparisonNode"/>.</param>
            <returns>A valid <see cref="T:Sitecore.XConnect.Search.Queries.QueryNode"/></returns>
        </member>
        <member name="T:Sitecore.XConnect.Search.SearchQueryValidator">
            <summary>
            Validates a <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/> against an <see cref="T:Sitecore.XConnect.Schema.XdbModel"/>.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Search.SearchQueryValidator.#ctor(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Search.SearchQueryValidator"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Sitecore.XConnect.Search.SearchQueryValidator.Model">
            <summary>
            Gets the model to validate against.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Search.SearchQueryValidator.Validate(Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Validates the specified query against the model.
            </summary>
            <param name="query">The query to validate.</param>
        </member>
        <member name="T:Sitecore.XConnect.Search.SearchHelpers">
            <summary>
            Provides conversion between XdbModel and search types.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Search.QueryableExpressionRewriter">
            <summary>
            Replaces IAsyncQueryable with IQueryable, and AsyncQueryable method calls with corresponding Queryable method calls. Cancellation token arguments are removed.
            In this way query parsers that expect Expressions that work on IQueryable can be used.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Search.QueryableExpressionRewriter.TypesAreEqual(System.Type,System.Type)">
            <summary>
            Determines if two types are equal. Generic type parameters are always considered to be equal.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.QueryableExpressionRewriter.AddMappings(System.Collections.Generic.Dictionary{System.Reflection.MethodInfo,Sitecore.XConnect.Search.QueryableExpressionRewriter.MethodReplacement},System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Maps IQueryable methods to equivalent IAsyncQueryable methods
            </summary>
            <param name="map">The target dictionary for the mappings.</param>
            <param name="queryableExtensions">The type containg IQueryable extension methods.</param>
            <param name="asyncQueryableExtensions">The type containg IAsyncQueryable extension methods.</param>
            <param name="genericQueryableType">Generic IQueryable type definition. For example typeof(IQueryable&lt;&gt;) typeof(IOrderedQueryable&lt;&gt;).</param>
            <param name="genericAsyncQueryableType">Generic IAsyncQueryable definition.</param>
        </member>
        <member name="T:Sitecore.XConnect.Search.QueryableExpressionRewriter.AsyncQueryableWrapper`1">
            <summary>
            Used to replace IAsyncQueryable references in the <see cref="T:Sitecore.XConnect.Search.QueryableExpressionRewriter"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <seealso cref="T:System.Linq.IQueryable`1" />
        </member>
        <member name="T:Sitecore.XConnect.Search.QueryNodeMapper">
            <summary>
            Maps an <see cref="T:System.Linq.Expressions.Expression"/> to a corresponding <see cref="T:Sitecore.XConnect.Search.Queries.QueryNode"/>.
            </summary>
            <seealso cref="T:Remotion.Linq.Parsing.ThrowingExpressionVisitor" />
        </member>
        <member name="F:Sitecore.XConnect.Search.QueryNodeMapper._fieldPath">
            <summary>
            Collects the field path for a field node while member and method expressions are visited.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Search.QueryNodeMapper.VisitFieldPredicateConstant(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression to get a constant node for a field comparison.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Search.QueryNodeMapper.ConvertValue(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Converts the CLR type to its corresponding value for search.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Dates must be either local or UTC</exception>
        </member>
        <member name="M:Sitecore.XConnect.Search.QueryNodeMapper.TryGetFacetName(System.Linq.Expressions.MethodCallExpression,System.String@,System.Linq.Expressions.Expression@)">
            <summary>
            Given a method call, extracts the name of the facet being referenced if any, and the object the method is called on. For extension methods this is typically the first argument.
            </summary>
            <param name="expression">A method call expression.</param>
            <param name="facetName">The name of the facet.</param>
            <param name="objectExpression">The object the method is called on (first argument for extension methods).</param>
            <returns><c>true</c> if the method is a reference to a facet; <c>false</c> otherwise</returns>
        </member>
        <member name="T:Sitecore.XConnect.Search.QueryNodeMapper.QueryNodeWrapper">
            <summary>
            Wrapper class to return QueryNode from the visitor methods.
            </summary>
            <seealso cref="T:System.Linq.Expressions.Expression" />
        </member>
        <member name="T:Sitecore.XConnect.Search.SearchQueryBuilder">
            <summary>
            Maps a <see cref="T:Remotion.Linq.QueryModel"/> to a <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/>. The properties are populated while nodes are visited.
            </summary>
            <seealso cref="T:Remotion.Linq.QueryModelVisitorBase" />
        </member>
        <member name="T:Sitecore.XConnect.Search.SpecialQueryMethods">
            <summary>
            Methods with a special meaning in search queries
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.EmptyInteractionBatchEnumerator.Split(Sitecore.XConnect.Operations.SplitPreference)">
            <summary>
            Splits off a new enumerator with the specified preference. After the operation this enumerator will contain the remaining entities.
            The estimated entity count and position properties will be updated.
            </summary>
            <param name="splitPreference">The split preference.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.ExpandOptionsHelpers">
            <summary>
            Helper methods for expand options
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptionsHelpers.Expand``1(Sitecore.XConnect.ExpandOptions)">
            <summary>
            Expand the specified facet for the entities in the result.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptionsHelpers.Expand``1(Sitecore.XConnect.ContactExpandOptions)">
            <summary>
            Expand the specified facet for the entities in the result.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptionsHelpers.Expand``1(Sitecore.XConnect.InteractionExpandOptions)">
            <summary>
            Expand the specified facet for the entities in the result.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptionsHelpers.Expand``1(Sitecore.XConnect.RelatedInteractionsExpandOptions)">
            <summary>
            Expand the specified facet for the entities in the result.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptionsHelpers.Expand``1(Sitecore.XConnect.RelatedContactExpandOptions)">
            <summary>
            Expand the specified facet for the entities in the result.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.IAsyncInteractionBatchEnumerator">
            <summary>
            Enumerator for a set of interactions.
            </summary>    
        </member>
        <member name="P:Sitecore.XConnect.IAsyncInteractionBatchEnumerator.MinimumStartDateTime">
            <summary>
            Gets the minimum start date time for the enumerated interactions.
            </summary>
            <value>
            The minimum start date time.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IAsyncInteractionBatchEnumerator.MaximumStartDateTime">
            <summary>
            Gets the maximum start date time for the enumerated interactions.
            </summary>
            <value>
            The maximum start date time.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.IAsyncInteractionBatchEnumerator.Split(Sitecore.XConnect.Operations.SplitPreference)">
            <summary>
            Splits off a new enumerator with the specified preference. After the operation this enumerator will contain the remaining entities.
            The estimated entity count and position properties will be updated.
            </summary>
            <param name="splitPreference">The split preference.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.EntityExtractionExtensions">
            <summary>
            Extensions to enumerate entites from the primary datastore.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.CreateInteractionEnumerator(Sitecore.XConnect.IXdbContext,System.DateTime,Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates an interaction enumerator for enumerating all interactions saved before the specified cutoff date.
            </summary>
            <param name="context">The context.</param>
            <param name="cutoffDate">The cutoff date.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Default batch size when consuming the enumerator.</param>
            <returns>An enumerator for the interactions</returns>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.CreateInteractionEnumerator(Sitecore.XConnect.IXdbContext,System.DateTime,System.DateTime,System.DateTime,Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates an interaction enumerator for enumerating all interactions saved before the specified cutoff date with start date time in the specified range.
            </summary>
            <param name="context">The context.</param>
            <param name="cutoffDate">The cutoff date.</param>
            <param name="minStartDateTime">The minimum start date time (inclusive).</param>
            <param name="maxStartDateTime">The maximum start date time (exclusive).</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Default batch size when consuming the enumerator.</param>
            <returns>
            An enumerator for the interactions
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.CreateContactEnumerator(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates a contact enumerator for enumerating all contacts.
            </summary>
            <param name="context">The context.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Default batch size when consuming the enumerator.</param>
            <returns>
            An enumerator for the contacts.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.CreateInteractionEnumerator(Sitecore.XConnect.IXdbContext,System.Byte[],Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates an interaction enumerator at the position of a previous enumerator obtained with one of the other overloads of this method.
            See <see cref="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.GetBookmark"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="bookmark">The bookmark.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Size of the batch.</param>
            An enumerator for the interactions
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.CreateContactEnumerator(Sitecore.XConnect.IXdbContext,System.Byte[],Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates a contact enumerator at the position of a previous enumerator obtained with one of the other overloads of this method.
            See <see cref="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.GetBookmark"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="bookmark">The bookmark.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Size of the batch.</param>
            <returns>An enumerator for the contacts</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.ForEachAsync``1(Sitecore.XConnect.IAsyncEntityBatchEnumerator{``0},System.Action{``0})">
            <summary>
            Applies an action to each entity in returned by the specified enumerator.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="enumerator">The enumerator.</param>
            <param name="action">The action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.ForEachAsync``1(Sitecore.XConnect.IAsyncEntityBatchEnumerator{``0},System.Action{``0},System.Int32)">
            <summary>
            Applies an action to each entity in returned by the specified enumerator.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="enumerator">The enumerator.</param>
            <param name="action">The action.</param>
            <param name="maxThreads">The maximum number of threads used to process entities in parallel.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.ForEachBatchAsync``1(Sitecore.XConnect.IAsyncEntityBatchEnumerator{``0},System.Func{System.Collections.Generic.IReadOnlyCollection{``0},System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Applies an action to each batch of entities returned by the specified enumerator in parallel.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="enumerator">The enumerator.</param>
            <param name="asyncAction">The action.</param>
            <param name="maxThreads">The maximum number of threads used to process the batches in parallel.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.Split``1(Sitecore.XConnect.IAsyncEntityBatchEnumerator{``0},System.Int32)">
            <summary>
            Splits off a new enumerator with the specified preference. After the operation this enumerator will contain the remaining entities.
            The estimated total count will be updated.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="enumerator">The enumerator to split.</param>
            <param name="preferredCount">The preferred count in the new enumerator.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.CreateSplits``1(Sitecore.XConnect.IAsyncEntityBatchEnumerator{``0},System.Int32)">
            <summary>
            Splits the specified enumerator into at most the specified number of enumerators for parallel processing.
            The returned number of enumerators may be lower than the requested number.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="enumerator">The enumerator.</param>
            <param name="maxSplits">The maximum splits.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.EntityExtractionExtensions.ForEachBatchAsync``1(Sitecore.XConnect.IAsyncEntityBatchEnumerator{``0},System.Func{System.Collections.Generic.IReadOnlyCollection{``0},System.Threading.Tasks.Task})">
            <summary>
            Applies an action to each batch of entities returned by the specified enumerator.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="enumerator">The enumerator.</param>
            <param name="asyncAction">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1">
            <summary>
            Enumerates potentially large amounts of entities in batches.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>    
        </member>
        <member name="P:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.TotalCount">
            <summary>
            Gets the total number of entities in the set. This is an estimate if <see cref="P:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.IsCountEstimated"/> is <c>true</c>.
            </summary>
            <value>
            The estimated entity count.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.IsCountEstimated">
            <summary>
            Gets a value indicating whether <see cref="P:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.TotalCount"/> is estimated
            </summary>
            <value>
            <c>true</c> if the count is estimated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.GetBookmark">
            <summary>
            Gets a bookmark that can be persisted and used to retrieve an enumerator at same position as this enumerator at a later point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.MoveNext(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Advances this enumerator to the next batch of entities.
            This will update the Current and Position properties will be updated.
            </summary>
            <param name="batchSize">The number of entities to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.Split(Sitecore.XConnect.Operations.SplitPreference)">
            <summary>
            Splits off a new enumerator with the specified preference. After the operation this enumerator will contain the entities given by the split preference, and the new enumerator the remaining entities.
            The estimated total count will be updated.
            </summary>
            <param name="splitPreference">The split preference.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.AsyncEventHandler`1">
            <summary>
            Represents the method that will handle an event when the event provides data.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An object that contains the event data. </param>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>    
        </member>
        <member name="T:Sitecore.XConnect.ContactIdentifierType">
            <summary>
                Represents whether a <see cref="T:Sitecore.XConnect.ContactIdentifier" /> identifies a known contact.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.ContactIdentifierType.Anonymous">
            <summary>
                The identifier is a handle from an external system, and does not identify a known contact
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.ContactIdentifierType.Known">
            <summary>
                A known contact is identified by the information
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.EventCollection">
            <summary>
            A collection of events for an <see cref="T:Sitecore.XConnect.Interaction"/>.
            </summary>    
        </member>
        <member name="T:Sitecore.XConnect.InteractionExpandOptions">
            <summary>
                Defines what data to include when <see cref="T:Sitecore.XConnect.Interaction" />s are loaded from xDB.
                Enables <see cref="T:Sitecore.XConnect.Interaction" />'s contacts to be loaded with the facets given by some criteria.
            </summary>
            <seealso cref="T:Sitecore.XConnect.ExpandOptions" />
        </member>
        <member name="M:Sitecore.XConnect.InteractionExpandOptions.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.InteractionExpandOptions" /> class.
            </summary>
            <param name="facets">The facets to expand.</param>
        </member>
        <member name="P:Sitecore.XConnect.InteractionExpandOptions.Contact">
            <summary>
                If set, specifies which contact's facets to include for interactions.
            </summary>
            <value>
                The <see cref="T:Sitecore.XConnect.RelatedContactExpandOptions" />.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.ExponentialBackoffStrategy">
            <summary>
            A <see cref="T:Sitecore.XConnect.RetryStrategy"/> that uses exponential backoff for pausing (https://en.wikipedia.org/wiki/Exponential_backoff)
            </summary>
            <seealso cref="T:Sitecore.XConnect.RetryStrategy" />
        </member>
        <member name="M:Sitecore.XConnect.ExponentialBackoffStrategy.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.ExponentialBackoffStrategy"/> class.
            </summary>
            <param name="slotTime">The slot time.</param>
            <param name="maxRetries">The maximum number of retries.</param>
        </member>
        <member name="P:Sitecore.XConnect.ExponentialBackoffStrategy.SlotTime">
            <summary>
            Gets the slot time used when pausing.
            </summary>
            <value>
            The slot time.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.ExponentialBackoffStrategy.Pause(System.Int32)">
            <summary>
            Pauses execution before operations are retried
            </summary>
            <param name="retryNumber">The retry number.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ExponentialBackoffStrategy.Pause(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Pauses execution before operations are retried
            </summary>
            <param name="retryNumber">The retry number.</param>
            <param name="minDelayInSec">The minimum delay before the next retry (in seconds).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.IReadOnlyXdbContext">
            <summary>
                Represents an <see cref="T:Sitecore.XConnect.IXdbContext"/> that can only do read operations
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.IReadOnlyXdbContext.Model">
            <summary>
                Gets the model for this context.
            </summary>
            <value>
                The model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IReadOnlyXdbContext.Contacts">
            <summary>
            Returns an async queryable for searching contacts using LINQ.
            </summary>
            <value>
            The queryable
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IReadOnlyXdbContext.Interactions">
            <summary>
            Returns an async queryable for searching interactions using LINQ.
            </summary>
            <value>
            The queryable
            </value>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.GetAsync``1(System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{``0}},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the entities from their references if they exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <returns>The entities matching the references, if found</returns>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.GetAsync``1(System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{``0}},Sitecore.XConnect.ExpandOptions,System.TimeSpan)">
            <summary>
            Gets the entities from their references if they exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="timeout">The timeout to use when reading the entity from the storage.</param>
            <returns>The entities matching the references, if found</returns>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.GetAsync``1(System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{``0}},Sitecore.XConnect.ExpandOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the entities from their references if they exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns>The entities matching the references, if found</returns>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.GetAsync``1(Sitecore.XConnect.IEntityReference{``0},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the referenced entity.
            </summary>
            <remarks>Avoid using this method if you need to get more than entity. Use the overload that takes a list of references instead, since it performs better</remarks>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="reference">The reference to the entity.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <returns>The entity if it exists or null if it does not exist. If any exception occurred while loading the entity, this exception is thrown</returns>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.GetAsync``1(Sitecore.XConnect.IEntityReference{``0},Sitecore.XConnect.ExpandOptions,System.TimeSpan)">
            <summary>
            Gets the referenced entity.
            </summary>
            <remarks>Avoid using this method if you need to get more than entity. Use the overload that takes a list of references instead, since it performs better</remarks>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="reference">The reference to the entity.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <param name="timeout">The HTTP timeout to execute the operation.</param>
            <returns>The entity if it exists or null if it does not exist. If any exception occurred while loading the entity, this exception is thrown</returns>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.GetAsync``1(Sitecore.XConnect.IEntityReference{``0},Sitecore.XConnect.ExpandOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the referenced entity.
            </summary>
            <remarks>Avoid using this method if you need to get more than entity. Use the overload that takes a list of references instead, since it performs better</remarks>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="reference">The reference to the entity.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns>The entity if it exists or null if it does not exist. If any exception occurred while loading the entity, this exception is thrown</returns>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.CreateInteractionEnumerator(System.DateTime,System.DateTime,System.DateTime,Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates an interaction enumerator for enumerating all interactions saved before the specified cutoff date with start date time in the specified range.
            </summary>
            <param name="cutoffDate">The cutoff date.</param>
            <param name="minStartDateTime">The minimum start date time (inclusive).</param>
            <param name="maxStartDateTime">The maximum start date time (exclusive).</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Default batch size when consuming the enumerator.</param>
            <returns>
            An enumerator for the interactions
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.CreateContactEnumerator(Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates a contact enumerator for enumerating all contacts.
            </summary>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Default batch size when consuming the enumerator.</param>
            <returns>
            An enumerator for the contacts.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.CreateInteractionEnumerator(System.Byte[],Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates an interaction enumerator at the position of a previous enumerator obtained with one of the other overloads of this method.
            See <see cref="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.GetBookmark"/>.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Size of the batch.</param>
            An enumerator for the interactions
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.IReadOnlyXdbContext.CreateContactEnumerator(System.Byte[],Sitecore.XConnect.ExpandOptions,System.Int32)">
            <summary>
            Creates a contact enumerator at the position of a previous enumerator obtained with one of the other overloads of this method.
            See <see cref="M:Sitecore.XConnect.IAsyncEntityBatchEnumerator`1.GetBookmark"/>.
            </summary>
            <param name="bookmark">The bookmark.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="batchSize">Size of the batch.</param>
            An enumerator for the contacts
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Sitecore.XConnect.IXdbContext">
            <summary>
            Interacts with the xDB through <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/>s. Both the xConnect client and collection service are implementations of this interface.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.IXdbContext.Configuration">
            <summary>
            Gets the <see cref="T:Sitecore.XConnect.XdbContextConfiguration"/> used by this instance, if any.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IXdbContext.SyncToken">
            <summary>
            Gets or sets the synchronization token used to wait for search consistency.
            If null is specified, no waiting will happen. Mutating operations update this token as they execute.
            This value can be stored after a batch import job, and other processes that must take these changes into account can set their value to that from the import job.
            </summary>
            <value>
            The synchronization token.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IXdbContext.LastBatchId">
            <summary>
            Gets the unique identifier for the last batch executed.
            </summary>
            <value>
            The last batch identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IXdbContext.LastBatch">
            <summary>
            Gets the last batch of operations exectued in this context, if any.
            </summary>
            <value>
            The last batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IXdbContext.OperationInvokers">
            <summary>
                Gets the operation <see cref="T:Sitecore.XConnect.Operations.XdbOperationInvoker" />s registered for this context.
            </summary>
            <value>
                The operation invokers.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IXdbContext.DirectOperations">
            <summary>
            Gets the operations directly added to this context.
            </summary>
            <value>
            The directly added operations.
            </value>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.BatchExecuted">
            <summary>
                Occurs when all the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch have completed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.BatchExecutedAsync">
            <summary>
                Occurs when all the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch have completed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.BatchExecuting">
            <summary>
                Occurs before a batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s is executed. Note that operations may be added to the batch
                while operations are executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.BatchExecutingAsync">
            <summary>
                Occurs before a batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s is executed. Note that operations may be added to the batch
                while operations are executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.BatchExecutionFailed">
            <summary>
                Occurs when a unrecoverable exception prevented some or all the operations in a batch from executing
            </summary>
            <remarks>
                This event will not be raised if some or all the operations failed. In this case the BatchExecuted event is raised.
                This event is only raised if an unhandled exception was thrown during batch execution.
            </remarks>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.BatchExecutionFailedAsync">
            <summary>
                Occurs when a unrecoverable exception prevented some or all the operations in a batch from executing
            </summary>
            <remarks>
                This event will not be raised if some or all the operations failed. In this case the BatchExecuted event is raised.
                This event is only raised if an unhandled exception was thrown during batch execution.
            </remarks>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.OperationAdded">
            <summary>
                Occurs when an operation is added to this batch.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.OperationCompleted">
            <summary>
                Occurs when an operation has executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.IXdbContext.OperationExecuting">
            <summary>
                Occurs the first time an operation is about to execute. Implementors execution strategy may vary, so execution can
                be postponed after this point.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.IXdbContext.RegisterOperation(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Registers the operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Sitecore.XConnect.IXdbContext.ExecuteAsync(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation})">
            <summary>
                Executes the given operations in an isolated batch.
                This method is thread safe.
            </summary>
            <param name="operations">The operations.</param>
        </member>
        <member name="M:Sitecore.XConnect.IXdbContext.ExecuteAsync(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation},System.Threading.CancellationToken)">
            <summary>
                Executes the given operations in an isolated batch.
                This method is thread safe.
            </summary>
            <param name="operations">The operations.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
        </member>
        <member name="M:Sitecore.XConnect.IXdbContext.SubmitAsync">
            <summary>
            Submits the operations added to this <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.IXdbContext.SubmitAsync(System.Threading.CancellationToken)">
            <summary>
            Submits the operations added to this <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
        </member>
        <member name="M:Sitecore.XConnect.IXdbContext.AsReadOnly">
            <summary>
            Returns a read-only wrapper for this XdbContext.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sitecore.XConnect.ReadOnlyXdbContext.Model">
            <summary>
                Gets the model for this context.
            </summary>
            <value>
                The model.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.RetryStrategy">
            <summary>
            Retry strategy for <see cref="T:Sitecore.XConnect.Operations.IXdbOperation"/>s. Defines the maximum allowed number of retries, and implements logic for pausing between attempts
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.RetryStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.RetryStrategy"/> class.
            </summary>
            <param name="maxRetries">The maximum number of retries.</param>
        </member>
        <member name="P:Sitecore.XConnect.RetryStrategy.MaxRetries">
            <summary>
            Gets the maximum number of times an operation can retry.
            </summary>
            <value>
            The maximum retries.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.RetryStrategy.Pause(System.Int32)">
            <summary>
            Pauses execution before operations are retried
            </summary>
            <param name="retryNumber">The retry number.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.RetryStrategy.Pause(System.Int32,System.Int32)">
            <summary>
            Pauses execution before operations are retried
            </summary>
            <param name="retryNumber">The retry number.</param>
            <param name="minDelayInSec">The minimum delay before the next retry (in seconds).</param>        
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.RetryStrategy.Pause(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Pauses execution before operations are retried
            </summary>
            <param name="retryNumber">The retry number.</param>
            <param name="minDelayInSec">The minimum delay before the next retry (in seconds).</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.RelatedContactExpandOptions">
            <summary>
                Criteria for inclusion of related contact in <see cref="T:Sitecore.XConnect.InteractionExpandOptions" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.RelatedContactExpandOptions.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.RelatedContactExpandOptions" /> class.
            </summary>
            <param name="facets">The facets.</param>
        </member>
        <member name="M:Sitecore.XConnect.RelatedContactExpandOptions.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.RelatedContactExpandOptions" /> class.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.ContactIdentifierReference">
            <summary>
            A reference to a <see cref="P:Sitecore.XConnect.ContactIdentifierReference.Contact"/>'s <see cref="T:Sitecore.XConnect.ContactIdentifier"/>.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbReference" />
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifierReference.#ctor(Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.ContactIdentifierReference"/> class.
            </summary>
            <param name="contact">The contact.</param>
            <param name="source">The source.</param>
            <param name="identifier">The identifier.</param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifierReference.Contact">
            <summary>
            Gets the contact.
            </summary>
            <value>
            The contact.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifierReference.Source">
            <summary>
            Gets the referenced identifier's source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifierReference.Identifier">
            <summary>
            Gets the referenced identifier's identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifierReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifierReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifierReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.ITransientXdbReference">
            <summary>
            An <see cref="T:Sitecore.XConnect.Schema.IXdbReference"/> whose equality to a stationary reference may change over time.
            For example, new <see cref="T:Sitecore.XConnect.Entity"/>s may have an ID assigned which affects both entity reference comparisons, but also indirectly facet reference comparisons.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbReference" />
        </member>
        <member name="M:Sitecore.XConnect.ITransientXdbReference.TryGetStationaryReference(Sitecore.XConnect.Schema.IXdbReference@)">
            <summary>
            Gets a stationary reference that will not change over time if possible given the current state of this reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.SearchHit">
            <summary>
            Represents a result in <see cref="P:Sitecore.XConnect.SearchResults.Results"/>
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.SearchHit.#ctor(System.Object,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.SearchHit"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="score">The score.</param>
        </member>
        <member name="P:Sitecore.XConnect.SearchHit.Item">
            <summary>
            Gets the item that matched the query.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.SearchHit.Score">
            <summary>
            Gets the score, that is, how well the item matched the query.        
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.ReflectionClrTypeLoader">
            <summary>
            An implementation of <see cref="T:Sitecore.XConnect.Serialization.IXdbModelClrTypeLoader"/> that uses Type.GetType to load types.
            </summary>
            <seealso>
                <cref>Sitecore.XConnect.Model.Reflection.IXdbModelClrTypeLoader</cref>
            </seealso>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.ReflectionClrTypeLoader.TryLoadType(Sitecore.XConnect.Schema.XdbType,System.String,System.Type@)">
            <summary>
            Tries the to load the type from an assembly qualified name.
            </summary>
            <param name="xdbType">The xDB type that has a CLR type hint.</param>
            <param name="assemblyQualifiedName">The assembly qualified name.</param>
            <param name="clrType">The type if loaded.</param>
            <returns>
              <c>true</c> if the type could be loaded; <c>false</c> otherwise
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.IXdbModelClrTypeLoader">
            <summary>
            Loads types from the "ClrType" hint in the JSON representation of an <see cref="T:Sitecore.XConnect.Schema.XdbModel"/>.        
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.IXdbModelClrTypeLoader.TryLoadType(Sitecore.XConnect.Schema.XdbType,System.String,System.Type@)">
            <summary>
            Tries the to load the type from an assembly qualified name.
            </summary>
            <param name="xdbType">The xDB type that has a CLR type hint.</param>
            <param name="assemblyQualifiedName">The assembly qualified name.</param>
            <param name="clrType">The type if loaded.</param>
            <returns>
              <c>true</c> if the type could be loaded; <c>false</c> otherwise
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.DeserializationHelpers">
            <summary>
                This class supports the infrastructure with helper methods to set internal members of entities for deserialization purposes.
                Do not use these methods for other purposes.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetId(Sitecore.XConnect.Entity,System.Nullable{System.Guid})">
            <summary>
                Sets the ID for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetId(Sitecore.XConnect.Entity,System.Guid)">
            <summary>
                Sets the ID for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetConcurrencyToken(Sitecore.XConnect.Entity,System.Nullable{System.Guid})">
            <summary>
                Sets the concurrency token for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="concurrencyToken">The concurrency token.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetConcurrencyToken(Sitecore.XConnect.Facet,System.Nullable{System.Guid})">
            <summary>
                Sets the concurrency token for the specified entity.
            </summary>
            <param name="facet">The entity.</param>
            <param name="concurrencyToken">The concurrency token.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetLastModified(Sitecore.XConnect.Entity,System.Nullable{System.DateTime})">
            <summary>
                Sets the last modified date for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="lastModified">The last modified date.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetLastModified(Sitecore.XConnect.Facet,System.Nullable{System.DateTime})">
            <summary>
                Sets the last modified date for the specified entity.
            </summary>
            <param name="facet">The entity.</param>
            <param name="lastModified">The last modified date.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetFacet(Sitecore.XConnect.Entity,System.String,Sitecore.XConnect.Facet)">
            <summary>
                Sets the facet for the entity specified.
            </summary>
            <param name="entity">The entity.</param>
            <param name="facetName">Name of the facet.</param>
            <param name="facet">The facet.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetContact(Sitecore.XConnect.Interaction,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact})">
            <summary>
                Sets the contact reference for the interaction specified.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="contact">The contact.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetInteractions(Sitecore.XConnect.Contact,System.Collections.Generic.IList{Sitecore.XConnect.Interaction})">
            <summary>
                Sets the interaction collection for the contact specified.
            </summary>
            <param name="contact">The contact.</param>
            <param name="interactions">The interactions.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.DeserializationHelpers.SetIdentifiers(Sitecore.XConnect.Contact,System.Collections.Generic.IList{Sitecore.XConnect.ContactIdentifier})">
            <summary>
                Sets the interaction collection for the contact specified.
            </summary>
            <param name="contact">The contact.</param>
            <param name="identifiers">The interactions.</param>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XdbSerializationException">
            <summary>
                The exception thrown when an exception occurs while serialization or deserialization in an
                <see cref="T:Sitecore.XConnect.Serialization.XObjectReader" /> or an <see cref="T:Sitecore.XConnect.Serialization.XObjectWriter" />.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbSerializationException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbSerializationException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbSerializationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbSerializationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbSerializationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbSerializationException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbSerializationException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XObjectReader">
            <summary>
                Deserializes <see cref="T:Sitecore.XConnect.XObject" />s from a <see cref="T:System.IO.TextReader" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.#ctor(Sitecore.XConnect.Schema.XdbModel,System.IO.TextReader,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XObjectReader" /> class.
            </summary>
            <param name="model">The model.</param>
            <param name="reader">The reader.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the TextReader open.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.#ctor(Sitecore.XConnect.Schema.XdbModel,Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XObjectReader" /> class.
            </summary>
            <param name="model">The model with type information for the data to deserialize.</param>
            <param name="reader">The reader.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the JsonReader open.</param>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectReader.Model">
            <summary>
                Gets the model containing type information for the data to deserialize.
            </summary>
            <value>
                The model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectReader.Settings">
            <summary>
                Gets or sets the settings for the behavior of this reader.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.Read(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Reads a value of the expected type from the underlying text reader by first advancing it to the next position.
            </summary>
            <param name="expectedType">The expected type.</param>
            <returns></returns>
            <exception cref="T:System.IO.EndOfStreamException">Unexpected end of stream</exception>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.ReadAtCurrentPosition(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Reads a value of the expected type from the underlying text reader at its current position
            </summary>
            <param name="expectedType">The expected type.</param>
            <returns></returns>
            <exception cref="T:System.IO.EndOfStreamException">Unexpected end of stream</exception>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.ReadPrimitive(Newtonsoft.Json.JsonReader,Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Reads the primitive value from the json stream.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeKind">Primitive type kind.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Unsupported primitive type</exception>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.TryReadTypeName(Newtonsoft.Json.JsonReader,System.String@)">
            <summary>
                Reads the type name for the type to deserialize if any.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeName">Name of the type, if type information was included in the text stream.</param>
            <returns><c>true</c> if type information was present; <c>false</c> otherwise</returns>
            <exception cref="T:System.IO.EndOfStreamException">Unexpected end of stream</exception>
            <exception cref="T:Sitecore.XConnect.Schema.XdbModelException">Unkown type</exception>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectReader.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XObjectReaderSettings">
            <summary>
                Controls the behavior of an <see cref="T:Sitecore.XConnect.Serialization.XObjectReader" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectReaderSettings.IgnoreUnknownProperties">
            <summary>
                Gets or sets a value indicating whether properties not declared in the model raises an exception or not
            </summary>
            <value>
                <c>true</c> if an unkown property raises in an exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectReaderSettings.IgnoreUnknownTypes">
            <summary>
            Gets or sets a value indicating whether unknown types are ignored and read as the closest known type (XdbEvent for events)
            </summary>
            <value>
              <c>true</c> if unknown types are ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectReaderSettings.Default">
            <summary>
                Gets settings with default values.
            </summary>
            <value>
                The default.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XObjectWriter">
            <summary>
                Serializes <see cref="T:Sitecore.XConnect.XObject" />s to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XObjectWriter" /> class.
            </summary>
            <param name="writer">The target text writer.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the text writer open.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.#ctor(Newtonsoft.Json.JsonWriter,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XObjectWriter" /> class.
            </summary>
            <param name="writer">The target json writer.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the json writer open.</param>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectWriter.Indent">
            <summary>
                Gets or sets a value indicating whether the output from this writer is indented (pretty-printed).
            </summary>
            <value>
                <c>true</c> if the writer indents; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectWriter.Ieee754Compatible">
            <summary>
            Gets or sets a value indicating whether 64 bit integers and decimals will be quoted.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XObjectWriter.WriteNullCollectionsAsEmpty">
            <summary>
            Gets or sets a value null collections should be serialized as empty collections (for OData compliance)
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.Write(Sitecore.XConnect.Schema.XdbType,System.Object)">
            <summary>
                Writes the specified value (primitive, <see cref="T:Sitecore.XConnect.XObject" />, <see cref="T:Sitecore.XConnect.XCollection" />,
                <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" /> or <see cref="T:Sitecore.XConnect.XDictionary" />)
            </summary>
            <param name="expectedType">
                The expected type of the value. This controls how type information is serialized for
                XObjects
            </param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.WritePrimitive(Newtonsoft.Json.JsonWriter,Sitecore.XConnect.Schema.XdbPrimitiveTypeKind,System.Object)">
            <summary>
                Writes the primitive value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="typeKind">Primitive type kind.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.WriteTypeName(Newtonsoft.Json.JsonWriter,Sitecore.XConnect.Schema.XdbObjectType,Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Writes meta data about a concrete <see cref="T:Sitecore.XConnect.XObject" />s type to support polymorphism.
            </summary>
            <param name="writer">The writer.</param>
            <param name="expectedType">The expected type.</param>
            <param name="actual">The actual.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XObjectWriter.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.IXdbModelResolver">
            <summary>
                Provides access to <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s given their names
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.IXdbModelResolver.KnownModels">
            <summary>
                Gets the models currently known by this model resolver.
            </summary>
            <value>
                The known models.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.IXdbModelResolver.GetModel(Sitecore.XConnect.Schema.XdbModelName)">
            <summary>
                Gets the model with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The model if this registry contains the model; null otherwise</returns>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XdbModelRegistry">
            <summary>
                A <see cref="T:Sitecore.XConnect.Serialization.IXdbModelResolver" /> where known models are added explicitly
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelRegistry.#ctor(Sitecore.XConnect.Schema.XdbModel[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelRegistry" /> class.
            </summary>
            <param name="models">The models.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelRegistry.GetModel(Sitecore.XConnect.Schema.XdbModelName)">
            <summary>
                Gets the model with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>
                The model if this registry contains the model; null otherwise
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Serialization.XdbModelRegistry.KnownModels">
            <summary>
                Gets the models currently known by this model resolver.
            </summary>
            <value>
                The known models.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelRegistry.TryAdd(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Adds the specified model to the set of known models.
            </summary>
            <param name="model">The model.</param>
            <returns>true if the model was not already added</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XdbModelReader">
            <summary>
                Deserializes <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Serialization.XdbModelReader.AnnotationTypes">
            Allowed annotations. Only annotation types from these assemblies are
            allowed to avoid security issues with $type
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.#ctor(System.IO.TextReader,Sitecore.XConnect.Serialization.IXdbModelResolver,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelReader" /> class.
            </summary>
            <param name="reader">The text reader to read from.</param>
            <param name="knownModels">Models that can be referenced.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the text writer open.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.#ctor(Newtonsoft.Json.JsonReader,Sitecore.XConnect.Serialization.IXdbModelResolver,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelReader" /> class.
            </summary>
            <param name="reader">The JSON reader to read from.</param>
            <param name="knownModels">Models that can be referenced.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the text writer open.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.#ctor(Newtonsoft.Json.JsonReader,Sitecore.XConnect.Serialization.IXdbModelResolver,System.Boolean,Sitecore.XConnect.Serialization.IXdbModelClrTypeLoader)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelReader" /> class.
            </summary>
            <param name="reader">The JSON reader to read from.</param>
            <param name="knownModels">Models that can be referenced.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the text writer open.</param>
            <param name="typeLoader">An optional type loader that maps CLR types to xDB types from type hints in the model specification</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.Deserialize(System.String,Sitecore.XConnect.Serialization.IXdbModelResolver)">
            <summary>
                Constructs an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> from its JSON representation.
            </summary>
            <param name="json">The JSON.</param>
            <param name="knownModels">The known models.</param>
            <returns>The model</returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.Deserialize(System.String,Sitecore.XConnect.Serialization.IXdbModelResolver,Sitecore.XConnect.Serialization.IXdbModelClrTypeLoader)">
            <summary>
            Constructs an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> from its JSON representation.
            </summary>
            <param name="json">The JSON.</param>
            <param name="knownModels">The known models.</param>
            <param name="typeLoader">An optional type loader that maps CLR types to xDB types from type hints in the model specification</param>
            <returns>
            The model
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.Deserialize(System.String)">
            <summary>
                Constructs an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> from its JSON representation, assuming no other models than the XConnect
                core model is referenced
            </summary>
            <param name="json">The JSON.</param>
            <returns>The model</returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.Read">
            <summary>
                Parses an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> from the current position of underlying <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <returns>The parsed <see cref="T:Sitecore.XConnect.Schema.XdbModel" /></returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelReader.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.XdbModelWriter">
            <summary>
                Serializes <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelWriter" /> class.
            </summary>
            <param name="writer">The target text writer.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the text writer open.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.#ctor(Newtonsoft.Json.JsonWriter,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelWriter" /> class.
            </summary>
            <param name="writer">The target json writer.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the json writer open.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.#ctor(Newtonsoft.Json.JsonWriter,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Serialization.XdbModelWriter" /> class.
            </summary>
            <param name="writer">The target json writer.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the json writer open.</param>
            <param name="writeTypeHints">if set to <c>true</c> hints for loading corresponding CLR types are written.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.Serialize(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Returns the JSON representation of the specified model.
            </summary>
            <param name="model">The model.</param>
            <returns>
                A <see cref="T:System.String" /> that represents the model.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.Serialize(Sitecore.XConnect.Schema.XdbModel,System.Boolean)">
            <summary>
                Returns the JSON representation of the specified model.
            </summary>
            <param name="model">The model.</param>
            <param name="writeTypeHints">if set to <c>true</c> hints for loading corresponding CLR types are written.</param>
            <returns>
                A <see cref="T:System.String" /> that represents the model.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.Write(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.XdbModelWriter.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Serialization.SearchQueryFormatter">
            <summary>
            Serializes and deserialize <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/>s to and from JSON, in a secure way that does not allow other types to be used.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.SearchQueryFormatter.FromJson(System.String)">
            <summary>
            Parses the specified JSON as a <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/>.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.SearchQueryFormatter.ToJson(Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Converts a <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/> to its JSON representation. 
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.SafeTypeBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
        </member>
        <member name="M:Sitecore.XConnect.Serialization.SearchQueryContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.Reflection.DelegateFactory">
            <summary>
                Internal helpers to create compiled getters, settters and initializers.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.Reflection.IValueConverter.ToXValue(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
                Converts the specified CLR value to the equivalent XValue.
            </summary>
            <param name="clrValue">The CLR value.</param>
            <param name="cache">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.Reflection.IValueConverter.ToClrValue(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
                Converts the specified XValue to the corresponding CLR value
            </summary>
            <param name="xvalue">The xvalue.</param>
            <param name="cache">The cache.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.Reflection.IValueConverter.UpdateValue(System.Object,System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
                Updates the specified CLR value to reflect the corresponding CLR Value.
            </summary>
            <param name="clrValue">The CLR value.</param>
            <param name="xvalue">The xvalue.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbRuntimeModel">
            <summary>
            An <see cref="T:Sitecore.XConnect.Schema.XdbModel"/> that serves the purpose to composite other models.
            A runtime model does not define any types or facets.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbModel" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbRuntimeModel.#ctor(Sitecore.XConnect.Schema.XdbModel[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbRuntimeModel"/> class.
            </summary>
            <param name="models">The models.</param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelMerger">
            <summary>
                Used to merge a local and remote set of models.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelMerger.Merge(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbModel},System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbModel})">
            <summary>
                Merges a local and remote set of models, favoring local models if they exists.
                The remote models are cloned.
            </summary>
            <param name="remoteModels"></param>
            <param name="localModels"></param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbTypeCloneBuilder.#ctor(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbNamedType})">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbTypeCloneBuilder" /> class.
            </summary>
            <param name="unchangedTypes">A list of types that will not be cloned.</param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.Conflict`1">
            <summary>
                Base class for conflicts between a local and remote version.
            </summary>
            <typeparam name="TType">The type of the conflicting items.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.Schema.Conflict`1.#ctor(`0,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.Conflict`1" /> class.
            </summary>
            <param name="local">The local version.</param>
            <param name="remote">The remote version.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflict`1.Local">
            <summary>
                Gets the local version.
            </summary>
            <value>
                The local version.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflict`1.Remote">
            <summary>
                Gets the remote version.
            </summary>
            <value>
                The remote version.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelComparer">
            <summary>
                Utility class to find the differences between local and remote versions of <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s and
                <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" />s.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelComparer.Diff(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbModel},System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbModel})">
            <summary>
                Finds the differences between a local and remote set of <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s, and returns the conflicts if any
            </summary>
            <param name="localModels">The local models.</param>
            <param name="remoteModels">The remote models.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelComparer.Diff(Sitecore.XConnect.Schema.XdbModel,Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Finds the differences between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s.                
            </summary>
            <remarks>
            This method only compares names of referenced models, that is, it is assumed that the referenced models are identical.
            For deep equality check use <see cref="M:Sitecore.XConnect.Schema.XdbModelComparer.Diff(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbModel},System.Collections.Generic.IEnumerable{Sitecore.XConnect.Schema.XdbModel})"/>
            </remarks>
            <param name="local">The local model.</param>
            <param name="remote">The remote model.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelComparer.Diff(Sitecore.XConnect.Schema.XdbNamedType,Sitecore.XConnect.Schema.XdbNamedType)">
            <summary>
                Finds the differences between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" />
            </summary>
            <param name="local">The local version.</param>
            <param name="remote">The remote version.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.InvalidOperationException">local and remote must be of the same types</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Unsupported types</exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelComparer.Diff(Sitecore.XConnect.Schema.XdbObjectType,Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Finds the differences between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" />
            </summary>
            <param name="local">The local version.</param>
            <param name="remote">The remote version.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.InvalidOperationException">local and remote must be of the same types</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Unsupported types</exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelComparer.Diff(Sitecore.XConnect.Schema.XdbEnumType,Sitecore.XConnect.Schema.XdbEnumType)">
            <summary>
                Finds the differences between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" />
            </summary>
            <param name="local">The local version.</param>
            <param name="remote">The remote version.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.InvalidOperationException">local and remote must be of the same types</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Unsupported types</exception>
        </member>
        <member name="T:Sitecore.XConnect.Schema.Conflicts`2">
            <summary>
                The conflicts between some aspect of the local and remote versions of an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TDiff">The type for conflicting items.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.Schema.Conflicts`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0},System.Collections.Generic.IReadOnlyCollection{`0},System.Collections.Generic.IReadOnlyDictionary{`0,`1},System.Collections.Generic.IReadOnlyDictionary{`0,`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.Conflicts`2" /> class.
            </summary>
            <param name="unknown">The unkown.</param>
            <param name="missing">The missing.</param>
            <param name="changed">The changed.</param>
            <param name="matching">The matching.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflicts`2.Unknown">
            <summary>
                Gets items only present in the remote version, hence unkown in the local version.
            </summary>
            <value>
                The unkown.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflicts`2.Missing">
            <summary>
                Gets items that are only present in the local version, hence missing in the remote version.
            </summary>
            <value>
                The missing.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflicts`2.Changed">
            <summary>
                Gets items that are different in the remote version.
            </summary>
            <value>
                The changed.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflicts`2.Matching">
            <summary>
                Gets items that are identicial in the local and remote versions.
            </summary>
            <value>
                The matching.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.Conflicts`2.AllMatch">
            <summary>
                Gets a value indicating whether all items match, and no conflicts are contained in this instance.
            </summary>
            <value>
                <c>true</c> if all items match; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbEnumTypeConflict">
            <summary>
                Represents one or more conflicts between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumTypeConflict.Local">
            <summary>
                Gets the local version.
            </summary>
            <value>
                The local version.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumTypeConflict.Remote">
            <summary>
                Gets the remote version.
            </summary>
            <value>
                The remote version.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumTypeConflict.Values">
            <summary>
                Gets the conflicts between the <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" />s of the two versions
            </summary>
            <value>
                The conflicts.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbEnumValueConflict">
            <summary>
                Represents a conflict between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumValueConflict.#ctor(Sitecore.XConnect.Schema.XdbEnumValue,Sitecore.XConnect.Schema.XdbEnumValue)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbEnumValueConflict" /> class.
            </summary>
            <param name="local">The local version.</param>
            <param name="remote">The remote version.</param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbFacetDefinitionConflict">
            <summary>
                Represents a conflict between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbObjectTypeConflict">
            <summary>
                Represents a conflict between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectTypeConflict.Local">
            <summary>
                Gets the local version.
            </summary>
            <value>
                The local version.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectTypeConflict.Remote">
            <summary>
                Gets the remote version.
            </summary>
            <value>
                The remote version.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectTypeConflict.Properties">
            <summary>
                Gets the conflicts between the directly declared properties of the two versions
            </summary>
            <value>
                The conflicts.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbPropertyConflict">
            <summary>
                Represents a conflict between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbProperty" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelConflict">
            <summary>
                Represents one or more conflicts between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelConflict.Types">
            <summary>
                Gets the conflicts between the directly declared types in the two versions
            </summary>
            <value>
                The conflicts.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelConflict.Facets">
            <summary>
                Gets the conflicts between the directly declared facet definitions in the two versions
            </summary>
            <value>
                The conflicts.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelConflict.References">
            <summary>
                Gets the conflicts between the referenced models of the two versions
            </summary>
            <value>
                The conflicts.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelReferenceConflict">
            <summary>
                Represents a conflict between a local and remote version of a referenced <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelConflicts">
            <summary>
                Represents zero or more conflicts between a set of local <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s and a set of remote
                <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbNamedTypeConflict">
            <summary>
                Base class for a conflict between a local and remote version of an <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbTypeEqualityComparer">
            <summary>
                Compares equality between <see cref="T:Sitecore.XConnect.Schema.XdbType" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.DoNotIndexAttribute">
            <summary>
                Types, facets and properties with this annotation attached will not be indexed, hence not searchable.
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbAnnotation" />
        </member>
        <member name="T:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException">
            <summary>
                The exception that is thrown when multiple facets have the same name for the same entity type in an
                <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> and its referenced models
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbModelException" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.#ctor(Sitecore.XConnect.Schema.XdbModel,Sitecore.XConnect.EntityType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException" /> class.
            </summary>
            <param name="sourceModel">The model that gave rise to this exception.</param>
            <param name="entityType">Type of the entity the facet name is dupplicate for.</param>
            <param name="facetName">Name of the dupplicated facet name.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.EntityType">
            <summary>
                Gets the entity type the facet name is duplicated for.
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.FacetName">
            <summary>
                Gets the dupplicated facet name.
            </summary>
            <value>
                The name of the XDB type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbFacetNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Schema.DuplicateXdbModelNameException">
            <summary>
                The exception that is thrown when an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> references multiple models with the same name
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbModelException" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.#ctor(Sitecore.XConnect.Schema.XdbModel,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbModelNameException" /> class.
            </summary>
            <param name="sourceModel">The model that gave rise to this exception.</param>
            <param name="modelName">The dupplicate model name.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbModelNameException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbModelNameException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbModelNameException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbModelNameException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.ModelName">
            <summary>
                Gets the dupplicated name in the referenced models
            </summary>
            <value>
                The name of the dupplicate model.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbModelNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException">
            <summary>
                The exception that is thrown when multiple types have the same name in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> and its
                referenced models
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbModelException" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.#ctor(Sitecore.XConnect.Schema.XdbModel,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException" /> class.
            </summary>
            <param name="sourceModel">The model that gave rise to this exception.</param>
            <param name="xdbTypeName">Name of the dupplicated xDB type name.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.XdbTypeName">
            <summary>
                Gets the dupp6licated <see cref="T:Sitecore.XConnect.Schema.XdbType" /> name.
            </summary>
            <value>
                The name of the XDB type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.DuplicateXdbTypeNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Schema.EntityFacetKey">
            <summary>
                The combination of an <see cref="P:Sitecore.XConnect.Schema.EntityFacetKey.EntityType" /> and a facet key used to ensure uniqueness in
                <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.EntityFacetKey.#ctor(Sitecore.XConnect.EntityType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.EntityFacetKey" /> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="facetKey">The facet key.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.EntityFacetKey.EntityType">
            <summary>
                Gets the type of the entity.
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.EntityFacetKey.FacetKey">
            <summary>
                Gets the facet key.
            </summary>
            <value>
                The facet key.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.EntityFacetKey.Equals(Sitecore.XConnect.Schema.EntityFacetKey)">
            <summary>
                Determines whether the specified <see cref="T:Sitecore.XConnect.Schema.EntityFacetKey" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sitecore.XConnect.Schema.EntityFacetKey" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Sitecore.XConnect.Schema.EntityFacetKey" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.EntityFacetKey.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.EntityFacetKey.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.IXdbAnnotatable">
            <summary>
                <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> types implementing this interface can have annotations that define how they are
                protected, stored or searched.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.IXdbAnnotatable.Annotations">
            <summary>
                The annotations attached to an <see cref="T:Sitecore.XConnect.Schema.IXdbAnnotation" />
            </summary>
            <value>
                The annotations.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.IXdbAnnotatable.AddAnnotation(Sitecore.XConnect.Schema.IXdbAnnotation)">
            <summary>
                Adds an annotation.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.IXdbReference">
            <summary>
                A reference to any object in xDB that can be targeted by an <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.MissingModelReferenceException">
            <summary>
                The exception that is thrown when a type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> has a base type from another model that is
                not referenced.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbModelException" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.MissingModelReferenceException.#ctor(Sitecore.XConnect.Schema.XdbModel,Sitecore.XConnect.Schema.XdbNamedType,Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.MissingModelReferenceException" /> class.
            </summary>
            <param name="sourceModel">The model that gave rise to this exception.</param>
            <param name="xdbType">The type that references a type from another model that is missing.</param>
            <param name="referencedModel">The missing model.</param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.MissingModelReferenceException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.MissingModelReferenceException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.MissingModelReferenceException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.MissingModelReferenceException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.MissingModelReferenceException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.MissingModelReferenceException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.MissingModelReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.MissingModelReferenceException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.MissingModelReferenceException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.MissingModelReferenceException.ReferencedModelName">
            <summary>
                Gets the name of the referenced model missing.
            </summary>
            <value>
                The referenced model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.MissingModelReferenceException.XdbTypeName">
            <summary>
                Gets the name of the type that references a type from another model that is missing.
            </summary>
            <value>
                The type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.MissingModelReferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Schema.PIISensitiveAttribute">
            <summary>
                Types, facets and properties with this annotation attached are treated in accordance with XDB's PII compliance
                features.
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbAnnotation" />
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbEntitySet">
            <summary>
                A reference to an xDB entity set. Use the static properties of this class to reference contacts, interactions and
                device profiles.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEntitySet.EntityType">
            <summary>
                Gets the type of the referenced entity set.
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEntitySet.Contacts">
            <summary>
                Gets the reference to the contacts entity set.
            </summary>
            <value>
                The contacts.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEntitySet.Interactions">
            <summary>
                Gets the references to the interactions entity set.
            </summary>
            <value>
                The interactions.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEntitySet.DeviceProfiles">
            <summary>
                Gets the reference to the device profiles entity set.
            </summary>
            <value>
                The device profiles.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEntitySet.FromEntityType(Sitecore.XConnect.EntityType)">
            <summary>
                Gets the reference to the entity set of the given type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">null</exception>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelName">
            <summary>
                Uniquely identifies a model by name and version.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelName.#ctor(System.String,Sitecore.XConnect.Schema.XdbModelVersion)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelName" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelName.Name">
            <summary>
                Gets the name of the model.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelName.Version">
            <summary>
                Gets the version of the model.
            </summary>
            <value>
                The version.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelName.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelName.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelName.Equals(Sitecore.XConnect.Schema.XdbModelName)">
            <summary>
                Determines whether the specified <see cref="T:Sitecore.XConnect.Schema.XdbModelName" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sitecore.XConnect.Schema.XdbModelName" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Sitecore.XConnect.Schema.XdbModelName" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelName.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance. The format is "Name,Version".
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelName.TryParse(System.String,Sitecore.XConnect.Schema.XdbModelName@)">
            <summary>
                Parses the string representation of a <see cref="T:Sitecore.XConnect.Schema.XdbModelName" /> and returns it if it is valid.
            </summary>
            <returns>
                true if <paramref name="value" /> was parsed successfully; otherwise, false.
            </returns>
            <param name="value">A string containing a <see cref="T:Sitecore.XConnect.Schema.XdbModelName" /> to parse. </param>
            <param name="result">
                When this method returns, contains the parsed model if the string is a valid representation of an
                <see cref="T:Sitecore.XConnect.Schema.XdbModelName" />; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.TypeHelpers">
            <summary>
                Common functionality used to map CLR types to <see cref="T:Sitecore.XConnect.Schema.XdbType" />s
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.GetEntityType``1">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.EntityType" /> enumeration value corresponding to the entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The EntityType</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.GetClrType(Sitecore.XConnect.EntityType)">
            <summary>
            Gets the CLR entity type corresponding to the enumeration value
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">null</exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.IsAllowedDictionaryKey(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Determines whether the primitive type kind can be used for keys in <see cref="T:Sitecore.XConnect.Schema.XdbDictionaryType" />s.
            </summary>
            <param name="keyType">Type of the key.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.IsInteger(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Determines whether the primitive type kind is an integer.
            </summary>
            <param name="kind">The primitive type kind.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.IsReferenceType(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Determines whether the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> is a reference type, and hence can be null.
            </summary>
            <param name="kind">The primitive type kind.</param>
            <returns><c>true</c>, if the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> represents a reference type</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.IsNullable(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Determines whether values of this type can be null
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.TryGetDicitionaryType(System.Type,System.Collections.Generic.KeyValuePair{System.Type,System.Type}@)">
            <summary>
                Returns the key and value types for a type, if the type is a dictionary.
            </summary>
            <param name="type">The type.</param>
            <param name="types">The key and value types.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.GetDefaultFacetKey``1">
            <summary>
            Gets the default name of the facet.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.GetDefaultFacetKey(System.Type)">
            <summary>
            Gets the default name of the facet.
            </summary>
            <param name="facetType">Type of the facet.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.TryGetElementType(System.Type,System.Type@)">
            <summary>
                Returns the element type for a collection type, if the type is a collection
            </summary>
            <param name="type">The type.</param>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.TypeHelpers.FindInterface(System.Type,System.Type)">
            <summary>
                Finds the generic implementation of an interface for a type. If the type is an generic implementation of the
                interface itself, the type is returned.
            </summary>
            <param name="type">The type.</param>
            <param name="genericInterfaceType">Type of the generic inteface.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XConnectCoreModel">
            <summary>
                Provides access to the core model for XConnect. Contains core event type definitions.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XConnectCoreModel.Initialized">
            <summary>
                Gets a value indicating whether the core model has been initialized.
            </summary>
            <value>
                <c>true</c> if initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XConnectCoreModel.Instance">
            <summary>
                Gets the instance of the core XConnect core model.
            </summary>
            <value>
                The XConnect core model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XConnectCoreModel.FacetBaseType">
            <summary>
                Gets the base <see cref="T:Sitecore.XConnect.Schema.XdbType" /> for facets in <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s
            </summary>
            <value>
                The base type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XConnectCoreModel.EventBaseType">
            <summary>
                Gets the base <see cref="T:Sitecore.XConnect.Schema.XdbType" /> for events in <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s
            </summary>
            <value>
                The base event type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XConnectCoreModel.GoalBaseType">
            <summary>
                Gets the base <see cref="T:Sitecore.XConnect.Schema.XdbType" /> for goals in <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s
            </summary>
            <value>
                The base goal type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XConnectCoreModel.OutcomeBaseType">
            <summary>
                Gets the base <see cref="T:Sitecore.XConnect.Schema.XdbType" /> for outcomes in <see cref="T:Sitecore.XConnect.Schema.XdbModel" />s
            </summary>
            <value>
                The base outcome type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.IXdbAnnotation">
            <summary>
                Defines how types, facets and properties are protected, stored and searched.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.IXdbAnnotation.Targets">
            <summary>
                Gets the target where this annotation can be attacahed.
            </summary>
            <value>
                The targets.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbAnnotationTargets">
            <summary>
                Enumerates targets for <see cref="T:Sitecore.XConnect.Schema.IXdbAnnotation" />s.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbAnnotationTargets.Types">
            <summary>
                The annotation can be attached to <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" />s.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbAnnotationTargets.Properties">
            <summary>
                The annotation can be attached to <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" />'s properties.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbAnnotationTargets.FacetDefinitions">
            <summary>
                The annotation can be attached to <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbAnnotationTargets.All">
            <summary>
                The annotation can be attached to all <see cref="T:Sitecore.XConnect.Schema.IXdbAnnotatable" />
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbCollectionType">
            <summary>
                Represents the definition of a collection type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbCollectionType.#ctor(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbCollectionType" /> class.
            </summary>
            <param name="elementType">The element type of the collection</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbCollectionType.ClrType">
            <summary>
                Gets the CLR type matching this definition, if any.
            </summary>
            <value>
                The CLR <see cref="T:System.Type" />.
            </value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbCollectionType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbCollectionTypeBase">
            <summary>
                The base class for type definitions for collections and dictionaries in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbCollectionTypeBase.#ctor(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbCollectionTypeBase" /> class.
            </summary>
            <param name="elementType">The <see cref="T:Sitecore.XConnect.Schema.XdbType" /> for the elements in this collectino.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbCollectionTypeBase.ElementType">
            <summary>
                The element type of the collection
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbCollectionTypeBase.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbCollectionTypeBase.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbComplexType">
            <summary>
                Represents the definition of a complex type used for properties in <see cref="T:Sitecore.XConnect.Schema.XdbEventType" />s and
                <see cref="T:Sitecore.XConnect.Schema.XdbFacetType" /> in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbObjectType" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbComplexType.#ctor(System.String,System.String,System.Boolean,Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbComplexType" /> class.
            </summary>
            <param name="namespace">The namespace of the complex type.</param>
            <param name="name">The name of the complex type.</param>
            <param name="isAbstract">Denotes if the type is abstract.</param>
            <param name="baseType">The base type that the complex inherits from. Can be null.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbComplexType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbDictionaryType">
            <summary>
                Represents the definition of a dictionary type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbCollectionType" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbDictionaryType.#ctor(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind,Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbDictionaryType" /> class.
            </summary>
            <param name="keyType"><see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> of the key.</param>
            <param name="elementType">The element type of the dictionary type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbDictionaryType.KeyType">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> type of the key.
            </summary>
            <value>
                The type of the key.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbDictionaryType.ClrType">
            <summary>
                Gets the CLR type matching this definition, if any.
            </summary>
            <value>
                The CLR <see cref="T:System.Type" />.
            </value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbDictionaryType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbDictionaryType.TryConvertKey(System.Object@)">
            <summary>
                Determines whether the value is compatible with the key type for this type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbDictionaryType.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbDictionaryType.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbEnumType">
            <summary>
                Represents the definition of an enumeration type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbNamedType" />
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbEnumType._values">
            <summary>
                The values defined for this enumeration type.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbEnumType._valuesByNumericValue">
            <summary>
                Lookup for the values defined for this enumeration type by their numeric value.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumType.#ctor(System.String,System.String,Sitecore.XConnect.Schema.XdbPrimitiveTypeKind,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" /> class.
            </summary>
            <param name="namespace">The name space of the enum type.</param>
            <param name="localName">The local name of the enum type.</param>
            <param name="underlyingTypeKind">The integer type that underlies the enumeration values.</param>
            <param name="isFlags"><c>true</c> if multiple values can be combined using bitwise operations</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumType.IsFlags">
            <summary>
                Gets a value indicating whether multiple values of the enumeration type can be combined using bitwise operations
            </summary>
            <value>
                <c>true</c> if so; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumType.UnderlyingTypeKind">
            <summary>
                Gets the integer type that underlies the enumeration values.
            </summary>
            <value>
                The underlying type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumType.Values">
            <summary>
                Gets the values of the enumeration type.
            </summary>
            <value>
                The values.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumType.DefaultValue">
            <summary>
                Gets the default value for instances of this type (the first <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" /> in the set of values).
            </summary>
            <value>
                The default value.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumType.GetValue(System.Int64)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" /> with the given numeric value.
            </summary>
            <param name="value">The numeric value.</param>
            <returns>The enum value</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumType.GetValue(System.String)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" /> with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The enum value</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumType.Add(Sitecore.XConnect.Schema.XdbEnumValue)">
            <summary>
                Adds the specified value to the collection of values defined by this type.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">The value is declared by another enum type</exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumType.TryGetValue(System.Int64,Sitecore.XConnect.Schema.XdbEnumValue@)">
            <summary>
                Gets the value with the given numeric value.
            </summary>
            <param name="numericValue">The numeric value.</param>
            <param name="value">
                When this method returns, contains the the value with the given numeric value, if defined; otherwise, <c>null</c>.
                The parameter is passed uninitialized.
            </param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumType.Clone(Sitecore.XConnect.Schema.XdbTypeCloneBuilder)">
            <summary>
                Creates a deep clone of this type. Implementors must clone their specific properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbEnumValue">
            <summary>
                Represents the definition of a value for an <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEnumValue.#ctor(Sitecore.XConnect.Schema.XdbEnumType,System.String,System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbEnumValue" /> class.
            </summary>
            <param name="xdbType">The <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" /> that defines this value.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumValue.XdbType">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" /> declaring this value.
            </summary>
            <value>
                The type of this value
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumValue.Name">
            <summary>
                Gets the name of the enum value.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEnumValue.Value">
            <summary>
                Gets the value of the enum value.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbEventType">
            <summary>
                Represents the definition of a type used for <see cref="T:Sitecore.XConnect.Event" />s in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbObjectType" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbEventType.#ctor(System.String,System.String,System.Boolean,Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbEventType" /> class.
            </summary>
            <param name="namespace">The namespace of the event type.</param>
            <param name="name">The name of the event type.</param>
            <param name="isAbstract">Denotes if the type is abstract.</param>
            <param name="baseType">The base type that the event inherits from. Can be null.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbEventType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbFacetDefinition">
            <summary>
                Represents the definition of a facet in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbAnnotatable" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbFacetDefinition.#ctor(Sitecore.XConnect.EntityType,System.String,Sitecore.XConnect.Schema.XdbFacetType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" /> class.
            </summary>
            <param name="target">Target entity type.</param>
            <param name="name">Name of the facet.</param>
            <param name="facetType">Type of the facet.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbFacetDefinition.FacetType">
            <summary>
                The object type of the facet
            </summary>
            <value>
                The type of the facet.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbFacetDefinition.Name">
            <summary>
                Gets the name of the facet.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbFacetDefinition.Target">
            <summary>
                Gets the type of the entity containing the facet is defined for
            </summary>
            <value>
                The target.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbFacetDefinition.DefiningModel">
            <summary>
                Gets the model defining this facet.
            </summary>
            <value>
                The defining model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbFacetDefinition.Annotations">
            <summary>
                The annotations attached to the facet
            </summary>
            <value>
                The annotations.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbFacetDefinition.AddAnnotation(Sitecore.XConnect.Schema.IXdbAnnotation)">
            <summary>
                Adds an annotation.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbFacetType">
            <summary>
                Represents the definition of a type used for facets in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbObjectType" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbFacetType.#ctor(System.String,System.String,System.Boolean,Sitecore.XConnect.Schema.XdbObjectType)">
            <param name="namespace">The namespace of the facet type.</param>
            <param name="name">The name of the facet type.</param>
            <param name="isAbstract">Denotes if the type is abstract.</param>
            <param name="baseType">Optionally, the base type the type inherits from.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbFacetType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbNamedType">
            <summary>
                Represents the definition of a type with a namespace and name in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbType" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbNamedType.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" /> class.
            </summary>
            <param name="namespace">The namespace of the type.</param>
            <param name="localName">The local name of the type.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNamedType.DefiningModel">
            <summary>
                Gets the model defining this type.
            </summary>
            <value>
                The defining model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNamedType.ClrType">
            <summary>
                Gets the CLR type matching this definition, if any.
            </summary>
            <value>
                The CLR <see cref="T:System.Type" />.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNamedType.FullName">
            <summary>
                Gets the full name of the type which is composed of the namespace and local name.
            </summary>
            <value>
                The full name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNamedType.LocalName">
            <summary>
                Gets the local name of the type.
            </summary>
            <value>
                The local name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNamedType.Namespace">
            <summary>
                Gets the namespace of the type.
            </summary>
            <value>
                The namespace.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbNullableType">
            <summary>
                Represents the definition of an optional value type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.XdbType" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbNullableType.#ctor(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbNullableType" /> class.
            </summary>
            <param name="underlyingType">The underlying value type.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNullableType.UnderlyingType">
            <summary>
                Gets the underlying value type.
            </summary>
            <value>
                The underlying type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNullableType.ClrType">
            <summary>
                Gets the CLR type matching this definition, if any.
            </summary>
            <value>
                The CLR <see cref="T:System.Type" />.
            </value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbNullableType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbNullableType.Clone(Sitecore.XConnect.Schema.XdbTypeCloneBuilder)">
            <summary>
                Creates a deep clone of this type. Implementors must clone their specific properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbNullableType.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbNullableType.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbObjectType">
            <summary>
                Represents the definition of a type used for objects in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbObjectType._declaredProperties">
            <summary>
                Properties by name
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbObjectType._allProperties">
            <summary>
                Properties by name including base type properties
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbObjectType._declaredPropertySet">
            <summary>
                Supports HasDeclaredProperty methods
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbObjectType._allPropertiesSet">
            <summary>
            Supports HasProperty method including base type properties
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.#ctor(System.String,System.String,System.Boolean,Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" /> class.
            </summary>
            <param name="namespace">The namespace of the facet type.</param>
            <param name="name">The name of the facet type.</param>
            <param name="isAbstract">Denotes if the type is abstract.</param>
            <param name="baseType">Optionally, the base type the type inherits from.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectType.Factory">
            <summary>
                Gets or sets a function used to create new instances of the CLR type that corresponds this type.
            </summary>
            <value>
                The factory.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectType.IsAbstract">
            <summary>
                Gets a value indicating whether this <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" /> is abstract.
            </summary>
            <value>
                <c>true</c> if abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectType.BaseType">
            <summary>
                Gets the base type of the type.
            </summary>
            <value>
                The base type
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectType.DeclaredProperties">
            <summary>
                Gets the properties declared directly for this type, not including properties from base type(s).
            </summary>
            <value>
                The declared properties.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectType.Properties">
            <summary>
                Gets the properties declared for this type, including properties defined for base type(s).
            </summary>
            <value>
                The properties.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbObjectType.Annotations">
            <summary>
                The annotations attached to the object type
            </summary>
            <value>
                The annotations.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.AddAnnotation(Sitecore.XConnect.Schema.IXdbAnnotation)">
            <summary>
                Adds an annotation.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.AddProperty(Sitecore.XConnect.Schema.XdbProperty)">
            <summary>
                Declares a property on the type.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.TryGetDeclaredProperty(System.String,Sitecore.XConnect.Schema.XdbProperty@)">
            <summary>
                Gets the property definition with the given name declared on this type, not including base types
            </summary>
            <param name="name">The name of the property to get.</param>
            <param name="property">
                When this method returns, contains the the property with the given name, if the property is
                found; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns><c>true</c> if the type contains the property with the given name; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.TryGetProperty(System.String,Sitecore.XConnect.Schema.XdbProperty@)">
            <summary>
                Gets the property definition with the given name declared on this type or any of its base types
            </summary>
            <param name="name">The name of the property to get.</param>
            <param name="property">
                When this method returns, contains the the property with the given name, if the property is
                found; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns><c>true</c> if the type contains the property with the given name; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.Is(Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Determines whether this type is equal to or a derived type of the given type
            </summary>
            <param name="xdbType">The type to compare against.</param>
            <returns><c>true</c> if the type is equal to or a derived type of the given type</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.HasDeclaredProperty(Sitecore.XConnect.Schema.XdbProperty)">
            <summary>
                Determines whether this type declares the given property.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c>, if so; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbObjectType.HasProperty(Sitecore.XConnect.Schema.XdbProperty)">
            <summary>
                Determines whether this type or any of its base types declares the given property.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c>, if so; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbPrimitiveType">
            <summary>
                Represents the definition of a primitive type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbPrimitiveType.#ctor(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveType" /> class with the
                <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> specified.
            </summary>
            <param name="primitiveTypeKind">The primitive type kind.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbPrimitiveType.PrimitiveTypeKind">
            <summary>
                Gets the kind of the type.
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbPrimitiveType.DefaultValue">
            <summary>
                Gets the default value for the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> represented by this type.
            </summary>
            <value>
                The default value.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbPrimitiveType.ClrType">
            <summary>
                Gets the CLR type matching this definition, if any.
            </summary>
            <value>
                The CLR <see cref="T:System.Type" />.
            </value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbPrimitiveType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbPrimitiveType.TryConvertValue(System.Object@)">
            <summary>
                Determines whether the value is compatible with this type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbPrimitiveType.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbPrimitiveType.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind">
            <summary>
                Enumerates the supported primitive types that can be used in <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Binary">
            <summary>
                Variable length binary data
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Boolean">
            <summary>
                Boolean (true/false).
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Byte">
            <summary>
                Unsigned 8-byte integer
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.DateTime">
            <summary>
                Date and time
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.DateTimeOffset">
            <summary>
                Date and time relative to UTC
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Duration">
            <summary>
                Duration of time
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Decimal">
            <summary>
                Numeric value with fixed precision and scale, hence suitable for financial values. Ranging from negative 10^255 + 1
                to positive 10^255 - 1
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Double">
            <summary>
                Floating point number with 15 digits precision that can represent values with approximate range of ±2.23e-308
                through ±1.79e+308
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Guid">
            <summary>
                16-byte (128-bit) unique identifier value
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Int16">
            <summary>
                Signed 16-bit integer value
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Int32">
            <summary>
                Signed 32-bit integer value
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Int64">
            <summary>
                Signed 64-bit integer value
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.SByte">
            <summary>
                Signed 8-bit integer value
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.Single">
            <summary>
                floating point number with 7 digits precision that can represent values with approximate range of ±1.18e-38 through
                ±3.40e+38
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind.String">
            <summary>
                Variable-length character data
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbProperty">
            <summary>
                Represents the definition of a property on a <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" /> in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbAnnotatable" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbProperty.#ctor(System.String,Sitecore.XConnect.Schema.XdbType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="xdbType">The type of the property value.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbProperty.ValueProvider">
            <summary>
                Gets or sets the value provider used to access properties on instance of the CLR type that corresponds to the
                <see cref="P:Sitecore.XConnect.Schema.XdbProperty.XdbType" /> containing this property.
            </summary>
            <value>
                The value provider.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbProperty.DeclaringType">
            <summary>
                Gets the declaring type containing this property.
            </summary>
            <value>
                The declaring type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbProperty.Name">
            <summary>
                Gets the name of the property.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbProperty.XdbType">
            <summary>
                Gets the type of the value.
            </summary>
            <value>
                The type.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbProperty.Annotations">
            <summary>
                The annotations attached to the property
            </summary>
            <value>
                The annotations.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbProperty.AddAnnotation(Sitecore.XConnect.Schema.IXdbAnnotation)">
            <summary>
                Adds an annotation.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbProperty.ToString">
            <summary>
                Used for debug purposes.
            </summary>
            <returns>The <see cref="P:Sitecore.XConnect.Schema.XdbProperty.Name" /> of the <see cref="T:Sitecore.XConnect.Schema.XdbProperty" />.</returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModel">
            <summary>
                Represents the semantic definition of data stored in xDB.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.#ctor(System.String,Sitecore.XConnect.Schema.XdbModelVersion,Sitecore.XConnect.Schema.XdbNamedType[],Sitecore.XConnect.Schema.XdbFacetDefinition[],Sitecore.XConnect.Schema.XdbModel[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> class.
            </summary>
            <param name="name">The name of the model.</param>
            <param name="version">The version of the model.</param>
            <param name="types">The types contained in this model.</param>
            <param name="facets">The facets defined in this model.</param>
            <param name="referencedModels">Models containing base types for types used in this model.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.DeclaredFacets">
            <summary>
                Gets the facets defined in this model.
            </summary>
            <value>
                The facets.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.DeclaredTypes">
            <summary>
                Gets the types contained in this model.
            </summary>
            <value>
                The contained types.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.DirectlyReferencedModels">
            <summary>
                Models referenced by this model.
            </summary>
            <value>
                The referenced models.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.Facets">
            <summary>
                Gets the facets defined in this model or one of its references.
            </summary>
            <value>
                The facets.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.Name">
            <summary>
                Gets the name of this model.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.ReferencedModels">
            <summary>
                Models referenced by this model or one its references.
            </summary>
            <value>
                The referenced models.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.Types">
            <summary>
                Gets the types contained in this model or one of its references.
            </summary>
            <value>
                The contained types.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.Version">
            <summary>
                Gets the version of this model.
            </summary>
            <value>
                The version.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModel.FullName">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbModelName" /> that uniquely identifies this model.
            </summary>
            <value>
                The name of the model.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.ValidateBaseTypes">
            <summary>
                Validates that all declared types base types are present in this model or referenced models
            </summary>
            <exception cref="T:Sitecore.XConnect.Schema.MissingModelReferenceException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.AssociateDeclaredTypes(Sitecore.XConnect.Schema.XdbNamedType[])">
            <summary>
                Associates the types as declared types in this model.
            </summary>
            <param name="types">The types.</param>
            <exception cref="T:Sitecore.XConnect.Schema.XdbModelException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.GetInheritedTypes(Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Gets the types in this model or its referenced models that inherits from the given type.
            </summary>
            <param name="objectType">Type base type.</param>
            <returns>Types that inherits from the given type</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.TryGetDeclaredFacetDefinition(Sitecore.XConnect.EntityType,System.String,Sitecore.XConnect.Schema.XdbFacetDefinition@)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" /> with the given name for the entity type declared in this model.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="name">The name of the facet.</param>
            <param name="facetDefinition">
                When this method returns, contains the the facet definition with the given name for the
                entity type, if the facet definition is found; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the model defines a facet with the given name for the entity type; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.TryGetDeclaredType``1(System.String,``0@)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" /> with the given name declared in this model.
            </summary>
            <typeparam name="TNamedType">
                The expected type of the match. If a match is found with another type, the method returns
                <c>false</c>
            </typeparam>
            <param name="fullName">The namespace qualified name of the type.</param>
            <param name="type">
                When this method returns, contains the the type with the given name, if the model contains the
                type; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the model contains a type with the given name; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.TryGetFacetDefinition(Sitecore.XConnect.EntityType,System.String,Sitecore.XConnect.Schema.XdbFacetDefinition@)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" /> with the given name for the entity type.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="facetKey">The name of the facet.</param>
            <param name="facetDefinition">
                When this method returns, contains the the facet definition with the given name for the
                entity type, if the facet definition is found; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the model defines a facet with the given name for the entity type; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.TryGetType``1(System.String,``0@)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" /> with the given name.
            </summary>
            <typeparam name="TNamedType">
                The expected type of the match. If a match is found with another type, the method returns
                <c>false</c>
            </typeparam>
            <param name="fullName">The namespace qualified name of the type.</param>
            <param name="type">
                When this method returns, contains the the type with the given name, if the model contains the
                type; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the model contains a type with the given name; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.DefinesType(Sitecore.XConnect.Schema.XdbNamedType)">
            <summary>
                Determines whether this model or any of its references defines the given type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModel.TryGetType``1(System.Type,``0@)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" /> that corresponds to the given CLR type declared in this model or any of
                its referenced models.
            </summary>
            <typeparam name="TNamedType">
                The expected type of the match. If a match is found with another type, the method returns
                <c>false</c>
            </typeparam>
            <param name="clrType">CLR type to get the corresponding <see cref="T:Sitecore.XConnect.Schema.XdbNamedType" /> for.</param>
            <param name="type">
                When this method returns, contains the the type with that corresponds to the given CLR type, if the model or its
                refereneced models contain the
                type; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the model contains a type that corresponds to the given CLR type; otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelBuilder">
            <summary>
                <see cref="T:Sitecore.XConnect.Schema.XdbModelBuilder" /> is used to define facets and events, and automatically map CLR classes to
                <see cref="T:Sitecore.XConnect.Schema.XdbType" />s in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.#ctor(System.String,Sitecore.XConnect.Schema.XdbModelVersion)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelBuilder" /> class
            </summary>
            <param name="modelName">The name of the target <see cref="T:Sitecore.XConnect.Schema.XdbModel" /></param>
            <param name="modelVersion">The version of the target <see cref="T:Sitecore.XConnect.Schema.XdbModel" /></param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelBuilder.RegisteredTypes">
            <summary>
                Gets the types currently registered in this model builder.
            </summary>
            <value>
                The registered types.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.BuildModel">
            <summary>
                Constructs and returns an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> with the defintions made using this builder
            </summary>
            <returns>The model that was built.</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.DefineEventType``1(System.Boolean)">
            <summary>
                Adds an event type to the model.
            </summary>
            <typeparam name="TEvent">The CLR type representing the event to define in the model</typeparam>
            <param name="includeInheritedTypes">If true; includes all the sub types of TEvent defined in the same assembly</param>
            <returns>The coresponding <see cref="T:Sitecore.XConnect.Schema.XdbEventType" /></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.DefineFacet``2">
            <summary>
                Defines a facet for an entity in the model using the name of the type or, if specified, the name from the type's <see cref="T:Sitecore.XConnect.FacetKeyAttribute"/>.
            </summary>
            <typeparam name="TEntityType">The type of the target entity</typeparam>
            <typeparam name="TFacetType">The CLR type defining the facet to define in the model</typeparam>        
            <returns>The corresponding <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" /></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.DefineFacet``2(System.String)">
            <summary>
                Defines a facet for an entity in the model
            </summary>
            <typeparam name="TEntityType">The type of the target entity</typeparam>
            <typeparam name="TFacetType">The CLR type defining the facet to define in the model</typeparam>
            <param name="name">The name of the facet</param>
            <returns>The corresponding <see cref="T:Sitecore.XConnect.Schema.XdbFacetDefinition" /></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.ReferenceModel(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Adds a referenced model to the target <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.RegisterType``1(System.Boolean)">
            <summary>
                Registers a type or enum used for facet or event properties in the model.
                This can be used to register sub types that are not discovered when facet and event types are added.
            </summary>
            <typeparam name="TType">The CLR type defining the type</typeparam>
            <param name="includeInheritedTypes">If true; sub types of the type defined in the same assembly are also added</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.AddInheritedTypes(System.Type)">
            <summary>
                Adds the inherited types from the same assembly as the given type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.FindType(System.Type)">
            <summary>
                Finds the type among those added in this builder and referenced models
            </summary>
            <param name="t">The type to find</param>
            <returns>The corresponding XdbType if a match is found, null otherwise</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.IsIgnored(System.Type)">
            <summary>
                Determines whether the given type should be excluded from the model.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if so; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.IsAllowed(System.Type)">
            <summary>
                Determines whether the type is allowed in xDB models
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if so; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.GetOrAddType(System.Type)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbType" /> corresponding to the CLR type, or creates it if is not present.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:Sitecore.XConnect.Schema.XdbTypeException">
                Value types are not supported (apart from xDB primitive types)
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.GetTypeName(System.Type)">
            <summary>
                Gets the name for the CLR type following <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> naming conventions
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.TryAddCollectionType(System.Type,Sitecore.XConnect.Schema.XdbType@)">
            <summary>
                Adds the <see cref="T:Sitecore.XConnect.Schema.XdbCollectionType" /> corresponding to the CLR type if it is a collection type
            </summary>
            <param name="type">The type.</param>
            <param name="xdbType">The collection type if the CLR type corresponded to a collection type, null otherwise.</param>
            <returns><c>true</c> if the CLR type corresponded to a <see cref="T:Sitecore.XConnect.Schema.XdbCollectionType" />; <c>false</c> otherwise</returns>
            <exception cref="T:Sitecore.XConnect.Schema.XdbTypeException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.TryAddDictionaryType(System.Type,Sitecore.XConnect.Schema.XdbType@)">
            <summary>
                Adds the <see cref="T:Sitecore.XConnect.Schema.XdbDictionaryType" /> corresponding to the CLR type if it is a dictionary type
            </summary>
            <param name="type">The type.</param>
            <param name="xdbType">The dictionary type if the CLR type corresponded to a dictionary type, null otherwise.</param>
            <returns><c>true</c> if the CLR type corresponded to a <see cref="T:Sitecore.XConnect.Schema.XdbDictionaryType" />; <c>false</c> otherwise</returns>
            <exception cref="T:Sitecore.XConnect.Schema.XdbTypeException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.TryAddEnumType(System.Type,Sitecore.XConnect.Schema.XdbType@)">
            <summary>
                Adds the <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" /> corresponding to the CLR type if it is an enum type
            </summary>
            <param name="type">The type.</param>
            <param name="xdbType">The enum type if the CLR type corresponded to an enum type, null otherwise.</param>
            <returns><c>true</c> if the CLR type corresponded to an <see cref="T:Sitecore.XConnect.Schema.XdbEnumType" />; <c>false</c> otherwise</returns>
            <exception cref="T:Sitecore.XConnect.Schema.XdbTypeException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.TryAddPrimitiveType(System.Type,Sitecore.XConnect.Schema.XdbType@)">
            <summary>
                Adds the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveType" /> corresponding to the CLR type if it maps to an
                <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />.
            </summary>
            <param name="type">The type.</param>
            <param name="xdbType">
                The primitive type if the CLR type mapped to an <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />, null
                otherwise.
            </param>
            <returns><c>true</c> if the CLR type mapped to an <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />; <c>false</c> otherwise</returns>
            <exception cref="T:Sitecore.XConnect.Schema.XdbTypeException"></exception>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName">
            <summary>
                Represents the fully qualified name (namespace + local name) for <see cref="T:Sitecore.XConnect.Schema.XdbType" />s
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName.#ctor(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName" /> class.
            </summary>
            <param name="primitiveKind">The primitive type kind.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName" /> class.
            </summary>
            <param name="namespace">The type's namespace.</param>
            <param name="localName">The type's local name.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName.FullName">
            <summary>
                Gets the full type name.
            </summary>
            <value>
                The full name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName.LocalName">
            <summary>
                Gets the local type name
            </summary>
            <value>
                The local name.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelBuilder.XdbTypeName.Namespace">
            <summary>
                Gets the namespace part of the type name.
            </summary>
            <value>
                The namespace.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelException">
            <summary>
                The exception that is thrown when validation for an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> fails.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.#ctor(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelException" /> class.
            </summary>
            <param name="sourceModel">The model that gave rise to this exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.#ctor(Sitecore.XConnect.Schema.XdbModel,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelException" /> class.
            </summary>
            <param name="sourceModel">The model that gave rise to this exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelException.SourceModelName">
            <summary>
                Gets the model that caused this exception.
            </summary>
            <value>
                The source model.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
                information about the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
            <PermissionSet>
                <IPermission
                    class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
                <IPermission
                    class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelExtensions">
            <summary>
                Utility methods for mapping CLR types to <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.GetClrType(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Gets the CLR type corresponding to the specified <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />.
            </summary>
            <param name="type">The primtive type kind.</param>
            <returns>The crresponding CLR type</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.IsConvertibleTo(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind,Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Determines whether automatic conversion between two primitive is possible
            </summary>
            <param name="kind">The primitive kind.</param>
            <param name="otherKind">The other primitive kind.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.SupportsValue(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind,System.Object)">
            <summary>
                Determines whether the given CLR value is compatible with the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />
            </summary>
            <param name="type">The primtive type kind.</param>
            <param name="value">The value to test.</param>
            <returns>
                <c>true</c> if the value is compatibile with the primtive type kind, <c>false</c> otherwise
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.TryGetXdbPrimitiveTypeKind(System.Type,Sitecore.XConnect.Schema.XdbPrimitiveTypeKind@)">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> corresponding to the CLR type specified.
            </summary>
            <param name="type">The CLR type.</param>
            <param name="typeKind">
                When this method returns, contains the <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> corresponding to the
                specified CLR type if such a mapping exists; otherwise, the value is undefined
            </param>
            <returns><c>true</c> if a <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> corresponds to the specified CLR type</returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.DefaultValue(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)">
            <summary>
                Gets the default value for the given <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />.
            </summary>
            <param name="typeKind">The primitive type kind.</param>
            <returns>The default value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.IsNew(Sitecore.XConnect.IEntityReference)">
            <summary>
                Determines whether the entity reference is a new entity.
            </summary>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.IsValidXdbName(System.String)">
            <summary>
            Validates a string to ensure it does not contain Xdb-prohibited symbols for object and property names.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelExtensions.GetAlias(Sitecore.XConnect.Contact)">
            <summary>
            Returns an Alias Contact Identifier of a given contact.
            Throws if there is more than one Alias Contact Identifiers.
            </summary>
            <param name="contact">A contact.</param>
            <returns>An Alias Contact Identifier</returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelParserException">
            <summary>
                The exception thrown when an <see cref="T:Sitecore.XConnect.Schema.XdbModel" /> cannot be deserialized.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelParserException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelParserException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelParserException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelParserException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelParserException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelParserException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelParserException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbModelVersion">
            <summary>
                Represents the version of an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />. The format is "Major.Minor".
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelVersion.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" /> class.
            </summary>
            <param name="major">The major version</param>
            <param name="minor">The minor version</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelVersion.Major">
            <summary>
                The major version
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbModelVersion.Minor">
            <summary>
                The minor version
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelVersion.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelVersion.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelVersion.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance in the form "Major.Minor".
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelVersion.TryParse(System.String,Sitecore.XConnect.Schema.XdbModelVersion@)">
            <summary>
                Parses the string representation of a <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" /> and returns it if it is valid.
            </summary>
            <returns>
                true if <paramref name="value" /> was parsed successfully; otherwise, false.
            </returns>
            <param name="value">A string containing a <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" /> to parse. </param>
            <param name="result">
                When this method returns, contains the parsed model if the string is a valid representation of an
                <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" />; otherwise, <c>null</c>. The parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbModelVersion.Equals(Sitecore.XConnect.Schema.XdbModelVersion)">
            <summary>
                Determines whether the specified <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Sitecore.XConnect.Schema.XdbModelVersion" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbType">
            <summary>
                Represents the definition of a type in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbType.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbType" /> class.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbType.DefaultValue">
            <summary>
                Gets the default value for instances of this type.
            </summary>
            <value>
                The default value.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbType.ClrType">
            <summary>
                Gets the CLR type matching this definition, if any.
            </summary>
            <value>
                The CLR <see cref="T:System.Type" />.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbType.ValueConverter">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.Reflection.IValueConverter" /> that converts between instances of this type and CLR instances.
            </summary>
            <value>
                The value converter.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbType.TypeKind">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbTypeKind" /> of concrete implementations of <see cref="T:Sitecore.XConnect.Schema.XdbType" />
            </summary>
            <value>
                The kind of the type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbType.TryConvertValue(System.Object@)">
            <summary>
                Determines whether the value is compatible with this type, and if so converts it to the exact matching type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbType.Validate">
            <summary>
                Validates that this type definition is valid before it is added to an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbType.op_Implicit(Sitecore.XConnect.Schema.XdbPrimitiveTypeKind)~Sitecore.XConnect.Schema.XdbType">
            <summary>
                Performs an implicit conversion from <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" /> to <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveType" />.
            </summary>
            <param name="typeKind">The type kind.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbType.CreateValueConverter">
            <summary>
                Creates a <see cref="T:Sitecore.XConnect.Schema.Reflection.IValueConverter" /> for this type. This method is used to lazily construct a value provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbType.Clone(Sitecore.XConnect.Schema.XdbTypeCloneBuilder)">
            <summary>
                Creates a deep clone of this type. Implementors must clone their specific properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbTypeException">
            <summary>
                The exception thrown when an unsupported type or combination of types are about to be added to a model.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbTypeException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbTypeException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbTypeException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbTypeException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbTypeException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbTypeException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.Schema.XdbTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.XdbTypeException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbTypeKind">
            <summary>
                Enumerates the supported types that can be represented in an <see cref="T:Sitecore.XConnect.Schema.XdbModel" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Primitive">
            <summary>
                A primitive value, such as a string or number (<see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />)
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Nullable">
            <summary>
                A reference to a value type that allows null references.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Enum">
            <summary>
                An enumeration type.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Collection">
            <summary>
                A collection of <see cref="T:Sitecore.XConnect.Schema.XdbType" />s
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Dictionary">
            <summary>
                A dictionary of <see cref="T:Sitecore.XConnect.Schema.XdbType" />s indexed by <see cref="T:Sitecore.XConnect.Schema.XdbPrimitiveTypeKind" />
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Complex">
            <summary>
                An object type that can be used for properties in event and facet types.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Event">
            <summary>
                An event type that can be used in interactions' event collections.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.Schema.XdbTypeKind.Facet">
            <summary>
                A facet type that can be used for facets on entities.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.Schema.ClrTypeNavigator">
            <summary>
            A <see cref="T:Sitecore.XConnect.Schema.ModelNavigator"/> for CLR types (entities and properties)
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.ModelNavigator" />
        </member>
        <member name="P:Sitecore.XConnect.Schema.ClrTypeNavigator.ClrType">
            <summary>
            Gets the CLR type that corresponds the current location in the model
            </summary>
            <value>
            The CLR type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Schema.ModelNavigator">
            <summary>
            Enables navigation of the xConnect model with a given model.
            Instances of this class are thread safe.
            </summary>    
        </member>
        <member name="M:Sitecore.XConnect.Schema.ModelNavigator.#ctor(Sitecore.XConnect.Schema.XdbModel,Sitecore.XConnect.EntityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Schema.ModelNavigator"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="P:Sitecore.XConnect.Schema.ModelNavigator.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Schema.ModelNavigator.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Schema.ModelNavigator.Create(Sitecore.XConnect.Schema.XdbModel,Sitecore.XConnect.EntityType)">
            <summary>
            Creates a model navigator for the specified entity type for the given model.
            </summary>
            <param name="model">The model.</param>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.Schema.ModelNavigator.TryNavigate(System.Collections.Generic.IReadOnlyCollection{System.String},Sitecore.XConnect.Schema.ModelNavigator@)">
            <summary>
            Navigates the specified property path on the current type, and returns a new state if the property path is valid.
            </summary>
            <param name="propertyPath">The property path.</param>
            <param name="modelNavigator">The model location.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.Schema.XdbTypeNavigator">
            <summary>
            A <see cref="T:Sitecore.XConnect.Schema.ModelNavigator"/> for <see cref="P:Sitecore.XConnect.Schema.XdbTypeNavigator.XdbType"/>s
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.ModelNavigator" />
        </member>
        <member name="P:Sitecore.XConnect.Schema.XdbTypeNavigator.XdbType">
            <summary>
            Gets the <see cref="P:Sitecore.XConnect.Schema.XdbTypeNavigator.XdbType"/> that corresponds to the current location in the model
            </summary>
            <value>
            The XdbType.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.IIndirectEntityReference">
            <summary>
                An reference to an entity by other means than ID.
            </summary>
            <seealso cref="T:Sitecore.XConnect.IEntityReference" />
        </member>
        <member name="P:Sitecore.XConnect.IIndirectEntityReference.Resolved">
            <summary>
                Gets a value indicating whether the ID for the indirectly referenced <see cref="T:Sitecore.XConnect.IIndirectEntityReference" /> has
                been resolved.
            </summary>
            <value>
                <c>true</c> if resolved; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.IIndirectEntityReference.SetResolvedId(System.Nullable{System.Guid})">
            <summary>
                Sets the entity ID resolved for the referenced entity.
            </summary>
            <param name="id">The ID if found, null otherwise.</param>
        </member>
        <member name="T:Sitecore.XConnect.XdbCollectionUnavailableException">
            <summary>
            The exception that is thrown when the Collection endpoint timeouts or not available.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.XdbCollectionUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbCollectionUnavailableException"/> class.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The Exception instance that caused the current exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbCollectionUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbCollectionUnavailableException"/> class.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbCollectionUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbCollectionUnavailableException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Sitecore.XConnect.XdbContextConfiguration">
            <summary>
                Configuration that can be shared between instances of <see cref="T:Sitecore.XConnect.IXdbContext" />s
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XdbContextConfiguration.CurrentModel">
            <summary>
            Gets the <see cref="T:Sitecore.XConnect.Schema.XdbModel"/> to be used by <see cref="T:Sitecore.XConnect.IXdbContext"/>s using this configuration.
            The configuration implementation may contain logic to update the current model to stay in sync with a remote model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContextConfiguration.IsDataExtractionEnabled">
            <summary>
            Indicates if the data extraction is enabled. True by default.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XdbContextConfiguration.RetryStrategy">
            <summary>
            Gets or sets the strategy used for retrying operations.
            </summary>
            <value>
            The retry strategy.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.Apply(Sitecore.XConnect.IXdbContext)">
            <summary>
            Applies the configuration to specified <see cref="T:Sitecore.XConnect.IXdbContext"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecuted">
            <summary>
                Occurs when all the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch have completed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecutedAsync">
            <summary>
                Occurs when all the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch have completed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecuting">
            <summary>
                Occurs before a batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s is executed. Note that operations may be added to the batch
                while operations are executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecutingAsync">
            <summary>
                Occurs before a batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s is executed. Note that operations may be added to the batch
                while operations are executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecutionFailed">
            <summary>
                Occurs when a unrecoverable exception prevented some or all the operations in a batch from executing
            </summary>
            <remarks>
                This event will not be raised if some or all the operations failed. In this case the BatchExecuted event is raised.
                This event is only raised if an unhandled exception was thrown during batch execution.
            </remarks>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecutionFailedAsync">
            <summary>
                Occurs when a unrecoverable exception prevented some or all the operations in a batch from executing
            </summary>
            <remarks>
                This event will not be raised if some or all the operations failed. In this case the BatchExecuted event is raised.
                This event is only raised if an unhandled exception was thrown during batch execution.
            </remarks>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.OperationAdded">
            <summary>
                Occurs when an operation is added to this batch.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.OperationCompleted">
            <summary>
                Occurs when an operation has executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContextConfiguration.OperationExecuting">
            <summary>
                Occurs the first time an operation is about to execute. Implementors execution strategy may vary, so execution can
                be postponed after this point.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnBatchExecuted(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecuted" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnBatchExecuting(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecuting" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnBatchExecutionFailed(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecutionFailed" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnOperationAdded(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationAdded" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnOperationCompleted(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationCompleted" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnOperationExecuting(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationExecuting" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnBatchExecutingAsync(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecutingAsync" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnBatchExecutedAsync(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecutedAsync" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextConfiguration.OnBatchExecutionFailedAsync(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs)">
            <summary>
                Raises the <see cref="E:Sitecore.XConnect.XdbContextConfiguration.BatchExecutionFailedAsync" /> event.
            </summary>
            <param name="context">The context raising the event.</param>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.RelatedInteractionsExpandOptions">
            <summary>
                Criteria for inclusion of related interactions with contacts in <see cref="T:Sitecore.XConnect.ContactExpandOptions" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.RelatedInteractionsExpandOptions.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.RelatedInteractionsExpandOptions" /> class.
            </summary>
            <param name="facets">The facets.</param>
        </member>
        <member name="M:Sitecore.XConnect.RelatedInteractionsExpandOptions.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.RelatedInteractionsExpandOptions" /> class.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.RelatedInteractionsExpandOptions.StartDateTime">
            <summary>
                Load interactions that started at this date or later.
            </summary>
            <value>
                The start date.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.RelatedInteractionsExpandOptions.EndDateTime">
            <summary>
                Load interactions that happened before this date.
            </summary>
            <value>
                The end date.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.RelatedInteractionsExpandOptions.Limit">
            <summary>
                Limits the number of interactions included per contact.
            </summary>
            <value>
                The limit.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Contact">
            <summary>
                Represents a contact stored in xDB.
                A contact is an individual interacting with a brand and contains the best-known information used to personalize the
                individual's experience. Contacts may merge over time if it turns out they represent the same individual.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Contact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Contact"/> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Contact.#ctor(Sitecore.XConnect.ContactIdentifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Contact"/> class with the identifiers specified.
            </summary>
            <param name="identifiers">The identifiers.</param>
        </member>
        <member name="P:Sitecore.XConnect.Contact.Identifiers">
            <summary>
                A collection of identifiers associated with the contact. A contact can have zero or more identifiers.
            </summary>
            <value>
                The contact's identifiers.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Contact.IsKnown">
            <summary>
                Indicates whether a contact is known or not.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Contact.Interactions">
            <summary>
                Those of the contact's interactions that matched the interaction query specified in the
                <see cref="T:Sitecore.XConnect.ContactExpandOptions" /> when the contact was loaded.
            </summary>
            <value>
                The interactions.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Contact.EntityType">
            <summary>
                Gets the type of the entity implemented
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.ContactExpandOptions">
            <summary>
                Defines what data to include when <see cref="T:Sitecore.XConnect.Contact" />s are loaded from xDB.
                Enables interactions to be loaded with the contacts given some criteria.
            </summary>
            <seealso cref="T:Sitecore.XConnect.ExpandOptions" />
        </member>
        <member name="M:Sitecore.XConnect.ContactExpandOptions.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.ContactExpandOptions" /> class.
            </summary>
            <param name="facets">The facets to expand.</param>
        </member>
        <member name="P:Sitecore.XConnect.ContactExpandOptions.Interactions">
            <summary>
                If set, specifies which interactions to include for contacts
            </summary>
            <value>
                The interactions.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.ContactIdentifier">
            <summary>
                Represents an identifier that can be used lookup a <see cref="T:Sitecore.XConnect.Contact" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifier.#ctor">
            <summary>
                Parameterless constructor used to support OData WebAPI (that does not support constructors with parameters)
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifier.#ctor(System.String,System.String,Sitecore.XConnect.ContactIdentifierType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.ContactIdentifier" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="identifier">The identifier.</param>
            <param name="identifierType">Type of the identifier.</param>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifier.Source">
            <summary>
                Gets or sets the source for this identifier.
            </summary>
            <value>
                The source.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifier.Identifier">
            <summary>
                Gets or sets the string identifying the contact.
            </summary>
            <value>
                The identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifier.IdentifierType">
            <summary>
                Gets or sets whether this identifier identifies a known contact.
            </summary>
            <value>
                The type of the identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.ContactIdentifier.IsValid">
            <summary>
                Shows if a ContactIdentifier is valid.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifier.ValidateIdentifier(System.String)">
            <summary>
            Validates if the ContactIdentifier's Source is valid.
            </summary>
            <param name="identifier">An identifier string to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifier.ValidateSource(System.String)">
            <summary>
            Validates if the ContactIdentifier's Source is valid.
            </summary>
            <param name="source">A source string to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifier.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.ContactIdentifier.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.ContactReference">
            <summary>
                A reference to a <see cref="T:Sitecore.XConnect.Contact" /> by internal ID.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.ContactReference.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.ContactReference" /> class with the specified ID.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Sitecore.XConnect.ContactReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.DeviceProfile">
            <summary>
                Represents a specfic device, browser or similar a <see cref="T:Sitecore.XConnect.Contact" /> uses to interact with a brand.
                The device profile is used to identify the same device over time so that the contact can be inferred.
                Do not store authentication / "Remember me" information in <see cref="T:Sitecore.XConnect.DeviceProfile" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.DeviceProfile.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.DeviceProfile" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.DeviceProfile.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.DeviceProfile" /> class.
            </summary>
            <param name="id">The device profile's ID. The can be set to match a client generated cookie or similar</param>
        </member>
        <member name="P:Sitecore.XConnect.DeviceProfile.LastKnownContact">
            <summary>
                Gets or sets the contact of the last interaction from this device.
            </summary>
            <value>
                The last known contact.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.DeviceProfile.EntityType">
            <summary>
                Gets the type of the entity implemented
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.DeviceProfileReference">
            <summary>
                A reference to a <see cref="T:Sitecore.XConnect.DeviceProfile" /> by internal ID.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.DeviceProfileReference.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.DeviceProfileReference" /> class.
            </summary>
            <param name="id">The internal ID of the <see cref="T:Sitecore.XConnect.DeviceProfile" /> referenced.</param>
        </member>
        <member name="M:Sitecore.XConnect.DeviceProfileReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.Entity">
            <summary>
                Base class for entity types stored in xDB.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Entity.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Entity" /> class.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Entity.ExpandOptions">
            <summary>
            Gets the expand options that was used to load this entity.
            </summary>
            <value>
            The expand options.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.Facets">
            <summary>
                Gets the facets currently loaded for this event as given by <see cref="P:Sitecore.XConnect.Entity.ExpandOptions" /> or from adding them to
                entities during CRUD operations.
            </summary>
            <value>
                The facets.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.EntityType">
            <summary>
                Gets the type of the entity implemented
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.FacetMap">
            <summary>
                Backing dictionary for the Facets property. Facets are set here during deserialization and/or loading from internal
                datastores.
            </summary>
            <value>
                The facet map.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.ConcurrencyToken">
            <summary>
                Gets or sets a value that uniquely identifies the version of the data used for optimistic concurrency.
                This value is assigned by the service layer and is null for new data.
            </summary>
            <value>
                The concurrency token.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.LastModified">
            <summary>
                Gets or sets the point in time where the data was last modified in the service layer.
            </summary>
            <value>
                The last modified date.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.Id">
            <summary>
                Gets the internal ID of the entity.
            </summary>
            <value>
                The identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Entity.Sitecore#XConnect#IEntityReference#EntityType">
            <summary>
                Gets the type of the entity referenced.
            </summary>
            <value>
                The type of the entity referenced.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Entity.GetFacet``1">
            <summary>
                Gets the facet of the specified type using its default name.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>        
            <returns>The facet</returns>
        </member>
        <member name="M:Sitecore.XConnect.Entity.GetFacet``1(System.String)">
            <summary>
                Gets the facet of the specified type with the given name from the set of currently loaded facets on the entity.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="name">The name of the facet.</param>
            <returns>The facet</returns>
        </member>
        <member name="M:Sitecore.XConnect.Entity.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.EntityIdReference`1">
            <summary>
                Represents a to an <see cref="T:Sitecore.XConnect.Entity" /> of the specified type by ID
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:Sitecore.XConnect.IEntityReference`1" />
        </member>
        <member name="M:Sitecore.XConnect.EntityIdReference`1.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.EntityIdReference`1" /> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:Sitecore.XConnect.EntityIdReference`1.Id">
            <summary>
                Gets the internal ID of the entity referenced.
            </summary>
            <value>
                The internal ID.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.EntityIdReference`1.EntityType">
            <summary>
                Gets the type of the entity referenced.
            </summary>
            <value>
                The type of the entity referenced.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.EntityIdReference`1.Equals(Sitecore.XConnect.EntityIdReference{`0})">
            <summary>
            Determines whether the specified <see cref="T:Sitecore.XConnect.EntityIdReference`1" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sitecore.XConnect.EntityIdReference`1" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Sitecore.XConnect.EntityIdReference`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.EntityIdReference`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.EntityIdReference`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.EntityType">
            <summary>
                The types of entities that can be stored in xDB
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.EntityType.Contact">
            <summary>
                See <see cref="F:Sitecore.XConnect.EntityType.Contact" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.EntityType.Interaction">
            <summary>
                See <see cref="F:Sitecore.XConnect.EntityType.Interaction" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.EntityType.DeviceProfile">
            <summary>
                See <see cref="F:Sitecore.XConnect.EntityType.DeviceProfile" />.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.ExpandOptions">
            <summary>
                Defines which data to include when <see cref="T:Sitecore.XConnect.Entity" />s are loaded from xDB.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptions.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.ExpandOptions" /> class.
            </summary>
            <param name="facetKeys">The facets to expand.</param>
        </member>
        <member name="P:Sitecore.XConnect.ExpandOptions.FacetKeys">
            <summary>
                The keys for the facets to load.
            </summary>
            <value>
                The facet keys.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.ExpandOptions.ValidateExpandOptionType(Sitecore.XConnect.EntityType,Sitecore.XConnect.ExpandOptions)">
            <summary>
            Validates that the expand options can be used for the given entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="expandOptions">The expand options.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="T:Sitecore.XConnect.Goal">
            <summary>
                Represents an goal that was triggered during an <see cref="T:Sitecore.XConnect.Interaction" />.
                Goals are <see cref="T:Sitecore.XConnect.Event" /> where conversion rates are sensibly defined.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Event" />
        </member>
        <member name="M:Sitecore.XConnect.Goal.#ctor(System.Guid,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Goal"/> class.
            </summary>
            <param name="definitionId">The definition identifier.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="T:Sitecore.XConnect.IdentifiedContactReference">
            <summary>
                A reference to a <see cref="T:Sitecore.XConnect.Contact" /> by one of its identifiers
            </summary>
            <seealso cref="T:Sitecore.XConnect.Contact" />
        </member>
        <member name="M:Sitecore.XConnect.IdentifiedContactReference.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.IdentifiedContactReference" /> class.
            </summary>
            <param name="source">The source for the referenced contact. This does not have any effect before #128454 in 1644-Mon</param>
            <param name="identifier">The identifier for the referenced contact.</param>
        </member>
        <member name="P:Sitecore.XConnect.IdentifiedContactReference.Source">
            <summary>
            Gets the source for the referenced contact.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IdentifiedContactReference.Identifier">
            <summary>
                Gets the identifier for the referenced contact.
            </summary>
            <value>
                The identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IdentifiedContactReference.Id">
            <summary>
                Gets or sets the internal ID of the contact with the identifier in this reference.
            </summary>
            <value>
                The ID when it has been resolved, null otherwise
            </value>
            <summary>
                Gets the internal ID of the contact, when it has been resolved. Null if the contact does not exist.
            </summary>
            <value>
                The identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IdentifiedContactReference.EntityType">
            <summary>
                Gets the type of the entity referenced.
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IdentifiedContactReference.Resolved">
            <summary>
                Gets a value indicating whether the internal ID of the <see cref="T:Sitecore.XConnect.Contact" /> has been resolved.
            </summary>
            <value>
                <c>true</c> if resolved; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.IdentifiedContactReference.Sitecore#XConnect#IIndirectEntityReference#SetResolvedId(System.Nullable{System.Guid})">
            <summary>
                Sets the entity ID resolved for the referenced entity.
            </summary>
            <param name="id">The ID if found, null otherwise.</param>
        </member>
        <member name="M:Sitecore.XConnect.IdentifiedContactReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.IdentifiedContactReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.IdentifiedContactReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.IEntityReference">
            <summary>
                A reference to an <see cref="T:Sitecore.XConnect.Entity" /> either by an ID or the the entity itself.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.IEntityReference.EntityType">
            <summary>
                Gets the type of the entity referenced.
            </summary>
            <value>
                The type of the entity referenced.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IEntityReference.Id">
            <summary>
                The internal xDB ID of the entity referenced.
            </summary>
            <value>
                The ID.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.IEntityReference`1">
            <summary>
                A reference to an <see cref="T:Sitecore.XConnect.Entity" /> of the specified type either by an ID or the the entity itself.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:Sitecore.XConnect.UntypedFacet">
            <summary>
                Represents an instance of an <see cref="T:Sitecore.XConnect.Schema.XdbFacetType" /> where the CLR type is not available in the system.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Facet" />
        </member>
        <member name="T:Sitecore.XConnect.XdbExtensible">
            <summary>
                Base class for types where CLR types for inheritors can be partially available.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XdbExtensible.ClrTypePresent">
            <summary>
                Gets a value indicating whether the CLR type corresponding to the XdbObjectType is present in the system.
            </summary>
            <value>
                <c>true</c> if so; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbExtensible.XObject">
            <summary>
                Gets the <see cref="P:Sitecore.XConnect.XdbExtensible.XObject" /> instance that accesses the data represented by this instance.
            </summary>
            <value>
                The XObject.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XdbExtensible.Attach(Sitecore.XConnect.Schema.XdbModel)">
            <summary>
                Initializes the XObject given the provided <see cref="T:Sitecore.XConnect.Schema.XdbModel" />'s model
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.IInteractionReference">
            <summary>
                A reference to an interaction in xDB. Since interactions are contained by contacts, a contact must be included when
                referencing interactions.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.IInteractionReference.Contact">
            <summary>
                Gets the contact containing the interaction.
            </summary>
            <value>
                The contact.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Interaction">
            <summary>
                Represents an interaction between a contact and a brand in the form of context, and events that took place..
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Interaction.#ctor(Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.InteractionInitiator,System.Guid,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.Interaction" /> class.
            </summary>
            <param name="contact">The contact involved in the interaction.</param>
            <param name="initiator">The initiator of this interaction.</param>
            <param name="channelId">The channel ID.</param>
            <param name="userAgent">The user agent.</param>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.CampaignId">
            <summary>
                Gets or sets the ID of the first campaign that caused this interaction, if any.
            </summary>
            <value>
                The campaign ID.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.ChannelId">
            <summary>
                Gets or sets the ID of the channel where this interaction happened.
            </summary>
            <value>
                The channel ID.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.DeviceProfile">
            <summary>
                Gets or sets the device profile associated with this interaction, if any.
            </summary>
            <value>
                The device profile itself or a reference to it.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.EngagementValue">
            <summary>
                Gets or sets the total engagement value collected in this interaction
            </summary>
            <value>
                The engagement value.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.StartDateTime">
            <summary>
                Gets or sets the point in time where this interaction started.
            </summary>
            <value>
                The start date time.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.EndDateTime">
            <summary>
                Gets or sets the point in time where this interaction ended. For the web channel this is when the session ended.
                Different logic may apply to different channels.
            </summary>
            <value>
                The point in time the interaction ended.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.Duration">
            <summary>
                Specifies the duration of an interaction.  This is a calculated field based on StartDateTime and EndDateTime.
            </summary>
            <value>
                The interaction's duration.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.Events">
            <summary>
                The <see cref="T:Sitecore.XConnect.Event" />s that occured in this interaction, including goals and outcomes.
            </summary>
            <value>
                A collection of events.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.Initiator">
            <summary>
                Gets or sets the initiator of this interaction.
            </summary>
            <value>
                The initiator.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.UserAgent">
            <summary>
                Gets or sets a string that describes the device, browser or similar used for the interaction.
            </summary>
            <value>
                The user agent.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.VenueId">
            <summary>
                Gets or sets the ID of the venue, if any, where this interaction occured.
            </summary>
            <value>
                The venue ID.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.EntityType">
            <summary>
                Gets the type of the entity implemented
            </summary>
            <value>
                The type of the entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Interaction.Contact">
            <summary>
                Gets or sets the contact, or a reference to the contact, that was part of this interaction.
            </summary>
            <value>
                The contact.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.InteractionInitiator">
            <summary>
                Represents the initiator of an <see cref="T:Sitecore.XConnect.Interaction" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.InteractionInitiator.Contact">
            <summary>
                The contact initiated the interaction
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.InteractionInitiator.Brand">
            <summary>
                The brand, or something acting on behalf of the brand, inititated the interaction
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.InteractionInitiator.Unknown">
            <summary>
                The initiator of the interaction is unknown.
            </summary>
        </member>
        <member name="T:Sitecore.XConnect.InteractionReference">
            <summary>
                A reference to an <see cref="T:Sitecore.XConnect.Interaction" /> by ID and contact. A contact reference is required to address an
                interaction in xDB™.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.InteractionReference.#ctor(System.Guid,System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.InteractionReference" /> class with the specified contact and
                interaction ID.
            </summary>
            <param name="contactId">The internal ID of the contact.</param>
            <param name="interactionId">The internal ID of the interaction.</param>
        </member>
        <member name="M:Sitecore.XConnect.InteractionReference.#ctor(Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.InteractionReference" /> class with the specified contact reference
                and interaction ID.
            </summary>
            <param name="contact">The contact.</param>
            <param name="interactionId">The interaction identifier.</param>
        </member>
        <member name="P:Sitecore.XConnect.InteractionReference.Contact">
            <summary>
                The contact, or reference to a contact, that contains this interaction.
            </summary>
            <value>
                The contact reference.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.InteractionReference.Sitecore#XConnect#ITransientXdbReference#TryGetStationaryReference(Sitecore.XConnect.Schema.IXdbReference@)">
            <summary>
            Gets a stationary reference that will not change over time if possible given the current state of this reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.InteractionReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.InteractionReference.Equals(Sitecore.XConnect.EntityIdReference{Sitecore.XConnect.Interaction})">
            <summary>
            Determines whether the specified <see cref="T:Sitecore.XConnect.EntityIdReference`1" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sitecore.XConnect.EntityIdReference`1" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Sitecore.XConnect.EntityIdReference`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.IConcurrencyVersionInfo">
            <summary>
                Interface implemented by entities where optimistic concurrency is used to resolve race conditions in the service
                layer.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.IConcurrencyVersionInfo.ConcurrencyToken">
            <summary>
                Gets or sets a value that uniquely identifies the version of the data used for optimistic concurrency.
                This value is assigned by the service layer and is null for new data.
            </summary>
            <value>
                The concurrency token.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.IConcurrencyVersionInfo.LastModified">
            <summary>
                Gets or sets the point in time where the data was last modified in the service layer.
            </summary>
            <value>
                The last modified date.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.XdbContext">
            <summary>
                Base class for XConnect client and XdbCollectionManager.
                This is class is not thread safe except the ExecuteAsync method.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.XdbContext._executingBatchCount">
            <summary>
            This is a Boolean value (1=true, 0=false). Used with Interlocked.Exchange that does not support bool
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.#ctor(Sitecore.XConnect.XdbContextConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.IXdbContext" /> class.
            </summary>
            <param name="configuration">Configuration that is shared between multiple instances of <see cref="T:Sitecore.XConnect.IXdbContext"/>s.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.Model">
            <summary>
                Gets the model for this context.
            </summary>
            <value>
                The model.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.Configuration">
            <summary>
            Gets the <see cref="T:Sitecore.XConnect.XdbContextConfiguration"/> used by this instance, if any.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.SyncToken">
            <summary>
            Gets or sets the synchronization token used to wait for search consistency.
            If null is specified, no waiting will happen. Mutating operations update this token as they execute.
            This value can be stored after a batch import job, and other processes that must take these changes into account can set their value to that from the import job.
            </summary>
            <value>
            The synchronization token.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.LastBatchId">
            <summary>
            Gets the unique identifier for the last batch executed.
            </summary>
            <value>
            The last batch identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.LastBatch">
            <summary>
            Gets the last batch of operations exectued in this context, if any.
            </summary>
            <value>
            The last batch.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.OperationInvokers">
            <summary>
                Gets the operation <see cref="T:Sitecore.XConnect.Operations.XdbOperationInvoker" />s registered for this context.
            </summary>
            <value>
                The operation invokers.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.DirectOperations">
            <summary>
            Gets the operations directly added to this context.
            </summary>
            <value>
            The directly added operations.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.Contacts">
            <summary>
            Returns an async queryable for searching contacts using LINQ.
            </summary>
            <value>
            The queryable
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbContext.Interactions">
            <summary>
            Returns an async queryable for searching interactions using LINQ.
            </summary>
            <value>
            The queryable
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.GetAsync``1(System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{``0}},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the entities from their references if they exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <returns>The entities matching the references, if found</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.GetAsync``1(System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{``0}},Sitecore.XConnect.ExpandOptions,System.TimeSpan)">
            <summary>
                Gets the entities corresponding to the given references.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="references">The entity references.</param>
            <param name="expandOptions">The expand options for the loaded entities.</param>
            <param name="timeout">The timeout to use when reading the entity from the storage.</param>
            <returns>A list of <see cref="T:Sitecore.XConnect.Operations.EntityLookupResult`1"/> containing the matching entities, if successfully found, otherwise whether they exist or an exception occurred</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.GetAsync``1(System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{``0}},Sitecore.XConnect.ExpandOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the entities from their references if they exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns>The entities matching the references, if found</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.GetAsync``1(Sitecore.XConnect.IEntityReference{``0},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the referenced entity.
            </summary>
            <remarks>Avoid using this method if you need to get more than entity. Use the overload that takes a list of references instead, since it performs better</remarks>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="reference">The reference to the entity.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <returns>The entity if it exists or null if it does not exist. If any exception occurred while loading the entity, this exception is thrown</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.GetAsync``1(Sitecore.XConnect.IEntityReference{``0},Sitecore.XConnect.ExpandOptions,System.TimeSpan)">
            <summary>
            Gets the referenced entity.
            </summary>
            <remarks>Avoid using this method if you need to get more than entity. Use the overload that takes a list of references instead, since it performs better</remarks>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="reference">The reference to the entity.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <param name="timeout">The HTTP timeout to execute the operation.</param>
            <returns>The entity if it exists or null if it does not exist. If any exception occurred while loading the entity, this exception is thrown</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.GetAsync``1(Sitecore.XConnect.IEntityReference{``0},Sitecore.XConnect.ExpandOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the referenced entity.
            </summary>
            <remarks>Avoid using this method if you need to get more than entity. Use the overload that takes a list of references instead, since it performs better</remarks>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="reference">The reference to the entity.</param>
            <param name="expandOptions">The expand options for the loaded entity.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns>The entity if it exists or null if it does not exist. If any exception occurred while loading the entity, this exception is thrown</returns>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.BatchExecuted">
            <summary>
                Occurs when all the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch have completed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.BatchExecutedAsync">
            <summary>
                Occurs when all the <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch have completed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.BatchExecuting">
            <summary>
                Occurs before a batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s is executed. Note that operations may be added to the batch
                while operations are executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.BatchExecutingAsync">
            <summary>
                Occurs before a batch of <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s is executed. Note that operations may be added to the batch
                while operations are executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.BatchExecutionFailed">
            <summary>
                Occurs when a unrecoverable exception prevented some or all the operations in a batch from executing
            </summary>
            <remarks>
                This event will not be raised if some or all the operations failed. In this case the BatchExecuted event is raised.
                This event is only raised if an unhandled exception was thrown during batch execution.
            </remarks>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.BatchExecutionFailedAsync">
            <summary>
                Occurs when a unrecoverable exception prevented some or all the operations in a batch from executing
            </summary>
            <remarks>
                This event will not be raised if some or all the operations failed. In this case the BatchExecuted event is raised.
                This event is only raised if an unhandled exception was thrown during batch execution.
            </remarks>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.OperationAdded">
            <summary>
                Occurs when an operation is added to this batch.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.OperationCompleted">
            <summary>
                Occurs when an operation has executed.
            </summary>
        </member>
        <member name="E:Sitecore.XConnect.XdbContext.OperationExecuting">
            <summary>
                Occurs the first time an operation is about to execute. Implementors execution strategy may vary, so execution can
                be postponed after this point.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.RegisterOperation(Sitecore.XConnect.Operations.IXdbOperation)">
            <summary>
                Registers the operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.ExecuteAsync(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation})">
            <summary>
                Executes the given operations in a separate batch. This method is thread safe.
                <see cref="P:Sitecore.XConnect.XdbContext.LastBatchId"/> and <see cref="P:Sitecore.XConnect.XdbContext.LastBatch"/> will not be updated by this. Inspect the operations passed to this method to find the reason for exceptions if any.
            </summary>
            <param name="operations">The operations.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.ExecuteAsync(System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation},System.Threading.CancellationToken)">
            <summary>
                Executes the given operations in a separate batch. This method is thread safe.
                <see cref="P:Sitecore.XConnect.XdbContext.LastBatchId"/> and <see cref="P:Sitecore.XConnect.XdbContext.LastBatch"/> will not be updated by this. Inspect the operations passed to this method to find the reason for exceptions if any.
            </summary>
            <param name="operations">The operations.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.SubmitAsync">
            <summary>
            Submits operations added to this <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">This context is already submitting</exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.SubmitAsync(System.Threading.CancellationToken)">
            <summary>
            Submits operations added to this <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">This context is already submitting</exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.AsReadOnly">
            <summary>
            Returns a read-only wrapper for this XdbContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.ValidateConfiguration">
            <summary>
            This method is called just before a batch is executed allowing implementors to validate their state against their configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.TryGetOperationInvoker(Sitecore.XConnect.Operations.IXdbOperation,Sitecore.XConnect.Operations.XdbOperationInvoker@)">
            <summary>
                Tries the get an operation invoker for the given operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="matchingInvoker">The matching invoker.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.ExecuteBatchAsyncInternal(Sitecore.XConnect.Operations.XdbOperationBatch,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Submits the specified batch.
            </summary>
            <param name="batch">The batch.</param>
            <param name="mainBatch">if set to <c>true</c> the batch is submitted from the SubmitAsync method.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Sitecore.XConnect.XdbExecutionException">
            One or more ready operations were not executed by their invoker
            or
            </exception>
            <exception cref="T:Sitecore.XConnect.Operations.CyclicDependencyException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.PauseOnRetry(Sitecore.XConnect.Operations.XdbOperationBatch,System.Threading.CancellationToken)">
            <summary>
            Pause according to the configuration's retry strategy if one or more operations are retried.
            </summary>
            <param name="batch">The batch.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Sitecore.XConnect.XdbExecutionException">One or more operations were not executed after the maximum number of retries was exceeded</exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.BatchExecutionEnded(Sitecore.XConnect.Operations.XdbOperationBatch,System.Exception,System.Boolean)">
            <summary>
            Updates state to the reflect the latest executed batch.
            Raises the batchexecuted event or batchexecutionfailed event if an excecption prevented the batch execution to complete.
            </summary>
            <param name="batch">The batch.</param>
            <param name="ex">Any exception that prevented batch execution to complete. If null, the batch completed.</param>
            <param name="mainBatch">if set to <c>true</c> the batch is submitted from the SubmitAsync batch.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnBatchExecuted(Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecuted" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnBatchExecuting(Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecuting" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnBatchExecutionFailed(Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs)">
            <summary>
                Raises the <see cref="E:BatchExecutionFailed" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnOperationAdded(Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationAdded" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnOperationCompleted(Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationExecuted" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnOperationExecuting(Sitecore.XConnect.Operations.XdbOperationEventArgs)">
            <summary>
                Raises the <see cref="E:OperationExecuting" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.TryCreateResolveOperationForIndirectReference(Sitecore.XConnect.Schema.IXdbReference,Sitecore.XConnect.Operations.IXdbOperation@)">
            <summary>
                Allows the context to create an operation to resolve the target for indirect references (for example,
                <see cref="T:Sitecore.XConnect.IdentifiedContactReference" />) when needed during execution.
            </summary>
            <param name="reference">The reference.</param>
            <param name="resolveOperation">The resolve operation, if the context knew how to construct one.</param>
            <returns><c>true</c>, if the context could create a resolve operation; <c>false</c> otherwise</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unsupported entity type</exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnBatchExecutedAsync(Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
            Raises the <see cref="E:BatchExecutedAsync" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnBatchExecutingAsync(Sitecore.XConnect.Operations.XdbOperationBatchEventArgs)">
            <summary>
            Raises the <see cref="E:BatchExecutingAsync" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContext.OnBatchExecutionFailedAsync(Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs)">
            <summary>
            Raises the <see cref="E:BatchExecutionFailedAsync" /> event.
            </summary>
            <param name="e">The <see cref="T:Sitecore.XConnect.Operations.XdbOperationBatchFailedEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Sitecore.XConnect.XdbContextOperationExtensions">
            <summary>
                Convenience methods for registering common operations in an <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.AddContact(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Contact)">
            <summary>
                Registers that the specified contact will be added when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <param name="context">The context.</param>
            <param name="contact">The contact to add.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.AddContactIdentifier(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.ContactIdentifier)">
            <summary>
            Regisers an operation in the specified <see cref="T:Sitecore.XConnect.IXdbContext"/> that adds the specified identifier to the contact
            </summary>
            <param name="context">The context.</param>
            <param name="contact">The contact.</param>
            <param name="identifier">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ClearFacet``1(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference,``0)">
            <summary>
                Registers that the specified facet will be cleared on the entity, using the facet's default name, when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            /// <param name="context">The context.</param>
            <param name="entity">The entity.</param>
            <param name="data">The data.</param>
            <returns>A ClearFacetOperation instance that corresponds to the operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ClearFacet``1(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference,System.String,``0)">
            <summary>
                Registers that the specified facet will be clear on the entity when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="context">The context.</param>
            <param name="entity">The entity.</param>
            <param name="facetKey">The facet key.</param>
            <param name="data">The data.</param>
            <returns>A ClearFacetOperation instance that corresponds to the operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ClearFacet``1(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.FacetReference,``0)">
            <summary>
                Registers that the specified facet will be cleared on the entity when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="context">The context.</param>
            <param name="facetReference">The facet reference.</param>
            <param name="data">The data.</param>
            <returns>A ClearFacetOperation instance that corresponds to the operation</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.RemoveContactIdentifier(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.ContactIdentifierReference)">
            <summary>
            Regisers an operation in the specified <see cref="T:Sitecore.XConnect.IXdbContext"/> that removes the specified identifier from the contact
            </summary>
            <param name="context">The context.</param>
            <param name="identifier">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.RemoveContactIdentifier(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},System.String,System.String)">
            <summary>
            Regisers an operation in the specified <see cref="T:Sitecore.XConnect.IXdbContext"/> that removes the specified identifier from the contact
            </summary>
            <param name="context">The context.</param>
            <param name="contact">The contact.</param>
            <param name="source">The source.</param>
            <param name="identifier">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.RemoveContactIdentifier(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.ContactIdentifier)">
            <summary>
            Regisers an operation in the specified <see cref="T:Sitecore.XConnect.IXdbContext" /> that removes the specified identifier from the contact
            </summary>
            <param name="context">The context.</param>
            <param name="contact">The contact.</param>
            <param name="identifier">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.AddInteraction(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.Interaction)">
            <summary>
                Registers that the specified interaction will be added when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <param name="context">The context.</param>
            <param name="interaction">The interaction.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.AddDeviceProfile(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.DeviceProfile)">
            <summary>
                Registers that the specified device profile will be added when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <param name="context">The context.</param>
            <param name="deviceProfile">The device profile.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.UpdateDeviceProfile(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.DeviceProfile)">
            <summary>
                Registers that the specified device profile will be update when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <param name="context">The context.</param>
            <param name="deviceProfile">The device profile.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.SetFacet``1(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference,``0)">
            <summary>
                Registers that the specified facet will be set on the entity, using the facet's default name, when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            /// <param name="context">The context.</param>
            <param name="entity">The entity.</param>
            <param name="data">The data.</param>
            <returns>A SetFacetOperation instance that corresponds to the operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.SetFacet``1(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference,System.String,``0)">
            <summary>
                Registers that the specified facet will be set on the entity when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="context">The context.</param>
            <param name="entity">The entity.</param>
            <param name="facetKey">The facet key.</param>
            <param name="data">The data.</param>
            <returns>A SetFacetOperation instance that corresponds to the operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.SetFacet``1(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.FacetReference,``0)">
            <summary>
                Registers that the specified facet will be set on the entity when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
                <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <typeparam name="TFacet">The type of the facet.</typeparam>
            <param name="context">The context.</param>
            <param name="facetReference">The facet reference.</param>
            <param name="data">The data.</param>
            <returns>A SetFacetOperation instance that corresponds to the operation</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ReferenceFacet(Sitecore.XConnect.IEntityReference,System.String)">
            <summary>
                Constructs a reference to the entity's facet with the given name
            </summary>
            <param name="entityReference">The reference to the entity containing the facet.</param>
            <param name="key">The facet key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetContactAsync(Sitecore.XConnect.IReadOnlyXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets a single contact.
            </summary>
            <remarks>Avoid using this method if you need to get more than contact. Use the overload that takes a list of references instead, since it performs better</remarks>
            <param name="context">The context.</param>
            <param name="reference">The contact reference.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetContactsAsync(Sitecore.XConnect.IReadOnlyXdbContext,System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact}},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the contacts for the specified references.
            </summary>
            <param name="context">The context.</param>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetContactAsync(Sitecore.XConnect.IReadOnlyXdbContext,System.Guid,Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets a single contact.
            </summary>
            <remarks>Avoid using this method if you need to get more than contact. Use the overload that takes a list of references instead, since it performs better</remarks>
            <param name="context">The context.</param>
            <param name="id">The contact reference.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetContactsAsync(Sitecore.XConnect.IReadOnlyXdbContext,System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the contacts for with specified IDs.
            </summary>
            <param name="context">The context.</param>
            <param name="ids">The IDs.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetInteractionAsync(Sitecore.XConnect.IReadOnlyXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Interaction},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets a single interaction.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The interaction reference.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetInteractionsAsync(Sitecore.XConnect.IReadOnlyXdbContext,System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Interaction}},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the interactions for the specified references.
            </summary>
            <remarks>Avoid using this method if you need to get more than interaction. Use the overload that takes a list of references instead, since it performs better</remarks>
            <param name="context">The context.</param>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetDeviceProfileAsync(Sitecore.XConnect.IReadOnlyXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.DeviceProfile},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets a single device profile.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The device profile reference.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetDeviceProfilesAsync(Sitecore.XConnect.IReadOnlyXdbContext,System.Collections.Generic.IReadOnlyCollection{Sitecore.XConnect.IEntityReference{Sitecore.XConnect.DeviceProfile}},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Gets the device profiles for the specified references.
            </summary>
            <remarks>Avoid using this method if you need to get more than device profile. Use the overload that takes a list of references instead, since it performs better</remarks>
            <param name="context">The context.</param>
            <param name="references">The references.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ExecuteRightToBeForgotten(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact})">
            <summary>
            Executes the contact's right to be forgotten.
            </summary>
            <param name="context">The context.</param>
            <param name="contact">The contact.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ExecuteClearFacet(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.FacetReference,Sitecore.XConnect.Facet)">
            <summary>
            Executes the contact's right to be forgotten.
            </summary>
            <param name="context">The context.</param>
            <param name="facetReference">The facet reference.</param>
            <param name="facet">The facet.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.MergeContacts(Sitecore.XConnect.IXdbContext,Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact},Sitecore.XConnect.IEntityReference{Sitecore.XConnect.Contact})">
            <summary>
            Registers that the specified contacts will be merged when the <see cref="T:Sitecore.XConnect.IXdbContext" />'s
            <see cref="M:Sitecore.XConnect.IXdbContext.SubmitAsync" /> method is called.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The source contact to merge from.</param>
            <param name="target">The target contact to merge into.</param>
            <returns>A <see cref="T:Sitecore.XConnect.Operations.MergeContactsOperation" /> instance that corresponds to the operation</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.SubmitAsync(Sitecore.XConnect.IXdbContext,System.TimeSpan)">
            <summary>
            Submits the operations added to this <see cref="T:Sitecore.XConnect.IXdbContext" />.
            </summary>
            <param name="context"></param>
            <param name="timeout">The timeout before the operation is cancelled</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.ExecuteAsync(Sitecore.XConnect.IXdbContext,System.Collections.Generic.IEnumerable{Sitecore.XConnect.Operations.IXdbOperation},System.TimeSpan)">
            <summary>
                Executes the given operations in an isolated batch.
                This method is thread safe.
            </summary>
            <param name="context">The context</param>
            <param name="operations">The operations.</param>
            <param name="timeout">The timeout before the operation is cancelled</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetOperation(Sitecore.XConnect.Operations.XdbOperationException,Sitecore.XConnect.IXdbContext)">
            <summary>
            Gets the operation that caused the exception from the <see cref="T:Sitecore.XConnect.IXdbContext"/> that executed it.
            If the operation is not associated with a batch, or the context has executed other batches since the operation was executed this will be null.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context that executed the operation that caused this exception.</param>
            <returns>The operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetOperation``1(Sitecore.XConnect.Operations.XdbOperationException,Sitecore.XConnect.IXdbContext)">
            <summary>
            Gets the operation that caused the exception from the <see cref="T:Sitecore.XConnect.IXdbContext"/> that executed it.
            If the operation is not associated with a batch, or the context has executed other batches since the operation was executed this will be null.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context that executed the operation that caused this exception.</param>
            <returns>The operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetOperations(Sitecore.XConnect.XdbExecutionException,Sitecore.XConnect.IXdbContext)">
            <summary>
            Gets the operations that failed in the batch executed in a <see cref="T:Sitecore.XConnect.IXdbContext"/>.
            If the operation is not associated with a batch, or the context has executed other batches since the operation was executed this will be null.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context that executed the operation that caused this exception.</param>
            <returns>The operations</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetOperation(Sitecore.XConnect.Operations.EntityOperationException,Sitecore.XConnect.IXdbContext)">
            <summary>
            Gets the operation that caused the exception from the <see cref="T:Sitecore.XConnect.IXdbContext"/> that executed it.
            If the operation is not associated with a batch, or the context has executed other batches since the operation was executed this will be null.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context that executed the operation that caused this exception.</param>
            <returns>The operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetOperation(Sitecore.XConnect.Operations.FacetOperationException,Sitecore.XConnect.IXdbContext)">
            <summary>
            Gets the operation that caused the exception from the <see cref="T:Sitecore.XConnect.IXdbContext"/> that executed it.
            If the operation is not associated with a batch, or the context has executed other batches since the operation was executed this will be null.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context that executed the operation that caused this exception.</param>
            <returns>The operation</returns>
        </member>
        <member name="M:Sitecore.XConnect.XdbContextOperationExtensions.GetOperation(Sitecore.XConnect.Operations.EntityValidationException,Sitecore.XConnect.IXdbContext)">
            <summary>
            Gets the operation that caused the exception from the <see cref="T:Sitecore.XConnect.IXdbContext"/> that executed it.
            If the operation is not associated with a batch, or the context has executed other batches since the operation was executed this will be null.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context that executed the operation that caused this exception.</param>
            <returns>The operation</returns>
        </member>
        <member name="T:Sitecore.XConnect.XdbExecutionException">
            <summary>
                The exception that is thrown when an exception prevented one or more <see cref="T:Sitecore.XConnect.Operations.IXdbOperation" />s in a batch to
                execute.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExecutionException" /> class.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExecutionException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExecutionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.#ctor(System.Collections.Generic.IList{Sitecore.XConnect.Operations.IXdbOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExecutionException" /> class.
            </summary>
            <param name="operations">The operations executed.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.#ctor(System.String,System.Collections.Generic.IList{Sitecore.XConnect.Operations.IXdbOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExecutionException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="operations">The operations executed.</param>
            <exception cref="T:System.ArgumentException">All operations must have a batch index</exception>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExecutionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Sitecore.XConnect.XdbExecutionException.FailedOperationIndexes">
            <summary>
            Gets the indices for the failed operations in <see cref="P:Sitecore.XConnect.IXdbContext.LastBatch"/>
            </summary>
            <value>
            The failed operation indexes.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XdbExecutionException.BatchId">
            <summary>
            Gets the unique identifier for the batch that contains the failing operation
            </summary>
            <value>
            The batch identifier.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XdbExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:Sitecore.XConnect.Outcome">
            <summary>
                Represents an outcome that was triggered during an interaction.
                Outcomes are significant types of events.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Event" />
        </member>
        <member name="M:Sitecore.XConnect.Outcome.#ctor(System.Guid,System.DateTime,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Outcome"/> class.
            </summary>
            <param name="definitionId">The definition ID for the type of this event.</param>
            <param name="timestamp">The point in time where the event occured.</param>
            <param name="currencyCode">The currency code.</param>
            <param name="monetaryValue">The monetary value.</param>
        </member>
        <member name="P:Sitecore.XConnect.Outcome.CurrencyCode">
            <summary>
                ISO 4217 code for the currency of <see cref="P:Sitecore.XConnect.Outcome.MonetaryValue" />
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.Outcome.MonetaryValue">
            <summary>
                Gets or sets the monetary value of this outcome stated in this outcome's CurrencyCode
            </summary>
            <value>
                The monetary value.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Event">
            <summary>
                Represents an event that happended during an <see cref="T:Sitecore.XConnect.Interaction" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.Event.#ctor(System.Guid,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.Event"/> class.
            </summary>
            <param name="definitionId">The definition ID for the type of this event.</param>
            <param name="timestamp">The point in time where the event occured.</param>
            <exception cref="T:System.ArgumentException">
            Empty guid not allowed
            or
            DateTime.Min is not allowed as timestamp
            </exception>
        </member>
        <member name="P:Sitecore.XConnect.Event.CustomValues">
            <summary>
                A dictionary of string for event custom data for legacy support.
            </summary>
            <value>
                The custom values.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.Data">
            <summary>
                Gets or sets the data for this event for legacy support.
            </summary>
            <value>
                The data.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.DataKey">
            <summary>
                Gets or sets the data key for this event for legacy support.
            </summary>
            <value>
                The data key.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.DefinitionId">
            <summary>
                Gets or sets the definition ID for the type of this event.
            </summary>
            <value>
                The definition identifier.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.ItemId">
            <summary>
            Gets or sets a Sitecore item ID related to the event if any. Otherwise use <see cref="F:System.Guid.Empty"/>.
            </summary>
            <value>
            The Sitecore item ID.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.EngagementValue">
            <summary>
                Gets or sets the engagement value generated from this event, at the point in time it occurred.
            </summary>
            <value>
                The engagement value.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.Id">
            <summary>
                Gets or sets the ID of this event.
            </summary>
            <value>
                The ID.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.ParentEventId">
            <summary>
                Gets or sets the ID of another event in the interaction that defines the context for this event. For example, a
                click on a link may happen in the context of a page view event.
            </summary>
            <value>
                The ID of the event.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.Text">
            <summary>
                Gets or sets the text for this event for legacy support.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.Timestamp">
            <summary>
                Gets or sets the point in time where the event occured.
            </summary>
            <value>
                The timestamp.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Event.Duration">
            <summary>
            Gets or sets the duration of this event.
            How duration is measured is specific to the nature of the event.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Event.CreateFromXdbType(Sitecore.XConnect.Schema.XdbEventType)">
            <summary>
                Creates a new instance of the specified <see cref="T:Sitecore.XConnect.Schema.XdbEventType" /> from the closest matching CLR type available in
                the system.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Sitecore.XConnect.XdbExtensibleAttribute">
            <summary>
                Provides the CLR type to use for an <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" /> when the actual CLR type is not present in the
                system
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Sitecore.XConnect.XdbExtensibleAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbExtensibleAttribute" /> class.
            </summary>
            <param name="surrogateType">Type of the surrogate.</param>
        </member>
        <member name="P:Sitecore.XConnect.XdbExtensibleAttribute.SurrogateType">
            <summary>
                Gets the CLR type to use for an <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" /> when the actual CLR type is not present in the system.
            </summary>
            <value>
                The surrogate type.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.Facet">
            <summary>
                Base class for classes used to represent facet data.
            </summary>
            <seealso cref="T:Sitecore.XConnect.IConcurrencyVersionInfo" />
        </member>
        <member name="P:Sitecore.XConnect.Facet.ConcurrencyToken">
            <summary>
                Gets or sets a value that uniquely identifies the version of the data used for optimistic concurrency.
                This value is assigned by the service layer and is null for new data.
            </summary>
            <value>
                The concurrency token.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.Facet.LastModified">
            <summary>
                Gets or sets the point in time where the data was last modified in the service layer.
            </summary>
            <value>
                The last modified date.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.Facet.CreateFromXdbType(Sitecore.XConnect.Schema.XdbFacetType)">
            <summary>
                Creates a new instance of the specified <see cref="T:Sitecore.XConnect.Schema.XdbFacetType" /> from the closest matching CLR type available in
                the system.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Sitecore.XConnect.XdbSearchUnavailableException">
            <summary>
            The exception that is thrown when Search endpoint timeouts or not available.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.XdbSearchUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbSearchUnavailableException"/> class.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The Exception instance that caused the current exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbSearchUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbSearchUnavailableException"/> class.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbSearchUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbSearchUnavailableException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Sitecore.XConnect.XdbUnavailableException">
            <summary>
            The exception that is thrown when one of Xdb services is not available.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Sitecore.XConnect.XdbUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbUnavailableException"/> class.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The Exception instance that caused the current exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbUnavailableException"/> class.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Sitecore.XConnect.XdbUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.XdbUnavailableException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Sitecore.XConnect.XObject">
            <summary>
                Represents an instance of an <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" />.
            </summary>
        </member>
        <member name="F:Sitecore.XConnect.XObject._clrObject">
            <summary>
                An instance of the corresponding CLR type wrapped by this XObject, if any.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XObject.#ctor(Sitecore.XConnect.Schema.XdbObjectType,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XObject" /> class.
            </summary>
            <param name="type">The type of this instance.</param>
            <param name="clrObject">
                An optional instance of a the CLR type that corresponds to the <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" />
                that contains some or all of the data for this instance.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObject.#ctor(Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XObject" /> class.
            </summary>
            <param name="type">The type of this instance.</param>
        </member>
        <member name="P:Sitecore.XConnect.XObject.XdbType">
            <summary>
                Gets the type of this instance
            </summary>
            <value>
                The type of this instance.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.XObject.ClrObject">
            <summary>
                An instance of the CLR type that corresponds to the <see cref="T:Sitecore.XConnect.Schema.XdbObjectType" /> for this instance.
            </summary>
            <value>The object</value>
        </member>
        <member name="P:Sitecore.XConnect.XObject.Item(System.String)">
            <summary>
                Gets or sets the value for the property with the specified name.
            </summary>
            <value>
                The value.
            </value>
            <param name="propertyName">Name of the property.</param>
            <returns>The value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                No such property
            </exception>
        </member>
        <member name="P:Sitecore.XConnect.XObject.Item(Sitecore.XConnect.Schema.XdbProperty)">
            <summary>
                Gets or sets the value for the specified property
            </summary>
            <value>
                The value.
            </value>
            <param name="property">The property.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Sitecore.XConnect.XObject.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection of properties for this instance.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.FacetReference">
            <summary>
                A reference to an <see cref="P:Sitecore.XConnect.FacetReference.Entity" />'s facet in xDB.
            </summary>
            <seealso cref="T:Sitecore.XConnect.Schema.IXdbReference" />
        </member>
        <member name="M:Sitecore.XConnect.FacetReference.#ctor(Sitecore.XConnect.IEntityReference,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.FacetReference" /> class.
            </summary>
            <param name="entity">The entity containing the facet.</param>
            <param name="facetKey">Key of the facet.</param>
        </member>
        <member name="P:Sitecore.XConnect.FacetReference.Entity">
            <summary>
                Gets the entity or reference to the entity containing the facet.
            </summary>
            <value>
                The entity.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.FacetReference.FacetKey">
            <summary>
                Gets the name of the facet.
            </summary>
            <value>
                The name of the facet.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.FacetReference.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.FacetReference.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.FacetReference.Equals(Sitecore.XConnect.FacetReference)">
            <summary>
                Determines whether the specified <see cref="T:Sitecore.XConnect.FacetReference" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Sitecore.XConnect.FacetReference" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Sitecore.XConnect.FacetReference" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.FacetReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Sitecore.XConnect.XCollection">
            <summary>
                Represents an instance of an <see cref="T:Sitecore.XConnect.Schema.XdbCollectionType" />
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.#ctor(Sitecore.XConnect.Schema.XdbCollectionType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XCollection" /> class.
            </summary>
            <param name="xdbType">Type of the XDB.</param>
        </member>
        <member name="P:Sitecore.XConnect.XCollection.XdbType">
            <summary>
                Gets the <see cref="T:Sitecore.XConnect.Schema.XdbCollectionType" /> represented by this instance
            </summary>
            <value>
                The collection type..
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.Add(System.Object)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                This operation will fail, if the type does not match the element type of this collection.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.Contains(System.Object)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
                <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.Remove(System.Object)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
                <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Sitecore.XConnect.XCollection.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XCollection.IsReadOnly">
            <summary>
                Gets a value indicating that this collection is not read only.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.IndexOf(System.Object)">
            <summary>
                Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
                The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.Insert(System.Int32,System.Object)">
            <summary>
                Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                The type of the item must be compatable with the element type for this collection.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Sitecore.XConnect.XCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Sitecore.XConnect.XCollection.Item(System.Int32)">
            <summary>
                Gets or sets the value at the specified index.
                The type of the value must be compatable with the element type for this collection.
            </summary>
            <value>
                The value.
            </value>
            <param name="index">The index.</param>
            <returns>The value</returns>
        </member>
        <member name="T:Sitecore.XConnect.XDictionary">
            <summary>
                Represents an instance of an <see cref="T:Sitecore.XConnect.Schema.XdbDictionaryType" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.#ctor(Sitecore.XConnect.Schema.XdbDictionaryType)">
            <summary>
                Initializes a new instance of the <see cref="T:Sitecore.XConnect.XDictionary" /> class.
            </summary>
            <param name="xdbType">Type of the xDB dictionary type represented by this instance.</param>
        </member>
        <member name="P:Sitecore.XConnect.XDictionary.XdbType">
            <summary>
                Gets the xDB dictionary type represented by this instance
            </summary>
            <value>
                The dictinoary type.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Sitecore.XConnect.XDictionary.Keys">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the
                <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XDictionary.Values">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the
                <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
                <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
                <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Sitecore.XConnect.XDictionary.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.XDictionary.IsReadOnly">
            <summary>
                Gets a value indicating that this dictionary is not read only.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.ContainsKey(System.Object)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the
                specified key.
                The type of the key must be compatible with the key type for this dictionary.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>
                true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise,
                false.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.Add(System.Object,System.Object)">
            <summary>
                Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
                The type of the key and value must be compatable with the this collection.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.Remove(System.Object)">
            <summary>
                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
                true if the element is successfully removed; otherwise, false.  This method also returns false if
                <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:Sitecore.XConnect.XDictionary.TryGetValue(System.Object,System.Object@)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the key is found;
                otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed
                uninitialized.
            </param>
            <returns>
                true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element
                with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="P:Sitecore.XConnect.XDictionary.Item(System.Object)">
            <summary>
                Gets or sets the value with the specified key.
            </summary>
            <value>
                The value.
            </value>
            <param name="key">The key.</param>
            <returns>The value</returns>
        </member>
        <member name="T:Sitecore.XConnect.XObjectHelpers">
            <summary>
                Convenience methods to work with <see cref="T:Sitecore.XConnect.XObject" /> et al.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.As``1(Sitecore.XConnect.XObject)">
            <summary>
                Returns the CLR instance backing the object if any, and it is convertible to the type specified.
            </summary>
            <typeparam name="TValue">The type of the instance.</typeparam>
            <param name="object">The object.</param>
            <returns>The CLR instance, if possible</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Value``1(Sitecore.XConnect.XObject,System.String)">
            <summary>
                Gets the value of the specified property converted to the specified type.
                This operation will fail, if the value is of the wrong type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="object">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The value</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Value``1(Sitecore.XConnect.XObject,Sitecore.XConnect.Schema.XdbProperty)">
            <summary>
                Gets the value of the specified property converted to the specified type.
                This operation will fail, if the value is of the wrong type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="object">The object.</param>
            <param name="property">The property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Values``1(Sitecore.XConnect.XObject,System.String)">
            <summary>
                Gets the values of the specified collection property converted to the specified type.
                Return an empty enumerable if the value is null or not a collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="object">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Values``1(Sitecore.XConnect.XObject,Sitecore.XConnect.Schema.XdbProperty)">
            <summary>
                Gets the values of the specified collection property converted to the specified type.
                Return an empty enumerable if the value is null or not a collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="object">The object.</param>
            <param name="property">The property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Value``1(Sitecore.XConnect.XCollection,System.Int32)">
            <summary>
                Gets the value at the specified index converted to the type specified.
                Fails if the value is incompatible.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collection">The collection.</param>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Values``1(Sitecore.XConnect.XCollection)">
            <summary>
                Gets the values in the collection converted to the type specified.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collection">The collection.</param>
            <returns>The values</returns>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Value``1(Sitecore.XConnect.XDictionary,System.String)">
            <summary>
                Gets the value for the specified key converted to the specified type.
                Fails if the value is incompatible with the type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.TryGetValue``1(Sitecore.XConnect.XDictionary,System.Object,``0@)">
            <summary>
                Gets the value for the specified key converted to the specified type.
            </summary>
            <typeparam name="TValue">The expected type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value was found, and the type was compatible; <c>false</c> otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.Values``2(Sitecore.XConnect.XDictionary)">
            <summary>
                Gets the key value pairs contained in the dictionary, converted to the specified types.
                Fails if the dictionary's types are incompatible with the requested types.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns>The values</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.OfType``1(System.Collections.Generic.IEnumerable{``0},Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Filters the elements in an ienumerable based on the xDB type specified
            </summary>
            <param name="objects">The enumerable to filter.</param>
            <param name="type">The type to filter by.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Sitecore.XConnect.XObjectHelpers.OfType(System.Collections.Generic.IEnumerable{Sitecore.XConnect.XObject},Sitecore.XConnect.Schema.XdbObjectType)">
            <summary>
                Filters the elements in an ienumerable based on the xDB type specified
            </summary>
            <param name="objects">The enumerable to filter.</param>
            <param name="type">The type to filter by.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="T:Sitecore.XConnect.DeferedAsyncEnumerator`1">
            <summary>
            An async factory provides the factory for a wrapped IAsyncEnumerator. This factory is used the first time MoveNext is called.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IAsyncEnumerator`1" />
        </member>
        <member name="T:Sitecore.XConnect.FacetKeyAttribute">
            <summary>
            Specifies the deafult facet key for a facet type when applied to a class. The default is the class name.
            When applied to a facet access extension methods, it controls the facet name the method resolves to in search queries. The default is the method name.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Sitecore.XConnect.FacetKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.FacetKeyAttribute"/> class.
            </summary>
            <param name="facetKey">the facet key the facet access extension method resolves to in search queries.</param>
        </member>
        <member name="P:Sitecore.XConnect.FacetKeyAttribute.FacetKey">
            <summary>
            Gets the facet key the facet access extension method resolves to in search queries.
            </summary>
            <value>
            The name facet name.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.SearchExtensions">
            <summary>
            xConnect specific extensions to search queries
            </summary>
        </member>
        <member name="P:Sitecore.XConnect.SearchExtensions.DefaultBatchSize">
            <summary>
            Gets or sets the default batch size when enumerating search results.
            </summary>
            <value>
            The default size of the batch.
            </value>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.WithExpandOptions``1(System.Linq.IAsyncQueryable{``0},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Sets the expand options to be used for entities matching the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.WithExpandOptions``1(System.Linq.IQueryable{``0},Sitecore.XConnect.ExpandOptions)">
            <summary>
            Sets the expand options to be used for entities matching the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="expandOptions">The expand options.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.ToSearchResults``1(System.Linq.IAsyncQueryable{``0})">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.ToSearchResults``1(System.Linq.IAsyncQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0})">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>        
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0},System.Int32)">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="defaultBatchSize">Default batch size for the enumerator.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="defaultBatchSize">Default batch size for the enumerator.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0},System.Byte[])">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="bookmark">The bookmark from a previous batch enumerator.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0},System.Byte[],System.Int32)">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="bookmark">The bookmark from a previous batch enumerator.</param>
            /// <param name="defaultBatchSize">Default batch size for the enumerator.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0},System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>        
            <param name="bookmark">The bookmark from a previous batch enumerator.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Unsupported query provider</exception>
        </member>
        <member name="M:Sitecore.XConnect.SearchExtensions.GetBatchEnumerator``1(System.Linq.IAsyncQueryable{``0},System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes the search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="source">The source.</param>
            <param name="defaultBatchSize">Default batch size for the enumerator.</param>
            <param name="bookmark">The bookmark from a previous batch enumerator.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Unsupported query provider</exception>
        </member>
        <member name="T:Sitecore.XConnect.SearchResults">
            <summary>
            Represents the results from a <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/>.
            </summary>
        </member>
        <member name="M:Sitecore.XConnect.SearchResults.#ctor(System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{System.Byte},System.Collections.Generic.IAsyncEnumerable{Sitecore.XConnect.SearchHit},Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.SearchResults" /> class.
            </summary>
            <param name="count">The total count.</param>
            <param name="cursor">The cursor.</param>
            <param name="results">The results.</param>
            <param name="query">The query.</param>
        </member>
        <member name="P:Sitecore.XConnect.SearchResults.Cursor">
            <summary>
            Gets the cursor bytes to use when requesting the next page.
            </summary>
            <value>
            The cursor.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.SearchResults.Count">
            <summary>
            Gets the total number of hits that matched the query, regardless of limits applied to result count with Take and Skip.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.SearchResults.Results">
            <summary>
            Gets the results.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="P:Sitecore.XConnect.SearchResults.Query">
            <summary>
            Gets the query that gave the results.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.SearchResults`1">
            <summary>
            Represents the results from a <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery"/> where the results are of the same type.
            </summary>
            <typeparam name="THit">The type of items searched.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.SearchResults`1.#ctor(System.Nullable{System.Int64},System.Collections.Generic.IReadOnlyCollection{System.Byte},System.Collections.Generic.IAsyncEnumerable{Sitecore.XConnect.SearchHit{`0}},Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.SearchResults`1" /> class.
            </summary>
            <param name="count">The count.</param>
            <param name="cursor">The cursor.</param>
            <param name="results">The results.</param>
            <param name="query">The query.</param>
        </member>
        <member name="P:Sitecore.XConnect.SearchResults`1.Results">
            <summary>
            Gets the results.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="T:Sitecore.XConnect.SearchHit`1">
            <summary>
            Represents a result in <see cref="P:Sitecore.XConnect.SearchResults.Results"/>.
            </summary>
            <typeparam name="THit">The type of the item that matched the search.</typeparam>
        </member>
        <member name="M:Sitecore.XConnect.SearchHit`1.#ctor(`0,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.XConnect.SearchHit`1"/> class.
            </summary>
            <param name="item">The hit.</param>
            <param name="score">The score.</param>
        </member>
        <member name="P:Sitecore.XConnect.SearchHit`1.Item">
            <summary>
            Gets the item that matched the serach.
            </summary>
            <value>
            The item.
            </value>
        </member>
    </members>
</doc>
