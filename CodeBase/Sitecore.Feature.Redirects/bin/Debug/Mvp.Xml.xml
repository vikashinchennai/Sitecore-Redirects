<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mvp.Xml</name>
    </assembly>
    <members>
        <member name="T:Mvp.Xml.Exslt.GDNStrings">
            <summary>
              This class implements additional functions in the http://gotdotnet.com/exslt/strings namespace.
            </summary>		
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNStrings.uppercase(System.String)">
            <summary>
            Implements the following function 
            	string uppercase(string)
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks>THIS FUNCTION IS NOT IN EXSLT!!!</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNStrings.lowercase(System.String)">
            <summary>
            Implements the following function 
            	string lowercase(string)
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks>THIS FUNCTION IS NOT IN EXSLT!!!</remarks>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.XslReader">
            <summary>
            <para>XslReader provides an efficient way to read results of an XSL 
            transformation via an <see cref="T:System.Xml.XmlReader"/> API. Due to 
            architectural and performance reasons the <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/>
            class doesn't support transforming to an <see cref="T:System.Xml.XmlReader"/> as obsolete 
            <see cref="T:System.Xml.Xsl.XslTransform"/> class did and XslReader's goal is to 
            supplement such functionality.</para>
            <para>XslReader has been developed and contributed to the Mvp.Xml project
            by Sergey Dubinets (Microsoft XML Team).</para>
            </summary>    
            <remarks>
            <para>XslReader can work in a singlethreaded (fully buffering) or a
            multithreaded mode.</para> 
            <para>In a multithreaded mode XslReader runs an XSL transformation 
            in a separate dedicated thread. XSLT output is being recorded into a buffer 
            and once the buffer is full, transformation thread gets suspended. In a main
            thread XslReader reads recorded XSLT output from a buffer as a client calls 
            XslReader methods. Whenever the buffer is read, the transformation thread
            is resumed to produce next portion of an XSLT output.<br/>
            In effect that means that an XSL transformation happens on demand portion by 
            portion as a client calls XslReader methods. In terms of memory footprint
            that means that at any time at most buffer size of XSLT output is buffered.</para>
            <para>In a singlethreaded mode XslReader runs an XSL transformation
            to the end and records full XSLT output into a buffer (using effective 
            binary representation though). After that it reads the buffer when a client 
            calls XslReader methods. So in this mode before first call to the
            XslReader.Read() method returns, XSL transformation is over and XSLT output 
            is buffered internally as a whole.    
            </para>
            <para>By default XslReader works in a multithreaded mode. You can choose the mode
            and the buffer size using <c>multiThread</c> and <c>initialBufferSize</c> arguments
            when instantiating XslReader object. On small XSLT outputs XslReader performs
            better in a singlethreaded mode, but on medium and big outputs multithreaded 
            mode is preferrable. You are adviced to measure performance in both modes to
            find out which suites better for your particular scenario.</para>
            <para>XslReader designed to be reused. Just provide another inoput XML or XSLT
            stylesheet, start transformation and read the output. If the <c>StartTransform()</c> 
            method is called when previous
            transformation isn't over yet, it will be aborted, the buffer cleaned and 
            the XslReader object will be reset to an initial state automatically.</para>
            <para>XslReader is not thread safe, keep separate instances of the XslReader
            for each thread.</para>
            </remarks>
            <example>
            <para>Here is an example of using XslReader class. First you need to create
            an <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/> object and load XSLT stylesheet you want to
            execute. Then prepare XML input as <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> object providing
            XML source in a form of URI, <see cref="T:System.IO.Stream"/>, <see cref="T:System.IO.TextReader"/>, 
            <see cref="T:System.Xml.XmlReader"/> or <see cref="T:System.Xml.XPath.IXPathNavigable"/> along with an optional 
            <see cref="T:System.Xml.XmlResolver"/> object, which will be used to resolve URIs for 
            the XSLT document() function calls.<br/>
            After that create XslReader instance optionally choosing multithreaded or
            singlethreaded mode and initial buffer size.<br/>
            Finally start transformation by calling <c>StartTransform()</c> method and then
            you can read transformation output via XslReader object, which implements 
            <see cref="T:System.Xml.XmlReader"/> API.
            </para> 
            <para>
            Basic XslReader usage sample:
            <code>
            //Prepare XslCompiledTransform
            XslCompiledTransform xslt = new XslCompiledTransform();
            xslt.Load("catalog.xslt");
            //Prepare input XML
            XmlInput input = new XmlInput("books.xml");
            //Create XslReader
            XslReader xslReader = new XslReader(xslt);
            //Initiate transformation
            xslReader.StartTransform(input, null);
            //Now read XSLT output from the reader
            XPathDocument results = new XPathDocument(xslReader);
            </code>
            A more advanced sample:
            <code>
            //Prepare XslCompiledTransform
            XslCompiledTransform xslt = new XslCompiledTransform();
            xslt.Load("../../catalog.xslt");
            //Prepare XmlResolver to be used by the document() function
            XmlResolver resolver = new XmlUrlResolver();
            resolver.Credentials = new NetworkCredential("user42", "god");
            //Prepare input XML
            XmlInput input = new XmlInput("../../books.xml", resolver);
            //Create XslReader, multithreaded mode, initial buffer for 32 nodes
            XslReader xslReader = new XslReader(xslt, true, 32);
            //XSLT parameters
            XsltArgumentList prms = new XsltArgumentList();
            prms.AddParam("param2", "", "red");
            //Initiate transformation
            xslReader.StartTransform(input, prms);
            //Now read XSLT output from the reader
            XPathDocument results = new XPathDocument(xslReader);
            </code>
            </para>
            </example>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.#ctor(System.Xml.Xsl.XslCompiledTransform,System.Boolean,System.Int32)">
            <summary>
            Creates new XslReader instance with given <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/>, 
            mode (multithreaded/singlethreaded) and initial buffer size. The buffer will be
            expanded if necessary to be able to store any element start tag with all its 
            attributes.
            </summary>
            <param name="xslTransform">Loaded <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/> object</param>
            <param name="multiThread">Defines in which mode (multithreaded or singlethreaded)
            this instance of XslReader will operate</param>
            <param name="initialBufferSize">Initial buffer size (number of nodes, not bytes)</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.#ctor(System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Creates new XslReader instance with given <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/>,
            operating in a multithreaded mode and having default initial buffer size.
            </summary>
            <param name="xslTransform">Loaded <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/> object</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.StartTransform(Mvp.Xml.Common.Xsl.XmlInput,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Starts XSL transformation of given <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> object with
            specified <see cref="T:System.Xml.Xsl.XsltArgumentList"/>. After this method returns
            you can read the transformation output out of XslReader object via 
            standard <see cref="T:System.Xml.XmlReader"/> methods such as Read() or MoveXXX().
            </summary>
            <remarks>If the <c>StartTransform()</c> method is called when previous
            transformation isn't over yet, it will be aborted, buffer cleaned and 
            XslReader object reset to an initial state automatically.</remarks>
            <param name="input">An input XML to be transformed</param>
            <param name="args">A collection of global parameter values and
            extension objects.</param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.Read">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Read"/>.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.Close">
            <summary>See <see cref="M:System.Xml.XmlReader.Close"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.GetAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.GetAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.GetAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.LookupNamespace(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.MoveToAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.Close"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.MoveToAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.MoveToAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.MoveToElement">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToElement"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.MoveToFirstAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.MoveToNextAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.ReadAttributeValue">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XslReader.ResolveEntity">
            <summary>See <see cref="M:System.Xml.XmlReader.ResolveEntity"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform">
            <summary>
            Loaded <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/> object, which is used
            to run XSL transformations. You can reuse XslReader for running
            another transformation by replacing <see cref="P:Mvp.Xml.Common.Xsl.XslReader.XslCompiledTransform"/> 
            object.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.InitialBufferSize">
            <summary>
            Initial buffer size. The buffer will be
            expanded if necessary to be able to store any element start tag with 
            all its attributes.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.AttributeCount">
            <summary>See <see cref="P:System.Xml.XmlReader.AttributeCount"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.BaseURI">
            <summary>See <see cref="P:System.Xml.XmlReader.BaseURI"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.NameTable">
            <summary>See <see cref="P:System.Xml.XmlReader.NameTable"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.Depth">
            <summary>See <see cref="P:System.Xml.XmlReader.Depth"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.EOF">
            <summary>See <see cref="P:System.Xml.XmlReader.EOF"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.HasValue">
            <summary>See <see cref="P:System.Xml.XmlReader.HasValue"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.NodeType">
            <summary>See <see cref="P:System.Xml.XmlReader.NodeType"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.IsEmptyElement">
            <summary>See <see cref="P:System.Xml.XmlReader.IsEmptyElement"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.LocalName">
            <summary>See <see cref="P:System.Xml.XmlReader.LocalName"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.NamespaceURI">
            <summary>See <see cref="P:System.Xml.XmlReader.NamespaceURI"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.Prefix">
            <summary>See <see cref="P:System.Xml.XmlReader.Prefix"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.Value">
            <summary>See <see cref="P:System.Xml.XmlReader.Value"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.ReadState">
            <summary>See <see cref="P:System.Xml.XmlReader.ReadState"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.XmlLang">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlLang"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XslReader.XmlSpace">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlSpace"/>.</summary>
        </member>
        <member name="T:Mvp.Xml.Common.QName">
            <summary>
            XML Qualified Name (<a href="http://www.w3.org/TR/REC-xml-names/#dt-qualname">http://www.w3.org/TR/REC-xml-names/#dt-qualname</a>).
            Holds local name, prefix and namespace URI.
            </summary>
            <remarks><para>Is immutable.</para>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>    
        </member>
        <member name="M:Mvp.Xml.Common.QName.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates new <see cref="T:Mvp.Xml.Common.QName"/> instance using specified local name, namespace URI and prefix.
            </summary>
            <param name="local">Local name</param>
            <param name="nsUri">Namespace URI</param>
            <param name="prefix">Prefix</param>
        </member>
        <member name="M:Mvp.Xml.Common.QName.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/> to create XML QName serialization in prefix:localname form.
            </summary>
            <returns>XML QName serialization in prefix:localname form.</returns>
        </member>
        <member name="P:Mvp.Xml.Common.QName.Local">
            <summary>
            Gets local name.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.QName.NsUri">
            <summary>
            Gets namespace URI.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.QName.Prefix">
            <summary>
            Gets prefix.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XInclude.TextIncludingReader">
            <summary>
            Custom <c>XmlReader</c>, handler for parse="text" case.	
            </summary>
            <author>Oleg Tkachenko, http://www.xmllab.net</author>
            <remarks>
            Allows to read specified resource as a text node.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.XInclude.TextIncludingReader.GetEncodingFromXMLDecl(System.String)">
            <summary>
            Reads encoding from the XML declarartion.
            </summary>
            <param name="href">URI reference indicating the location 
            of the resource to inlclude.</param>		
            <returns>The document encoding as per XML declaration.</returns>
            <exception cref="T:Mvp.Xml.XInclude.ResourceException">Resource error.</exception>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.IXmlTransform">
            <summary>
            New experimental generic XML transform interface. Defines an API for
            transforming <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> into <see cref="T:Mvp.Xml.Common.Xsl.XmlOutput"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.IXmlTransform.Transform(Mvp.Xml.Common.Xsl.XmlInput,System.Xml.Xsl.XsltArgumentList,Mvp.Xml.Common.Xsl.XmlOutput)">
            <summary>
            Transforms given <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> into <see cref="T:Mvp.Xml.Common.Xsl.XmlOutput"/>.
            </summary>
            <param name="defaulDocument">Default input XML document</param>
            <param name="args">Parameters</param>
            <param name="output">Represents the transformation's output</param>
            <returns>Transformation output</returns>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.IXmlTransform.OutputSettings">
            <summary>
            Defines default output settings.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.XmlInput">
            <summary>
            XmlInput class represents generic XML input to a trasnformation. The actual
            XML to be transformed can be provided as string URI, <see cref="T:System.IO.Stream"/>,
            <see cref="T:System.IO.TextReader"/>, <see cref="T:System.Xml.XmlReader"/> or <see cref="T:System.Xml.XPath.IXPathNavigable"/>.
            Optional <see cref="T:System.Xml.XmlResolver"/> is used to resolve external references when
            loading input XML document and URIs in a "document()" function calls during
            transformation.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.Xml.XmlReader,System.Xml.XmlResolver)">
            <summary>
            Creates new XmlInput object for an XML document provided as an 
            <see cref="T:System.Xml.XmlReader"/>. Also registers an <see cref="T:System.Xml.XmlResolver"/> to be used
            for resolving external references in the XML document and document() function.
            </summary>
            <param name="reader">Input XML document</param>
            <param name="resolver"><see cref="T:System.Xml.XmlResolver"/> to resolve external references</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.IO.TextReader,System.Xml.XmlResolver)">
            <summary>
            Creates new XmlInput object for an XML document provided as a 
            <see cref="T:System.IO.TextReader"/>. Also registers an <see cref="T:System.Xml.XmlResolver"/> to be used
            for resolving external references in the XML document and document() function.
            </summary>
            <param name="reader">Input XML document</param>
            <param name="resolver"><see cref="T:System.Xml.XmlResolver"/> to resolve external references</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.IO.Stream,System.Xml.XmlResolver)">
            <summary>
            Creates new XmlInput object for an XML document provided as a 
            <see cref="T:System.IO.Stream"/>. Also registers an <see cref="T:System.Xml.XmlResolver"/> to be used
            for resolving external references in the XML document and document() function.
            </summary>
            <param name="stream">Input XML document</param>
            <param name="resolver"><see cref="T:System.Xml.XmlResolver"/> to resolve external references</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.String,System.Xml.XmlResolver)">
            <summary>
            Creates new XmlInput object for an XML document provided as an URI. 
            Also registers an <see cref="T:System.Xml.XmlResolver"/> to be used
            for resolving external references in the XML document and document() function.
            </summary>
            <param name="uri">Input XML document</param>
            <param name="resolver"><see cref="T:System.Xml.XmlResolver"/> to resolve external references</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
            <summary>
            Creates new XmlInput object for an XML document provided as an 
            <see cref="T:System.Xml.XPath.IXPathNavigable"/>. Also registers an <see cref="T:System.Xml.XmlResolver"/> to be used
            for resolving document() function.
            </summary>
            <param name="nav">Input XML document</param>
            <param name="resolver"><see cref="T:System.Xml.XmlResolver"/> to resolve external references</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates new XmlInput object for an XML document provided as an 
            <see cref="T:System.Xml.XmlReader"/>. 
            </summary>
            <param name="reader">Input XML document</param>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.IO.TextReader)">
            <summary>
            Creates new XmlInput object for an XML document provided as a 
            <see cref="T:System.IO.TextReader"/>. 
            </summary>
            <param name="reader">Input XML document</param>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.IO.Stream)">
            <summary>
            Creates new XmlInput object for an XML document provided as a 
            <see cref="T:System.IO.Stream"/>. 
            </summary>
            <param name="stream">Input XML document</param>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.String)">
            <summary>
            Creates new XmlInput object for an XML document provided as an URI.        
            </summary>
            <param name="uri">Input XML document</param>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlInput.#ctor(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Creates new XmlInput object for an XML document provided as an 
            <see cref="T:System.Xml.XPath.IXPathNavigable"/>. 
            </summary>
            <param name="nav">Input XML document</param>        
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.OutputResolver">
            <summary>
            Resolves URIs from the current working directory.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.OutputResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.Xsl.OutputResolver"/> class, 
            with the given <paramref name="baseUri"/> appended to the current directory.
            </summary>
            <param name="baseUri">The Uri to append to the current directory.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.OutputResolver.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the Uri using the <c>baseUri</c> determined in the constructor.
            </summary>
            <param name="baseUri">Not used.</param>
            <param name="relativeUri">The relative Uri to resolve</param>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.XmlOutput">
            <summary>
            XmlOutput class represents generic XML transformation output. An output XML
            can be written to an URI, <see cref="T:System.IO.Stream"/>, <see cref="T:System.IO.TextWriter"/> or
            <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlOutput.#ctor(System.Xml.XmlWriter)">
            <summary>
            Creates new XmlOutput object over an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlWriter"/> to write output to</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlOutput.#ctor(System.IO.TextWriter)">
            <summary>
            Creates new XmlOutput object over a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> to write output to</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlOutput.#ctor(System.IO.Stream)">
            <summary>
            Creates new XmlOutput object over a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to write output to</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.XmlOutput.#ctor(System.String)">
            <summary>
            Creates new XmlOutput object over an URI.
            </summary>
            <param name="uri">An URI to write output to</param>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.XmlOutput.XmlResolver">
            <summary>
            Resolver to use to acquire external resources.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.DefaultXmlResolver">
            <summary>
            XmlUrlResolver wrapper allowing us to recognize the case when no
            XmlResolver was passed.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.XPathCache">
            <summary>
            Implements a cache of XPath queries, for faster execution.
            </summary>
            <remarks>
            Discussed at http://weblogs.asp.net/cazzu/archive/2004/04/02/106667.aspx
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.GetCompiledExpression(System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            Retrieves a cached compiled expression, or a newly compiled one.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.PrepareContext(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Sets up the context for expression execution.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Evaluate(System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            Evaluates the given expression and returns the typed result.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Evaluate(System.String,System.Xml.XPath.XPathNavigator,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Evaluates the given expression and returns the typed result.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Evaluate(System.String,System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Evaluates the given expression and returns the typed result.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Evaluate(System.String,System.Xml.XPath.XPathNavigator,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Evaluates the given expression and returns the typed result.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Evaluate(System.String,System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Evaluates the given expression and returns the typed result.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Evaluate(System.String,System.Xml.XPath.XPathNavigator,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Evaluates the given expression and returns the typed result.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Select(System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Select(System.String,System.Xml.XPath.XPathNavigator,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Select(System.String,System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Select(System.String,System.Xml.XPath.XPathNavigator,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Select(System.String,System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.Select(System.String,System.Xml.XPath.XPathNavigator,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Collections.IComparer)">
            <summary>
            Selects a node set using the specified XPath expression and sort.
            </summary>
            <remarks>
            See <see cref="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)"/>.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
            <summary>
            Selects a node set using the specified XPath expression and sort.
            </summary>
            <remarks>
            See <see cref="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)"/>.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Collections.IComparer,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Collections.IComparer,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Collections.IComparer,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSorted(System.String,System.Xml.XPath.XPathNavigator,System.Object,System.Collections.IComparer,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodes(System.String,System.Xml.XmlNode)">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodes(System.String,System.Xml.XmlNode,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodes(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodes(System.String,System.Xml.XmlNode,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodes(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodes(System.String,System.Xml.XmlNode,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Collections.IComparer)">
            <summary>
            Selects a node set using the specified XPath expression and sort.
            </summary>
            <remarks>
            See <see cref="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)"/>.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
            <summary>
            Selects a node set using the specified XPath expression and sort.
            </summary>
            <remarks>(object, IComparer)
            See <see cref="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)"/>.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Collections.IComparer,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Collections.IComparer,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Collections.IComparer,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectNodesSorted(System.String,System.Xml.XmlNode,System.Object,System.Collections.IComparer,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSingleNode(System.String,System.Xml.XmlNode)">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSingleNode(System.String,System.Xml.XmlNode,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSingleNode(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSingleNode(System.String,System.Xml.XmlNode,Mvp.Xml.Common.XmlPrefix[])">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSingleNode(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager,Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathCache.SelectSingleNode(System.String,System.Xml.XmlNode,Mvp.Xml.Common.XmlPrefix[],Mvp.Xml.Common.XPath.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathCache.Cache">
            <summary>
            Initially a simple hashtable. In the future should 
            implement sliding expiration of unused expressions.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Serialization.SignatureExtractor">
            <summary>
            Helper methods to create the signature for 
            the XmlSerializer parameters.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.SignatureExtractor.GetDefaultNamespaceSignature(System.String)">
            <summary>
            Returns a signature for the passed in namespace
            </summary>
            <param name="defaultNamespace"></param>
            <returns>signature for the passed in namespace</returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.SignatureExtractor.GetXmlRootSignature(System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            Creates a signature for the passed in XmlRootAttribute
            </summary>
            <param name="root"></param>
            <returns>An instance indpendent signature of the XmlRootAttribute</returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.SignatureExtractor.GetOverridesSignature(System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Creates a signature for the passed in XmlAttributeOverrides
            </summary>
            <param name="overrides"></param>
            <returns>An instance indpendent signature of the XmlAttributeOverrides</returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.SignatureExtractor.GetTypeArraySignature(System.Type[])">
            <summary>
            Creates a signature for the passed in Type array. The order
            of the elements in the array does not influence the signature.
            </summary>
            <param name="types"></param>
            <returns>An instance indpendent signature of the Type array</returns>
        </member>
        <member name="T:Mvp.Xml.Common.Guard">
            <summary>
            Helper class with guard checks.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="value">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="value">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.XIncludeException">
            <summary>
            Generic XInclude exception.	
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.XIncludeException"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.XIncludeException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exceptiion</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.ResourceException">
            <summary>
            <c>ResourceException</c> represents resource error as per XInclude specification.
            </summary>
            <remarks>
            Resource error is internal error and should lead to the fallback processing.
            <c>ResourceException</c> therefore should never be thrown outside 
            the XInclude Processor.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.XInclude.ResourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.ResourceException"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.ResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.ResourceException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exceptiion</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.FatalException">
            <summary>
            <c>FatalException</c> represents fatal error as per XInclude spcification.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.FatalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.FatalException"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.FatalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.FatalException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exceptiion</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.NonXmlCharacterException">
            <summary>
            Non XML character in a document to include exception.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.NonXmlCharacterException.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.NonXmlCharacterException"/> 
            class with a specified invalid character.
            </summary>
            <param name="c">Invalid character</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.CircularInclusionException">
            <summary>
            Circular inclusion exception.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.CircularInclusionException.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.CircularInclusionException"/> 
            class with a specified Uri that causes inclusion loop.
            </summary>
            <param name="uri">Uri that causes inclusion loop</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.CircularInclusionException.#ctor(System.Uri,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.CircularInclusionException"/> 
            class with a specified Uri that causes inclusion loop and error location within
            XML document.
            </summary>
            <param name="uri">Uri that causes inclusion loop</param>
            <param name="line">Line number</param>
            <param name="locationUri">Location Uri</param>
            <param name="position">Column number</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.FatalResourceException">
            <summary>
            Resource error not backed up by xi:fallback exception.
            </summary>	
        </member>
        <member name="M:Mvp.Xml.XInclude.FatalResourceException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.FatalResourceException"/> 
            class with the specified inner exception that is the cause of this exception.
            </summary>        
            <param name="re">Inner exceptiion</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.XIncludeSyntaxError">
            <summary>
            XInclude syntax error exception.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludeSyntaxError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.XIncludeSyntaxError"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.AttributeOrNamespaceInIncludeLocationError">
            <summary>
            Include location identifies an attribute or namespace node.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.AttributeOrNamespaceInIncludeLocationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.AttributeOrNamespaceInIncludeLocationError"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.MalformedXInclusionResultError">
            <summary>
            Not wellformed inclusion result (e.g. top-level xi:include
            includes multiple elements).
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.MalformedXInclusionResultError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.MalformedXInclusionResultError"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.InvalidAcceptHTTPHeaderValueError">
            <summary>
            Value of the "accept" attribute contains an invalid for 
            HTTP header character (outside #x20 through #x7E range).
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.InvalidAcceptHTTPHeaderValueError.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XInclude.InvalidAcceptHTTPHeaderValueError"/> 
            class with a specified invalid character.
            </summary>
            <param name="c">Invalid character</param>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.SubtreeXPathNavigator">
            <summary>	
            Allows to navigate a subtree of an <see cref="T:System.Xml.XPath.IXPathNavigable"/> source, 
            by limiting the scope of the navigator to that received 
            at construction time.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a>
            <para>See http://weblogs.asp.net/cazzu/archive/2004/06/24/164243.aspx</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates SubtreeXPathNavigator over specified XPathNavigator.
            </summary>
            <param name="navigator">Navigator that determines scope.</param>
            <remarks>The incoming navigator is cloned upon construction, 
            which isolates the calling code from movements to the 
            <see cref="T:Mvp.Xml.Common.XPath.SubtreeXPathNavigator"/>.</remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.#ctor(System.Xml.XPath.XPathNavigator,System.Boolean)">
            <summary>
            Creates SubtreeXPathNavigator over specified XPathNavigator.
            </summary>
            <param name="navigator">Navigator that determines scope.</param>
            <param name="enableFragment">Whether the navigator should be able to 
            move among all siblings of the <paramref name="navigator"/> defining the 
            scope.</param>
            <remarks>The incoming navigator is cloned upon construction, 
            which isolates the calling code from movements to the 
            <see cref="T:Mvp.Xml.Common.XPath.SubtreeXPathNavigator"/>.</remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.Clone">
            <summary>
            Creates new cloned version of the <see cref="T:Mvp.Xml.Common.XPath.SubtreeXPathNavigator"/>.
            </summary>
            <returns>Cloned copy of the <see cref="T:Mvp.Xml.Common.XPath.SubtreeXPathNavigator"/>.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToId(System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToFirst">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToFirstChild">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToNext">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNext"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToParent">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToParent"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToPrevious">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToPrevious"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToRoot">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToRoot"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.GetAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToFirstAttribute">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToNextAttribute">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.GetNamespace(System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToNamespace(System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.AtRoot">
            <summary>
            Determines whether the navigator is on the root node (before the first child).
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.IsTop">
            <summary>
            Determines whether the navigator is at the same position as the "document element".
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.BaseURI">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.BaseURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.HasAttributes">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.HasAttributes"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.HasChildren">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.HasChildren"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.IsEmptyElement">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.IsEmptyElement"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.LocalName">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.LocalName"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.Name">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.Name"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.NamespaceURI">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.NamespaceURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.NameTable">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.NameTable"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.NodeType">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.NodeType"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.Prefix">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.Prefix"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.Value">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathItem.Value"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SubtreeXPathNavigator.XmlLang">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.XmlLang"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator">
            <summary>
            Empty <see cref="T:System.Xml.XPath.XPathNodeIterator"/>, used to represent empty
            node sequence. Can be used to return empty nodeset out of an XSLT or XPath extension function.
            Implemented as a singleton.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="F:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.Instance">
            <summary>
            EmptyXPathNodeIterator instance.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.#ctor">
            <summary>
            This is a singleton, get an instance instead.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.Clone">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNodeIterator.Clone"/>
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.MoveNext">
            <summary>
            Always false. See <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext"/>
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.Count">
            <summary>
            Always 0. See <see cref="P:System.Xml.XPath.XPathNodeIterator.Count"/>
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.Current">
            <summary>
            Always null. See <see cref="P:System.Xml.XPath.XPathNodeIterator.Current"/>
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.EmptyXPathNodeIterator.CurrentPosition">
            <summary>
            Always 0. See <see cref="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition"/>
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Serialization.SerializerCacheDelegate">
            <summary>
            Delegete type for events to raise from the
            serializer cache.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Serialization.XmlSerializerCache">
            <summary>
            The XmlSerializerCache allows to work around the 
            assembly leak problem in the <see cref="T:System.Xml.Serialization.XmlSerializer"/> 
            ( LINK )
            The cache will inspect if it contains any previously cached 
            instances that are compatible with the parameters passed to the
            various overloads to the GetSerializer method before constructing 
            a new XmlSerializer instance.
            </summary>
            <remarks>
            In contrast to the <see cref="T:System.Xml.Serialization.XmlSerializer"/>, the XmlSerializerCache requires
            a permission set that allows reflecting over private members.
            </remarks>
        </member>
        <member name="F:Mvp.Xml.Common.Serialization.XmlSerializerCache.Serializers">
            <summary>
            The Dictionary to store cached serializer instances.
            </summary>
        </member>
        <member name="F:Mvp.Xml.Common.Serialization.XmlSerializerCache.SyncRoot">
            <summary>
            An object to synchonize access to the Dictionary instance.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.#ctor">
            <summary>
            Default constructor to initialize
            an instance of the cache.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.String)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="overrides"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Type[])">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="overrides"></param>
            <param name="types"></param>
            <param name="root"></param>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlSerializerCache.Dispose">
            <summary>
            Implementation of IDisposable.Dispose. Call to 
            clean up resources held by the XmlSerializerCache.
            </summary>
        </member>
        <member name="E:Mvp.Xml.Common.Serialization.XmlSerializerCache.NewSerializer">
            <summary>
            The NewSerializer event fires when the XmlSerializerCache
            receives a request for an XmlSerializer instance
            that is not in the cache and it needs to create a
            new instance.
            </summary>
        </member>
        <member name="E:Mvp.Xml.Common.Serialization.XmlSerializerCache.CacheHit">
            <summary>
            The CacheHit even fires when the XmlSerializerCache
            receives a request for a previously cached instance
            of an XmlSerializer
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Serialization.XmlAttributeOverridesThumbprinter">
            <summary>
            Helpers to create a normalized thumbprint
            for XmlAttributeOverrides objects.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.XmlAttributeOverridesThumbprinter.GetThumbprint(System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Gets a thumbprint (signature)
            for the content of the XmlAttributeOverrides
            </summary>
            <param name="overrides"></param>
            <returns></returns>
        </member>
        <member name="T:Mvp.Xml.Exslt.RedirectState">
            <summary>
            Specifies the redirecting state of the <c>MultiXmlTextWriter</c>.
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.RedirectState.Relaying">
            <summary>
            The output is being relayed further (default).
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.RedirectState.Redirecting">
            <summary>
            The output is being redirected.
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.RedirectState.WritingRedirectElementAttrs">
            <summary>
            <c>&lt;exsl:document></c> attributes are being written
            </summary>	        
        </member>
        <member name="F:Mvp.Xml.Exslt.RedirectState.WritingRedirectElementAttrValue">
            <summary>
            <c>&lt;exsl:document></c> attribute value is being written
            </summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.MultiXmlTextWriter">
             <summary>
             <para><c>MultiXmlTextWriter</c> class extends standard <see cref="T:System.Xml.XmlTextWriter"/> class 
             and represents an XML writer that provides a fast, 
             non-cached, forward-only way of generating multiple output files containing
             either text data or XML data that conforms to the W3C Extensible Markup 
             Language (XML) 1.0 and the Namespaces in XML recommendations.</para>	
             </summary>
             <remarks>
             <para>Instances of <c>MultiXmlTextWriter</c> class regognize special element 
             (<c>&lt;exsl:document&gt;</c> in <c>"http://exslt.org/common"</c> namespace) as
             instruction to redirect the output of this element's content to another file. 
             When using with <c>XslTransform</c> class, <c>MultiXmlTextWriter</c> class 
             allows to generate multiple XSL Transfromation results.</para>	
             <para><c>MultiXmlTextWriter</c> class extends <c>System.Xml.XmlTextWriter</c>
             class, therefore its instances can be passed directly to the overloaded 
             <c>XslTransform.Transform()</c> method, which accepts <c>XmlWriter</c> as 
             object to write the transformation result to. All actual XML writing work 
             <c>MultiXmlTextWriter</c> class delegates to its base class, but it overrides 
             several <c>XmlTextWriter</c> class methods to implement output switching logic 
             as follows: once <c>&lt;exsl:document&gt;</c> element start tag is detected in 
             the XML stream, new writer (<c>XmlTextWriter</c> or <c>StreamWriter</c> depending on
             <c>method</c> attribute value) object is created with parameters as specified 
             in the attributes of the <c>&lt;exsl:document&gt;</c> element and the output 
             is switched to this newly created writer untill the end tag of the 
             <c>&lt;exsl:document&gt;</c> element is encountered.</para>
             <para><c>&lt;exsl:document&gt;</c> element syntax is as follows:
             <code>
             &lt;exsl:document
                href = { uri-reference }
                method = { "xml" | "text" }
                encoding = { string }
                omit-xml-declaration = { "yes" | "no" }
                standalone = { "yes" | "no" }
                doctype-public = { string }
                doctype-system = { string }
                indent = { "yes" | "no" }
                &lt;-- Content: template --&gt;
             &lt;/exsl:document&gt;
             </code></para>
             <para>
             The <c>href</c> attribute specifies where new result document should be stored, 
             it must be an absolute or relative URI. Relative URIs are resolved 
             relatively to the parent result document base URI. If the <c>href</c> attribute
             specifies that the output should be redirected to a file in a directory
             and that directory does not exist, it will be created. This allows to create 
             directory trees of any complexity.</para>
             <para>Semantics of the rest attributes is as defined in W3C XSLT 1.0 Recommendation 
             for <c>&lt;xsl:output&gt;</c> element, see 
             <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>.
             </para>
             <para><b>Note:</b> <c>&lt;exsl:document&gt;</c> element namespace prefix must be bound to 
             <c>"http://exslt.org/common"</c> namespace URI in order to be recognized by 
             <c>MultiXmlTextWriter</c> class as a redirecting instruction. </para>
             </remarks>
             <example>This example shows how to use <c>MultiXmlTextWriter</c> along with 
             <c>XslTransform</c> to achieve create multiple result documents in one
             transfromation run:
             <para>In XSL stylesheet document declare <c>"http://exslt.org/common"</c> namespace
             and whenever you want to create new result document make use of <c>&lt;exsl:documnet&gt;</c>
             element:<br/>
             <c>style.xsl</c> stylesheet fragment:
             <code>
             <![CDATA[
             <xsl:stylesheet version="1.0" 
               xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               ]]><b>xmlns:exsl= "http://exslt.org/common"</b><![CDATA[ 
               ]]><b>exclude-result-prefixes="exsl"</b>&gt;<![CDATA[ 
               <xsl:template match="book">
                 <!-- Builds frameset -->
                 <html> 
                   <head>
                     <title><xsl:value-of select="@title"/></title> 
                   </head>
                   <frameset cols="20%,80%"> 
                     <frame src="toc.html"/> 
                     <!-- Builds table of contents output document -->    
                     ]]><b>&lt;exsl:document href="toc.html" indent="yes"&gt;</b><![CDATA[
                       <html>
                         <head>
                           <title>Table of Contents</title>
                         </head>
                         <body>
                           <ul>
                             <xsl:apply-templates mode="toc"/> 
                           </ul> 
                         </body>                      
                       </html>
                     ]]><b>&lt;/exsl:document&gt;</b><![CDATA[ 
                     <frame src="{chapter[1]/@id}.html" name="body" />
                     <xsl:apply-templates />
                   </frameset> 
                 </html>
                 ...  
            
             ]]>
             </code>
             C# code fragment:	
             <code>
             XPathDocument doc = new XPathDocument("book.xml");
             XslTransform xslt = new XslTransform();
             xslt.Load("style.xsl");	            
             MultiXmlTextWriter multiWriter = 
                 new MultiXmlTextWriter("index.html", Encoding.UTF8);
             multiWriter.Formatting = Formatting.Indented;
             xslt.Transform(doc, null, multiWriter);
             </code>
             </para>
             </example>
        </member>
        <member name="F:Mvp.Xml.Exslt.MultiXmlTextWriter.RedirectNamespace">
            <summary>
            This constant is the namespace <c>&lt;exsl:document></c> element 
            should belong to in order to be recognized as redirect instruction.
            It's <c>"http://exslt.org/common"</c> as defined by 
            <a href="http://www.exslt.org">EXSLT community initiative</a>.
            </summary>	    	     
        </member>
        <member name="F:Mvp.Xml.Exslt.MultiXmlTextWriter.RedirectElementName">
            <summary>
            This constant is the redirect instruction element name.
            It's <c>"document"</c> as defined by 
            <a href="http://www.exslt.org">EXSLT community initiative</a>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates an instance of the <c>MultiXmlTextWriter</c> class using the specified filename and
            encoding.
            Inherited from <c>XmlTextWriter</c>, see <see cref="T:System.Xml.XmlTextWriter"/>.
            Overridden to set output directory.
            </summary>
            <param name="fileName">The filename to write to. If the file exists, it will truncate it and overwrite it 
            with the new content.</param>
            <param name="encoding">The encoding to generate. If encoding is a null reference it writes the file out 
            as UTF-8, and omits the encoding attribute from the ProcessingInstruction.</param>
            <exception cref="T:System.ArgumentException">The encoding is not supported; the filename is empty, contains only 
            white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
            <exception cref="T:System.ArgumentNullException">The filename is a null reference.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found.</exception>
            <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax 
            for file name, directory name, or volume label syntax.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>MultiXmlTextWriter</c> class using the specified 
            <c>TextWriter</c>, see <see cref="T:System.IO.TextWriter"/>.
            Inherited from <c>XmlTextWriter</c>, see <see cref="T:System.Xml.XmlTextWriter"/>.
            </summary>
            <param name="w">The <c>TextWriter</c> to write to. It is assumed that the <c>TextWriter</c> is 
            already set to the correct encoding.</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.#ctor(System.IO.TextWriter,System.Xml.XmlResolver)">
            <summary>
            Creates an instance of the <c>MultiXmlTextWriter</c> class using the specified 
            <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Xml.XmlResolver"/>.
            Inherited from <see cref="T:System.Xml.XmlTextWriter"/>.
            </summary>
            <param name="w">The <see cref="T:System.IO.TextWriter"/> to write to. It is assumed that the 
            <see cref="T:System.IO.TextWriter"/> is 
            already set to the correct encoding.</param>
            <param name="outResolver">The resolver to use to retrieve external resources.</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates an instance of the <c>MultiXmlTextWriter</c> class using the specified 
            stream and encoding.
            Inherited from <c>XmlTextWriter</c>, see <see cref="T:System.Xml.XmlTextWriter"/>.
            </summary>
            <param name="w">The stream to which you want to write.</param>
            <param name="encoding">The encoding to generate. If encoding is a null 
            reference it writes out the stream as UTF-8 and omits the encoding attribute 
            from the ProcessingInstruction.</param>
            <exception cref="T:System.ArgumentException">The encoding is not supported or the stream 
            cannot be written to.</exception>
            <exception cref="T:System.ArgumentNullException">w is a null reference.</exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Xml.XmlResolver)">
            <summary>
            Creates an instance of the <c>MultiXmlTextWriter</c> class using the specified 
            stream, encoding and resolver.
            </summary>
            <param name="w">The stream to which you want to write.</param>
            <param name="encoding">The encoding to generate. If encoding is a null 
            reference it writes out the stream as UTF-8 and omits the encoding attribute 
            from the ProcessingInstruction.</param>
            <param name="outResolver">The resolver to use to retrieve external resources.</param>
            <exception cref="T:System.ArgumentException">The encoding is not supported or the stream 
            cannot be written to.</exception>
            <exception cref="T:System.ArgumentNullException">w is a null reference.</exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.CheckContentStart">
            <summary>
            Checks possible start of <c>&lt;exsl:document&gt;</c> element content.         
            </summary>
            <remarks>
            When <c>&lt;exsl:document&gt;</c> element start tag is detected, the beginning of the 
            element's content might be detected as any next character data (not attribute
            value though), element start tag, processing instruction or comment.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>href</c> attribute is absent.</exception>
            <exception cref="T:System.ArgumentException">Thrown when a document, specified by <c>href</c> attribute is
            opened alreary. Two nested <c>&lt;exsl:document&gt;</c></exception> elements cannot specify the same 
            output URI in their <c>href</c> attributes.
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Writes the specified start tag and associates it with the given namespace and prefix.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)"/>
            Overridden to detect <c>exsl:document</c> element start tag.
            </summary>        
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element. If this namespace 
            is already in scope and has an associated prefix then the writer will automatically write that prefix also. </param>
            <exception cref="T:System.InvalidOperationException">The writer is closed.</exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.FinishRedirecting">
            <summary>
            Finishes output redirecting - closes current writer 
            and pops previous state.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteEndElement"/>
            Overridden to detect <c>exsl:document</c> element end tag.
            </summary>                
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteFullEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteFullEndElement"/>
            Overridden to detect <c>exsl:document</c> element end tag.
            </summary>                
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the start of an attribute.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)"/>
            Overridden to detect <c>exsl:document</c> attribute names and to redirect
            the output.
            </summary>
            <param name="prefix">Namespace prefix of the attribute.</param>
            <param name="localName">Local name of the attribute.</param>
            <param name="ns">Namespace URI of the attribute.</param>                                            
            <exception cref="T:System.ArgumentException"><c>localName</c>c&gt; is either a null reference or <c>String.Empty</c>.</exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteEndAttribute">
            <summary>
            Closes the previous <c>WriteStartAttribute</c> call.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteEndAttribute"/>
            Overridden to redirect the output.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment &lt;!--...--&gt; containing the specified text.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteComment(System.String)"/>
            Overriden to redirect the output.
            </summary>
            <param name="text">Text to place inside the comment.</param>        
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
            <exception cref="T:System.InvalidOperationException">The <c>WriteState</c> is Closed.</exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            Writes out a processing instruction with a space between the name 
            and text as follows: &lt;?name text?&gt;.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)"/>
            Overridden to redirect the output.
            </summary>
            <param name="name">Name of the processing instruction.</param>
            <param name="text">Text to include in the processing instruction.</param>        
            <exception cref="T:System.ArgumentException"><para>The text would result in a non-well formed XML document.</para> 
            <para><c>name</c> is either a null reference or <c>String.Empty</c>.</para>
            <para>This method is being used to create an XML declaration after 
            <c>WriteStartDocument</c> has already been called.</para></exception>
        </member>
        <member name="M:Mvp.Xml.Exslt.MultiXmlTextWriter.WriteString(System.String)">
            <summary>
            Writes the given text content.
            Inherited from <c>XmlTextWriter</c>, see <see cref="M:System.Xml.XmlTextWriter.WriteString(System.String)"/>
            Overridden to detect <c>exsl:document</c> element attribute values and to 
            redirect the output.
            </summary>
            <param name="text">Text to write.</param>        
            <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair.</exception>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltDatesAndTimes">
            <summary>
            This class implements the EXSLT functions in the http://exslt.org/dates-and-times namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dateTime">
            <summary>
            Implements the following function
              string date:date-time()
            Output format is ISO 8601 (YYYY-MM-DDThh:mm:ss{Z | {+ | -}zz:zz}).
            YYYY - year with century
            MM - month in numbers with leading zero
            DD - day in numbers with leading zero
            T - the letter T
            hh - hours in numbers with leading zero (00-23).
            mm - minutes in numbers with leading zero (00-59).
            ss - seconds in numbers with leading zero (00-59).
            +/-zzzz - time zone expressed as hours and minutes from UTC.
            	If UTC, then this is the letter Z
            	If east of Greenwich, then -zz:zz (e.g. Pacific standard time is -08:00)
            	If west of Greenwich, then +zz:zz (e.g. Tokyo is +09:00)
            </summary>
            <returns>The current time.</returns>		
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dateTime_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dateTime(System.String)">
            <summary>
            Implements the following function
              string date:date-time()
            </summary>
            <returns>The current date and time or the empty string if the 
            date is invalid </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dateTime_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dateTimeImpl(Mvp.Xml.Exslt.ExsltDatesAndTimes.DateTimeTZ)">
            <summary>
            Internal function to format the date based on a date, rather than a string
            </summary>
            <returns>The formtted date and time as a ISO8601 string</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.date">
            <summary>
            Implements the following function
              string date:date()
            </summary>
            <returns>The current date</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.date(System.String)">
            <summary>
            Implements the following function
              string date:date(string)
            </summary>
            <returns>The date part of the specified date or the empty string if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.time">
            <summary>
            Implements the following function
              string date:time()
            </summary>
            <returns>The current time</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.time(System.String)">
            <summary>
            Implements the following function
              string date:time(string)
            </summary>
            <returns>The time part of the specified date or the empty string if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.year">
            <summary>
            Implements the following function
              number date:year()
            </summary>
            <returns>The current year</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.year(System.String)">
            <summary>
            Implements the following function
              number date:year(string)
            </summary>
            <returns>The year part of the specified date or the empty string if the 
            date is invalid</returns>
            <remarks>Does not support dates in the format of the xs:yearMonth or 
            xs:gYear types</remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.IsLeapYear(System.Int32)">
            <summary>
            Helper method for calculating whether a year is a leap year. Algorithm 
            obtained from http://mindprod.com/jglossleapyear.html
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.leapYear">
            <summary>
            Implements the following function
              boolean date:leap-year()
            </summary>
            <returns>True if the current year is a leap year.</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.leapYear_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.leapYear(System.String)">
            <summary>
            Implements the following function
              boolean date:leap-year(string)
            </summary>
            <returns>True if the specified year is a leap year</returns>
            <remarks>Note that the spec says we should return NaN for a badly formatted input
            string.  This is impossible; we return false for a badly formatted input string.
            </remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.leapYear_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthInYear">
            <summary>
            Implements the following function
              number date:month-in-year()
            </summary>
            <returns>The current month</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthInYear_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthInYear(System.String)">
            <summary>
            Implements the following function
              number date:month-in-year(string)
            </summary>
            <returns>The month part of the specified date or the empty string if the 
            date is invalid</returns>
            <remarks>Does not support dates in the format of xs:gYear</remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthInYear_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInYear(System.DateTime)">
            <summary>
            Helper funcitno to calculate the week number
            </summary>
            <returns>
            Returns the week in the year.  Obeys EXSLT spec, which specifies that counting follows 
            ISO 8601: week 1 in a year is the week containing the first Thursday of the year, with 
            new weeks beginning on a Monday
            </returns>
            <param name="d">The date for which we want to find the week</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInYear">
            <summary>
            Implements the following function
              number date:week-in-year()
            </summary>
            <returns>
            The current week. Obeys EXSLT spec, which specifies that counting follows 
            ISO 8601: week 1 in a year is the week containing the first Thursday of the year, with 
            new weeks beginning on a Monday
            </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInYear_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInYear(System.String)">
            <summary>
            Implements the following function
              number date:week-in-year(string)
            </summary>
            <returns>The week part of the specified date or the empty string if the 
            date is invalid</returns>
            <remarks>Does not support dates in the format of the xs:yearMonth or 
            xs:gYear types. This method uses the Calendar.GetWeekOfYear() method 
            with the CalendarWeekRule and FirstDayOfWeek of the current culture.
            THE RESULTS OF CALLING THIS FUNCTION VARIES ACROSS CULTURES</remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInYear_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInMonth(System.DateTime)">
            <summary>
            Helper method. 
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInMonth">
            <summary>
            Implements the following function
              number date:week-in-month()
            </summary>
            <remarks>
            The current week in month as a number.  For the purposes of numbering, the first 
            day of the month is in week 1 and new weeks begin on a Monday (so the first and 
            last weeks in a month will often have less than 7 days in them). 
            </remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInMonth_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInMonth(System.String)">
            <summary>
            Implements the following function
              number date:week-in-month(string)
            </summary>
            <returns>The week in month of the specified date or NaN if the 
            date is invalid</returns>
            <remarks>
            The current week in month as a number.  For the purposes of numbering, the first 
            day of the month is in week 1 and new weeks begin on a Monday (so the first and 
            last weeks in a month will often have less than 7 days in them). 
            </remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.weekInMonth_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInYear">
            <summary>
            Implements the following function
              number date:day-in-year()
            </summary>
            <returns>The current day. </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInYear_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInYear(System.String)">
            <summary>
            Implements the following function
              number date:day-in-year(string)
            </summary>
            <returns>
            The day part of the specified date or NaN if the date is invalid
            </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInYear_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInWeek">
            <summary>
            Implements the following function
              number date:day-in-week()
            </summary>
            <returns>The current day in the week. 1=Sunday, 2=Monday,...,7=Saturday</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInWeek_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInWeek(System.String)">
            <summary>
            Implements the following function
              number date:day-in-week(string)
            </summary>
            <returns>The day in the week of the specified date or NaN if the 
            date is invalid. The current day in the week. 1=Sunday, 2=Monday,...,7=Saturday
            </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInWeek_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInMonth">
            <summary>
            Implements the following function
              number date:day-in-month()
            </summary>
            <returns>The current day. </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInMonth_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInMonth(System.String)">
            <summary>
            Implements the following function
              number date:day-in-month(string)
            </summary>
            <returns>The day part of the specified date or the empty string if the 
            date is invalid</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayInMonth_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayOfWeekInMonth(System.Int32)">
            <summary>
            Helper method.
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayOfWeekInMonth">
            <summary>
            Implements the following function
              number date:day-of-week-in-month()
            </summary>
            <returns>The current day of week in the month as a number. For instance 
            the third Friday of the month returns 3</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayOfWeekInMonth_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayOfWeekInMonth(System.String)">
            <summary>
            Implements the following function
              number date:day-of-week-in-month(string)
            </summary>
            <returns>The day part of the specified date or NaN if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayOfWeekInMonth_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.hourInDay">
            <summary>
            Implements the following function
              number date:hour-in-day()
            </summary>
            <returns>The current hour of the day as a number.</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.hourInDay_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.hourInDay(System.String)">
            <summary>
            Implements the following function
              number date:hour-in-day(string)
            </summary>
            <returns>The current hour of the specified time or NaN if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.hourInDay_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.minuteInHour">
            <summary>
            Implements the following function
              number date:minute-in-hour()
            </summary>
            <returns>The minute of the current hour as a number. </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.minuteInHour_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.minuteInHour(System.String)">
            <summary>
            Implements the following function
              number date:minute-in-hour(string)
            </summary>
            <returns>The minute of the hour of the specified time or NaN if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.minuteInHour_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.secondInMinute">
            <summary>
            Implements the following function
              number date:second-in-minute()
            </summary>
            <returns>The seconds of the current minute as a number. </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.secondInMinute_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.secondInMinute(System.String)">
            <summary>
            Implements the following function
              number date:second-in-minute(string)
            </summary>
            <returns>The seconds of the minute of the specified time or NaN if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.secondInMinute_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayName(System.Int32)">
            <summary>
            Helper function for 
              string date:day-name()
            </summary>
            <returns>The Engish name of the current day</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayName">
            <summary>
            Implements the following function
              string date:day-name()
            </summary>
            <returns>The Engish name of the current day</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayName_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayName(System.String)">
            <summary>
            Implements the following function
              string date:day-name(string)
            </summary>
            <returns>The English name of the day of the specified date or the empty string if the 
            date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayName_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayAbbreviation(System.Int32)">
            <summary>
            Helper function for 
              string date:day-abbreviation()
            </summary>
            <returns>The abbreviated English name of the current day</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayAbbreviation">
            <summary>
            Implements the following function
              string date:day-abbreviation()
            </summary>
            <returns>The abbreviated English name of the current day</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayAbbreviation_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayAbbreviation(System.String)">
            <summary>
            Implements the following function
              string date:day-abbreviation(string)
            </summary>
            <returns>The abbreviated English name of the day of the specified date or the 
            empty string if the input date is invalid</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.dayAbbreviation_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthName(System.Int32)">
            <summary>
            Helper Function for 
              string date:month-name()
            </summary>
            <returns>The name of the current month</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthName">
            <summary>
            Implements the following function
              string date:month-name()
            </summary>
            <returns>The name of the current month</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthName_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthName(System.String)">
            <summary>
            Implements the following function
              string date:month-name(string)
            </summary>
            <returns>The name of the month of the specified date or the empty string if the 
            date is invalid</returns>
            <remarks>Does not support dates in the format of xs:gYear types</remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthName_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthAbbreviation(System.Int32)">
            <summary>
            Helper function for 
              string date:month-abbreviation()
            </summary>
            <returns>The abbreviated name of the current month</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthAbbreviation">
            <summary>
            Implements the following function
              string date:month-abbreviation()
            </summary>
            <returns>The abbreviated name of the current month</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthAbbreviation_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthAbbreviation(System.String)">
            <summary>
            Implements the following function
              string date:month-abbreviation(string)
            </summary>
            <returns>The abbreviated name of the month of the specified date or the empty string if the 
            date is invalid</returns>
            <remarks>Does not support dates in the format of the xs:yearMonth or 
            xs:gYear types</remarks>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.monthAbbreviation_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.formatDate(System.String,System.String)">
             <summary>
             Implements the following function
               string date:format-date(string, string)
             </summary>
             <param name="d">The date to format</param>
             <param name="format">One of the format strings understood by the 
             Java 1.1 SimpleDateFormat method:
             
              Symbol   Meaning                 Presentation        Example
            ------   -------                 ------------        -------
            G        era designator          (Text)              AD
            y        year                    (Number)            1996
            M        month in year           (Text &amp; Number)     July &amp; 07
            d        day in month            (Number)            10
            h        hour in am/pm (1~12)    (Number)            12
            H        hour in day (0~23)      (Number)            0
            m        minute in hour          (Number)            30
            s        second in minute        (Number)            55
            S        millisecond             (Number)            978
            E        day in week             (Text)              Tuesday
            D        day in year             (Number)            189
            F        day of week in month    (Number)            2 (2nd Wed in July)
            w        week in year            (Number)            27
            W        week in month           (Number)            2
            a        am/pm marker            (Text)              PM
            k        hour in day (1~24)      (Number)            24
            K        hour in am/pm (0~11)    (Number)            0
            z        time zone               (Text)              Pacific Standard Time
            '        escape for text         (Delimiter)
            ''       single quote            (Literal)           '
            </param>
             <returns>The formated date</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.formatDate_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.parseDate(System.String,System.String)">
            <summary>
            Implements the following function
              string date:parse-date(string, string)
            BUGBUG: should use Java formatting strings, not Windows.
            </summary>
            <param name="d">The date to parse</param>
            <param name="format">One of the format strings understood by the 
            DateTime.ToString(string) method.</param>
            <returns>The parsed date</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.parseDate_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.difference(System.String,System.String)">
            <summary>
            Implements the following function 
               string:date:difference(string, string)
            </summary>
            <param name="start">The start date</param>
            <param name="end">The end date</param>
            <returns>A positive difference if start is before end otherwise a negative
            difference. The difference is in the ISO 8601 date difference format as either
            [-]P[yY][mM]
            or
            [-]P[dD][T][hH][mM][sS]
            P means a difference and is required
            At least one of Y M D H M S is required
            If a higher order component is 0, it is suppressed (for example, if there are 0 years and
            1 month, then Y is suppressed.  If there are 1 years and 0 months, M is not suppressed)
            If the input format is yyyy-MM or yyyy, then the output is [-]P[yY][mM]
            If the input format includes days, hours, minutes or seconds, then the output is
            [-]P[dD][T][hH][mM][sS].
            If there H M and S are all 0, the T is suppressed.
            </returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.add(System.String,System.String)">
            <summary>
            Implements the following function
               date:add(string, string)
            </summary>
            <param name="datetime">An ISO8601 date/time</param>
            <param name="duration">the duration to add</param>
            <returns>The new time</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.addDuration(System.String,System.String)">
            <summary>
            Implements the following function
               string:date:add-duration(string, string)
            </summary>
            <param name="duration1">Initial duration</param>
            <param name="duration2">the duration to add</param>
            <returns>The new time</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.addDuration_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.seconds(Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime)">
            <summary>
            Helper method for date:seconds() that takes an ExsltDateTime. 
            </summary>
            <param name="d"></param>
            <returns>difference in seconds between the specified date and the
            epoch (1970-01-01T00:00:00Z)</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.seconds">
            <summary>
            Implements the following function
            	number date:seconds()
            </summary>
            <returns>The amount of seconds since the epoch (1970-01-01T00:00:00Z)</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.seconds(System.String)">
            <summary>
            Implements the following function
            	number date:seconds(string)
            </summary>
            <returns>If date passed in, the amount of seconds between the specified date and the 
            epoch (1970-01-01T00:00:00Z).  If timespan passed in, returns the number of seconds
            in the timespan.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.sum(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
            	string date:sum(node-set)
            </summary>
            <param name="iterator">Nodeset of timespans</param>
            <returns>The sum of the timespans within a node set.</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.duration">
            <summary>
            Implements the following function 
               string date:duration()
            </summary>
            <returns>seconds since the beginning of the epoch until now</returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.duration(System.Double)">
            <summary>
            Implements the following function 
               string date:duration(number)
            </summary>
            <param name="seconds"></param>
            <returns></returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTimeFactory.ParseDateTime(System.String)">
            <summary>
            Parse a date and time for format-date() 
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTimeFactory.ParseDate(System.String)">
            <summary>
            Initialize the structure with the current date, time and timezone
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime.#ctor">
            <summary>
            Initialize the structure with the current date, time and timezone
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime.#ctor(System.String)">
            <summary>
            Initialize the DateTimeTZ structure with the date, time and timezone in the string.
            </summary>
            <param name="inS">An ISO8601 string</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime.#ctor(Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime)">
            <summary>
            Exslt Copy constructor
            Initialize the structure with the date, time and timezone in the string.
            </summary>
            <param name="inS">An ExsltDateTime</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime.ToString">
            <summary>
            Output as a standard (ISO8601) string
            </summary>
            <returns>the date and time as an ISO8601 string.  includes timezone</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltDatesAndTimes.ExsltDateTime.ToString(System.String)">
            <summary>
            Output as a formatted string
            </summary>
            <returns>the date and time as a formatted string.  includes timezone</returns>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltContext">
            <summary>
            Custom <see cref="T:System.Xml.Xsl.XsltContext"/> implementation providing support for EXSLT 
            functions in XPath-only environment.
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext._supportedFunctions">
            <summary>
            Bitwise enumeration used to specify which EXSLT functions should be accessible to 
            in the ExsltContext object. The default value is ExsltFunctionNamespace.All 
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.exsltMath">
            <summary>
            Extension object which implements the functions in the http://exslt.org/math namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.exsltDatesAndTimes">
            <summary>
            Extension object which implements the functions in the http://exslt.org/dates-and-times namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.exsltRegularExpressions">
            <summary>
            Extension object which implements the functions in the http://exslt.org/regular-expressions namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.exsltStrings">
            <summary>
            Extension object which implements the functions in the http://exslt.org/strings namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.exsltSets">
            <summary>
            Extension object which implements the functions in the http://exslt.org/sets namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.exsltRandom">
            <summary>
            Extension object which implements the functions in the http://exslt.org/random namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.gdnDatesAndTimes">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/dates-and-times namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.gdnRegularExpressions">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/regular-expressions namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.gdnMath">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/math namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.gdnSets">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/sets namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.gdnStrings">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/strings namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltContext.gdnDynamic">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/dynamic namespace
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Creates new ExsltContext instance.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.#ctor(System.Xml.NameTable,Mvp.Xml.Exslt.ExsltFunctionNamespace)">
            <summary>
            Creates new ExsltContext instance.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.CompareDocument(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)"/>
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            See <see cref="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)"/>
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.ResolveVariable(System.String,System.String)">
            <summary>
            Resolves variables.
            </summary>
            <param name="prefix">The variable's prefix</param>
            <param name="name">The variable's name</param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            Resolves custom function in XPath expression.
            </summary>
            <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
            <param name="name">The name of the function.</param>
            <param name="argTypes">An array of argument types for the function being resolved. 
            This allows you to select between methods with the same name (for example, overloaded 
            methods). </param>
            <returns>An IXsltContextFunction representing the function.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.GetExtensionFunctionImplementation(System.Object,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            Finds appropriate implementation for an extension function - public 
            method with the same number of arguments and compatible argument types.
            </summary>
            <param name="obj">Extension object</param>
            <param name="name">Function name</param>
            <param name="argTypes">Types of arguments</param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltContext.ConvertToXPathType(System.Type)">
            <summary>
            Converts CLI type to XPathResultType type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Mvp.Xml.Exslt.ExsltContext.SupportedFunctions">
            <summary>
            Bitwise enumeration used to specify which EXSLT functions should be accessible to 
            in the ExsltContext. The default value is ExsltFunctionNamespace.All 
            </summary>
        </member>
        <member name="P:Mvp.Xml.Exslt.ExsltContext.Whitespace">
            <summary>
            See <see cref="P:System.Xml.Xsl.XsltContext.Whitespace"/>
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.XPathIteratorReader">
            <summary>
            Provides an <see cref="T:System.Xml.XmlReader"/> over an 
            <see cref="T:System.Xml.XPath.XPathNodeIterator"/>.
            </summary>
            <remarks>
            The reader exposes a new root element enclosing all navigators from the 
            iterator. This root node is configured in the constructor, by 
            passing the desired name and optional namespace for it.
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            See: http://weblogs.asp.net/cazzu/archive/2004/04/26/120684.aspx
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.#ctor">
            <summary>
            Parameterless constructor for XML serialization.
            </summary>
            <remarks>Supports the .NET serialization infrastructure. Don't use this 
            constructor in your regular application.</remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.#ctor(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Initializes the reader, using the default &lt;root&gt; element.
            </summary>
            <param name="iterator">The iterator to expose as a single reader.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.#ctor(System.Xml.XPath.XPathNodeIterator,System.String)">
            <summary>
            Initializes the reader.
            </summary>
            <param name="iterator">The iterator to expose as a single reader.</param>
            <param name="rootName">The name to use for the enclosing root element.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.#ctor(System.Xml.XPath.XPathNodeIterator,System.String,System.String)">
            <summary>
            Initializes the reader.
            </summary>
            <param name="iterator">The iterator to expose as a single reader.</param>
            <param name="rootName">The name to use for the enclosing root element.</param>
            <param name="ns">The namespace URI of the root element.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.Serialize">
            <summary>
            Returns the XML representation of the current node and all its children.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.Close">
            <summary>See <see cref="M:System.Xml.XmlReader.Close"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.GetAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.GetAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.GetAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.LookupNamespace(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToContent">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToContent"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToElement">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToElement"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToFirstAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.MoveToNextAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.Read">
            <summary>See <see cref="M:System.Xml.XmlReader.Read"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.ReadAttributeValue">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.ReadInnerXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadInnerXml"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.ReadOuterXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadOuterXml"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.ResolveEntity">
            <summary>See <see cref="M:System.Xml.XmlReader.Read"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.WriteXml(System.Xml.XmlWriter)">
            <summary>
            See <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.GetSchema">
            <summary>
            See <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.ReadXml(System.Xml.XmlReader)">
            <summary>
            See <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.AttributeCount">
            <summary>See <see cref="P:System.Xml.XmlReader.AttributeCount"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.BaseURI">
            <summary>See <see cref="P:System.Xml.XmlReader.BaseURI"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Depth">
            <summary>See <see cref="P:System.Xml.XmlReader.Depth"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.EOF">
            <summary>See <see cref="P:System.Xml.XmlReader.EOF"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.HasValue">
            <summary>See <see cref="P:System.Xml.XmlReader.HasValue"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.IsDefault">
            <summary>See <see cref="P:System.Xml.XmlReader.IsDefault"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.IsEmptyElement">
            <summary>See <see cref="P:System.Xml.XmlReader.IsDefault"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Item(System.String,System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String,System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Item(System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Item(System.Int32)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.Int32)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.LocalName">
            <summary>See <see cref="P:System.Xml.XmlReader.LocalName"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Name">
            <summary>See <see cref="P:System.Xml.XmlReader.Name"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.NamespaceURI">
            <summary>See <see cref="P:System.Xml.XmlReader.NamespaceURI"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.NameTable">
            <summary>See <see cref="P:System.Xml.XmlReader.NameTable"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.NodeType">
            <summary>See <see cref="P:System.Xml.XmlReader.NodeType"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Prefix">
            <summary>See <see cref="P:System.Xml.XmlReader.Prefix"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.QuoteChar">
            <summary>See <see cref="P:System.Xml.XmlReader.QuoteChar"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.ReadState">
            <summary>See <see cref="P:System.Xml.XmlReader.ReadState"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.Value">
            <summary>See <see cref="P:System.Xml.XmlReader.Value"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.XmlLang">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlLang"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.XmlSpace">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlSpace"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Close">
            <summary>See <see cref="M:System.Xml.XmlReader.Close"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.GetAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.GetAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.GetAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.LookupNamespace(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.MoveToAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.MoveToAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.MoveToAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.MoveToElement">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToElement"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.MoveToFirstAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.MoveToNextAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Read">
            <summary>See <see cref="M:System.Xml.XmlReader.Read"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.ReadAttributeValue">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.ReadInnerXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadInnerXml"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.ReadOuterXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadOuterXml"/></summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.ResolveEntity">
            <summary>See <see cref="M:System.Xml.XmlReader.Read"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.AttributeCount">
            <summary>See <see cref="P:System.Xml.XmlReader.AttributeCount"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.BaseURI">
            <summary>See <see cref="P:System.Xml.XmlReader.BaseURI"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Depth">
            <summary>See <see cref="P:System.Xml.XmlReader.Depth"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.EOF">
            <summary>See <see cref="P:System.Xml.XmlReader.EOF"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.HasValue">
            <summary>See <see cref="P:System.Xml.XmlReader.HasValue"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.IsDefault">
            <summary>See <see cref="P:System.Xml.XmlReader.IsDefault"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.IsEmptyElement">
            <summary>See <see cref="P:System.Xml.XmlReader.IsDefault"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Item(System.String,System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String,System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Item(System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Item(System.Int32)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.Int32)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.LocalName">
            <summary>See <see cref="P:System.Xml.XmlReader.LocalName"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Name">
            <summary>See <see cref="P:System.Xml.XmlReader.Name"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.NamespaceURI">
            <summary>See <see cref="P:System.Xml.XmlReader.NamespaceURI"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.NameTable">
            <summary>See <see cref="P:System.Xml.XmlReader.NameTable"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.NodeType">
            <summary>See <see cref="P:System.Xml.XmlReader.NodeType"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Prefix">
            <summary>See <see cref="P:System.Xml.XmlReader.Prefix"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.QuoteChar">
            <summary>See <see cref="P:System.Xml.XmlReader.QuoteChar"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.ReadState">
            <summary>See <see cref="P:System.Xml.XmlReader.ReadState"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.Value">
            <summary>See <see cref="P:System.Xml.XmlReader.Value"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.XmlLang">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlLang"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathIteratorReader.FakedRootReader.XmlSpace">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlSpace"/></summary>
        </member>
        <member name="T:Mvp.Xml.Common.XmlPrefix">
            <summary>
            Represents a mapping between a prefix and a namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlPrefix.#ctor(System.String,System.String)">
            <summary>
            Creates the prefix mapping.
            </summary>
            <param name="prefix">Prefix associated with the namespace.</param>
            <param name="ns">Namespace to associate with the prefix.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlPrefix.#ctor(System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Creates the prefix mapping, using atomized strings from the 
            <paramref name="nameTable"/> for faster lookups and comparisons.
            </summary>
            <param name="prefix">Prefix associated with the namespace.</param>
            <param name="ns">Namespace to associate with the prefix.</param>
            <param name="nameTable">The name table to use to atomize strings.</param>
            <remarks>
            This is the recommended way to construct this class, as it uses the 
            best approach to handling strings in XML.
            </remarks>
        </member>
        <member name="P:Mvp.Xml.Common.XmlPrefix.Prefix">
            <summary>
            Gets the prefix associated with the <see cref="P:Mvp.Xml.Common.XmlPrefix.NamespaceURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlPrefix.NamespaceURI">
            <summary>
            Gets the namespace associated with the <see cref="P:Mvp.Xml.Common.XmlPrefix.Prefix"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter">
            <summary>
            <see cref="T:System.Xml.XmlWriter"/> implementation able to substitute characters appearing in text or attribute nodes.
            For character mapping semantics see http://www.w3.org/TR/xslt20/#character-maps.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="T:Mvp.Xml.Common.XmlWrappingWriter">
            <summary>
            Base <see cref="T:System.Xml.XmlWriter"/> that can be use to create new writers
            by wrapping existing ones.
            </summary>
            <remarks>
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XmlWrappingWriter"/>.
            </summary>
            <param name="baseWriter">The underlying writer this instance will wrap.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.Close">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.Close"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.Dispose(System.Boolean)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.Flush">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.Flush"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.LookupPrefix(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.LookupPrefix(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteCData(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteCData(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteCharEntity(System.Char)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteComment(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteComment(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteEndAttribute">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteEndAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteEndDocument">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteEndDocument"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteEndElement">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteEntityRef(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteEntityRef(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteFullEndElement">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteFullEndElement"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteRaw(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteRaw(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteStartDocument">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartDocument"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteStartDocument(System.Boolean)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteString(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteString(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Boolean)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.DateTime)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.DateTime)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Decimal)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Decimal)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Double)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Double)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Int64)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Object)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.Single)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.Single)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteValue(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteValue(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingWriter.WriteWhitespace(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingWriter.BaseWriter">
            <summary>
            Gets or sets the underlying writer this instance is wrapping.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingWriter.Settings">
            <summary>
            See <see cref="P:System.Xml.XmlWriter.Settings"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingWriter.WriteState">
            <summary>
            See <see cref="P:System.Xml.XmlWriter.WriteState"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingWriter.XmlLang">
            <summary>
            See <see cref="P:System.Xml.XmlWriter.XmlLang"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingWriter.XmlSpace">
            <summary>
            See <see cref="P:System.Xml.XmlWriter.XmlSpace"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter.#ctor(System.Xml.XmlWriter,System.Collections.Generic.Dictionary{System.Char,System.String})">
            <summary>
            Creates new instance of the <see cref="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter"/>
            with given base <see cref="T:System.Xml.XmlWriter"/> and charcter mapping.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter.#ctor(Mvp.Xml.Common.Xsl.CharacterMappingXmlReader,System.Xml.XmlWriter)">
            <summary>
            /// Creates new instance of the <see cref="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter"/>
            with given base <see cref="T:System.Xml.XmlWriter"/> and <see cref="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader"/>.
            </summary>
            <remarks>
            <see cref="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader"/> paramter is used to get character mapping
            information.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter.WriteString(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteString(System.String)"/>.
            </summary>        
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader">
            <summary>
            <see cref="T:System.Xml.XmlReader"/> implementation able to read and filter out XSLT 2.0-like character map declarations
            from XSLT stylesheets.
            For character mapping semantics see http://www.w3.org/TR/xslt20/#character-maps.
            The only deviation from XSLT 2.0 is that "output", "character-map" and "output-character" elements
            must be in the "http://www.xmllab.net/nxslt" namespace:
            <pre>
            &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:nxslt="http://www.xmllab.net/nxslt"&gt;
               &lt;nxslt:output use-character-maps="testmap"/&gt;
               &lt;nxslt:character-map name="testmap"&gt;
                    &lt;nxslt:output-character character=" " string="&amp;nbsp;" /&gt;
               &lt;/nxslt:character-map&gt;
            </pre>
            When reading is done, resulting compiled character map can be compiled calling 
            <see cref="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader.CompileCharacterMapping"/> method.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="T:Mvp.Xml.Common.XmlWrappingReader">
            <summary>
            Base <see cref="T:System.Xml.XmlReader"/> that can be use to create new readers by 
            wrapping existing ones.
            </summary>
            <remarks>
            Supports <see cref="T:System.Xml.IXmlLineInfo"/> if the underlying reader supports it.
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XmlWrappingReader"/>.
            </summary>
            <param name="baseReader">The underlying reader this instance will wrap.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.Dispose(System.Boolean)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.Read">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Read"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.Close">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Close"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.GetAttribute(System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.GetAttribute(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.GetAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.LookupNamespace(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.MoveToAttribute(System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.MoveToAttribute(System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.MoveToAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.MoveToElement">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToElement"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.MoveToFirstAttribute">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.MoveToNextAttribute">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.ReadAttributeValue">
            <summary>
            See <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.ResolveEntity">
            <summary>
            See <see cref="M:System.Xml.XmlReader.ResolveEntity"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
            <summary>
            See <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlWrappingReader.HasLineInfo">
            <summary>
            See <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.BaseReader">
            <summary>
            Gets or sets the underlying reader this instance is wrapping.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.CanReadBinaryContent">
            <summary>
            See <see cref="P:System.Xml.XmlReader.CanReadBinaryContent"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.CanReadValueChunk">
            <summary>
            See <see cref="P:System.Xml.XmlReader.CanReadValueChunk"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.CanResolveEntity">
            <summary>
            See <see cref="P:System.Xml.XmlReader.CanResolveEntity"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.AttributeCount">
            <summary>
            See <see cref="P:System.Xml.XmlReader.AttributeCount"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.BaseURI">
            <summary>
            See <see cref="P:System.Xml.XmlReader.BaseURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Depth">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Depth"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.EOF">
            <summary>
            See <see cref="P:System.Xml.XmlReader.EOF"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.HasValue">
            <summary>
            See <see cref="P:System.Xml.XmlReader.HasValue"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.IsDefault">
            <summary>
            See <see cref="P:System.Xml.XmlReader.IsDefault"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.IsEmptyElement">
            <summary>
            See <see cref="P:System.Xml.XmlReader.IsEmptyElement"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Item(System.Int32)">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Item(System.String)">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Item(System.String)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Item(System.String,System.String)">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Item(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.LocalName">
            <summary>
            See <see cref="P:System.Xml.XmlReader.LocalName"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Name">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.NamespaceURI">
            <summary>
            See <see cref="P:System.Xml.XmlReader.NamespaceURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.NameTable">
            <summary>
            See <see cref="P:System.Xml.XmlReader.NameTable"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.NodeType">
            <summary>
            See <see cref="P:System.Xml.XmlReader.NodeType"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Prefix">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Prefix"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.QuoteChar">
            <summary>
            See <see cref="P:System.Xml.XmlReader.QuoteChar"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.ReadState">
            <summary>
            See <see cref="P:System.Xml.XmlReader.ReadState"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.Value">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Value"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.XmlLang">
            <summary>
            See <see cref="P:System.Xml.XmlReader.XmlLang"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.XmlSpace">
            <summary>
            See <see cref="P:System.Xml.XmlReader.XmlSpace"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.LineNumber">
            <summary>
            See <see cref="P:System.Xml.IXmlLineInfo.LineNumber"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlWrappingReader.LinePosition">
            <summary>
            See <see cref="P:System.Xml.IXmlLineInfo.LinePosition"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates new instance of the <see cref="T:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader"/> with given
            base <see cref="T:System.Xml.XmlReader"/>.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader.Read">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Read"/>.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMappingXmlReader.CompileCharacterMapping">
            <summary>
            Compiles character map.
            </summary>        
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.CharacterMapping">
            <summary>
            Represents compiled collection of XSLT 2.0 Character map, see http://www.w3.org/TR/xslt20/#character-maps.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMapping.AddCharacterMap(System.String,Mvp.Xml.Common.Xsl.CharacterMap)">
            <summary>
            Adds mapping for given character.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMapping.Compile(System.Collections.Generic.List{System.String})">
            <summary>
            Recursive expansion of character maps, removing unused. 
            </summary>        
        </member>
        <member name="T:Mvp.Xml.Exslt.GDNRegularExpressions">
            <summary>
            This class implements additional functions in the http://gotdotnet.com/exslt/regular-expressions namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNRegularExpressions.tokenize(System.String,System.String)">
            <summary>
            Implements the following function 
            	node-set tokenize(string, string)
            </summary>
            <param name="str"></param>
            <param name="regexp"></param>
            <returns>This function breaks the input string into a sequence of strings, 
            treating any substring that matches the regexp as a separator. 
            The separators themselves are not returned. 
            The matching strings are returned as a set of 'match' elements.</returns>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNRegularExpressions.tokenize(System.String,System.String,System.String)">
            <summary>
            Implements the following function 
            	node-set tokenize(string, string, string)
            </summary>
            <param name="str"></param>
            <param name="regexp"></param>		
            <param name="flags"></param>
            <returns>This function breaks the input string into a sequence of strings, 
            treating any substring that matches the regexp as a separator. 
            The separators themselves are not returned. 
            The matching strings are returned as a set of 'match' elements.</returns>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.XPathVariable">
            <summary>
            Represents a variable to use in dynamic XPath expression 
            queries.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathVariable.#ctor(System.String,System.Object)">
            <summary>
            Initializes the new variable.
            </summary>
            <param name="name">The name to assign to the variable.</param>
            <param name="value">The variable value.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathVariable.Equals(System.Object)">
            <summary>
            Checks equality of two variables. They are equal 
            if both their <see cref="P:Mvp.Xml.Common.XPath.XPathVariable.Name"/> and their <see cref="P:Mvp.Xml.Common.XPath.XPathVariable.Value"/> 
            are equal.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathVariable.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathVariable.op_Equality(Mvp.Xml.Common.XPath.XPathVariable,Mvp.Xml.Common.XPath.XPathVariable)">
            <summary>
            Checks equality of two variables. They are equal 
            if both their <see cref="P:Mvp.Xml.Common.XPath.XPathVariable.Name"/> and their <see cref="P:Mvp.Xml.Common.XPath.XPathVariable.Value"/> 
            are equal.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathVariable.op_Inequality(Mvp.Xml.Common.XPath.XPathVariable,Mvp.Xml.Common.XPath.XPathVariable)">
            <summary>
            Checks equality of two variables. They are not equal 
            if both their <see cref="P:Mvp.Xml.Common.XPath.XPathVariable.Name"/> and their <see cref="P:Mvp.Xml.Common.XPath.XPathVariable.Value"/> 
            are different.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathVariable.Name">
            <summary>
            Gets the variable name.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathVariable.Value">
            <summary>
            Gets the variable value.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XmlFirstUpperReader">
            <summary>
            Implements an <see cref="T:System.Xml.XmlTextReader"/> that turns the 
            first letter of incoming elements and attributes into uppercase.
            </summary>
            <remarks>
            To be used in conjunction with <see cref="T:Mvp.Xml.Common.XmlFirstLowerWriter"/> for 
            serialization.
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            See http://weblogs.asp.net/cazzu/archive/2004/05/10/129106.aspx.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.IO.Stream)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.IO.TextReader)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String,System.IO.Stream)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String,System.IO.TextReader)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
            <summary>
            See <see cref="T:System.Xml.XmlTextReader"/> constructor overloads.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstUpperReader.MoveToAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFirstUpperReader.Item(System.String,System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String,System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFirstUpperReader.Item(System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFirstUpperReader.LocalName">
            <summary>See <see cref="P:System.Xml.XmlReader.LocalName"/></summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFirstUpperReader.Name">
            <summary>See <see cref="P:System.Xml.XmlReader.Name"/></summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.Pointer">
            <summary>
            Abstract XPointer pointer.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.Pointer.Compile(System.String)">
            <summary>
            Parses XPointer pointer and compiles it into
            an instance of <see cref="T:Mvp.Xml.XPointer.Pointer"/> class.
            </summary>
            <param name="xpointer">XPointer pointer</param>
            <returns>Parsed and compiled XPointer</returns>
        </member>
        <member name="M:Mvp.Xml.XPointer.Pointer.Evaluate(System.Xml.XPath.XPathNavigator)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer and returns 
            iterator over pointed nodes.
            </summary>
            <param name="nav">Navigator to evaluate the 
            <see cref="N:Mvp.Xml.XPointer"/> on.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNodeIterator"/> over pointed nodes. Note - this iterator is moved to the first node already.</returns>	    					
        </member>
        <member name="T:Mvp.Xml.XInclude.TextUtils">
            <summary>
            Text inclusion related utility methods.	
            </summary>
            <author>Oleg Tkachenko, http://www.xmllab.net</author>
        </member>
        <member name="M:Mvp.Xml.XInclude.TextUtils.CheckForNonXmlChars(System.String)">
            <summary>
            Checks string for a presense of characters, 
            not permitted in XML 1.0 documents.
            </summary>
            <param name="str">Input string to check.</param>
            <exception cref="T:Mvp.Xml.XInclude.NonXmlCharacterException">Given string contains a character,
            forbidden in XML 1.0.</exception>        
        </member>
        <member name="M:Mvp.Xml.XInclude.TextUtils.CheckAcceptValue(System.String)">
            <summary>
            Checks value of the 'accept' attribute for validity.
            Characters must be in #x20 through #x7E range.
            </summary>        
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltStrings">
            <summary>
            Implements the functions in the http://exslt.org/strings namespace 
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.tokenize(System.String,System.String)">
            <summary>
            Implements the following function 
            	node-set tokenize(string, string)
            </summary>
            <param name="str"></param>
            <param name="delimiters"></param>				
            <returns>This function breaks the input string into a sequence of strings, 
            treating any character in the list of delimiters as a separator. 
            The separators themselves are not returned. 
            The tokens are returned as a set of 'token' elements.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.tokenize(System.String)">
            <summary>
            Implements the following function 
            	node-set tokenize(string)
            </summary>
            <param name="str"></param>		
            <returns>This function breaks the input string into a sequence of strings, 
            using the whitespace characters as a delimiter. 
            The separators themselves are not returned. 
            The tokens are returned as a set of 'token' elements.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.replace(System.String,System.String,System.String)">
            <summary>
            Implements the following function 
            	string replace(string, string, string) 
            </summary>
            <param name="str"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
            <remarks>This function has completely diffeerent semantics from the EXSLT function. 
            The description of the EXSLT function is confusing and furthermore no one has implemented
            the described semantics which implies that others find the method problematic. Instead
            this function is straightforward, it replaces all occurrences of oldValue with 
            newValue</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.padding(System.Int32)">
            <summary>
            Implements the following function 
            	string padding(number)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.padding(System.Int32,System.String)">
            <summary>
            Implements the following function 
            	string padding(number, string)
            </summary>		
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.split(System.String)">
            <summary>
            Implements the following function 
            	node-set split(string)
            </summary>
            <param name="str"></param>
            <remarks>This function breaks the input string into a sequence of strings, 
            using the space character as a delimiter. 
            The space character itself is never returned not even when there are 
            adjacent space characters. 
            </remarks>
            <returns>The tokens are returned as a set of 'token' elements</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.split(System.String,System.String)">
            <summary>
            Implements the following function 
            	node-set split(string, string)
            </summary>
            <param name="str"></param>
            <param name="delimiter"></param>
            <remarks>This function breaks the input string into a sequence of strings, 
            using the space character as a delimiter. 
            The space character itself is never returned not even when there are 
            adjacent space characters. 
            </remarks>
            <returns>The tokens are returned as a set of 'token' elements</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.concat(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
            	string concat(node-set)
            </summary>
            <param name="nodeset"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.align(System.String,System.String,System.String)">
            <summary>
            Implements the following function
                string str:align(string, string, string)
            </summary>
            <param name="str">String to align</param>
            <param name="padding">String, within which to align</param>
            <param name="alignment">left/right/center</param>
            <returns>Aligned string.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.align(System.String,System.String)">
            <summary>
            Implements the following function
                string str:align(string, string)
            </summary>
            <param name="str">String to align</param>
            <param name="padding">String, within which to align</param>
            <returns>Aligned to left string.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.encodeUri_RENAME_ME(System.String,System.Boolean)">
            <summary>
            This wrapper method will be renamed during custom build
            to provide conformant EXSLT function name.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.encodeUri_RENAME_ME(System.String,System.Boolean,System.String)">
            <summary>
            This wrapper method will be renamed during custom build
            to provide conformant EXSLT function name.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.encodeUri(System.String,System.Boolean)">
            <summary>
            Implements the following function
                 string str:encode-uri(string, string)
            </summary>
            <param name="str">String to encode</param>
            <param name="encodeReserved">If true, will encode even the [RFC 2396] 
            and [RFC 2732] "reserved characters".</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.encodeUri(System.String,System.Boolean,System.String)">
            <summary>
            Implements the following function
                 string str:encode-uri(string, string, string)
            </summary>
            <param name="str">String to encode</param>
            <param name="encodeReserved">If true, will encode even the 
            [RFC 2396] and [RFC 2732] "reserved characters"</param>
            <param name="encoding">A character encoding to use</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.encodeUriImpl(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Implements the following function
                 string str:encode-uri(string, string, string)
            </summary>
            <param name="str">String to encode</param>
            <param name="encodeReserved">If true, will encode even the 
            [RFC 2396] and [RFC 2732] "reserved characters"</param>
            <param name="enc">A character encoding to use</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.decodeUri_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build
            to provide conformant EXSLT function name.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.decodeUri_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build
            to provide conformant EXSLT function name.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.decodeUri(System.String)">
            <summary>
            Implements the following function
                 string str:decode-uri(string)
            </summary>
            <param name="str">String to decode</param>        
            <returns>The decoded string</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.decodeUri(System.String,System.String)">
            <summary>
            Implements the following function
                 string str:decode-uri(string, string)
            </summary>
            <param name="str">String to decode</param>        
            <param name="encoding">A character encoding to use</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltStrings.decodeUriImpl(System.String,System.Text.Encoding)">
            <summary>
            Implementation for 
              string str:decode-uri(string, string)
            </summary>
            <param name="str">String to decode</param>        
            <param name="enc">A character encoding to use</param>
            <returns>The decoded string</returns>
        </member>
        <member name="T:Mvp.Xml.Common.Serialization.StringSorter">
            <summary>
            Helper class to simpify sorting
            strings (Not really necessary in Whidbey).
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.StringSorter.#ctor">
            <summary>
            Helper class to sort strings alphabetically
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.StringSorter.AddString(System.String)">
            <summary>
            Add a string to sort
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.StringSorter.GetOrderedArray">
            <summary>
            Sort the strings that were added by calling
            <see cref="M:Mvp.Xml.Common.Serialization.StringSorter.AddString(System.String)"/>
            </summary>
            <returns>A sorted string array.</returns>
        </member>
        <member name="T:Mvp.Xml.Common.Serialization.CacheKeyFactory">
            <summary>
            The CacheKeyFactory extracts a unique signature
            to identify each instance of an XmlSerializer
            in the cache.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Serialization.CacheKeyFactory.MakeKey(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            Creates a unique signature for the passed
            in parameter. MakeKey normalizes array content
            and the content of the XmlAttributeOverrides before
            creating the key.
            </summary>
            <param name="type"></param>
            <param name="overrides"></param>
            <param name="types"></param>
            <param name="root"></param>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="T:Mvp.Xml.XPointer.SchemaBasedPointer">
            <summary>
            SchemaBased XPointer pointer.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.SchemaBasedPointer.#ctor(System.Collections.Generic.IList{Mvp.Xml.XPointer.PointerPart},System.String)">
            <summary>
            Creates scheme based XPointer given list of pointer parts.
            </summary>
            <param name="parts">List of pointer parts</param>
            <param name="xpointer">String representation of the XPointer 
            (for error diagnostics)</param>
        </member>
        <member name="M:Mvp.Xml.XPointer.SchemaBasedPointer.Evaluate(System.Xml.XPath.XPathNavigator)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer and returns 
            iterator over pointed nodes.
            </summary>
            <param name="nav">XPathNavigator to evaluate the 
            <see cref="N:Mvp.Xml.XPointer"/> on.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNodeIterator"/> over pointed nodes</returns>	    					
        </member>
        <member name="T:Mvp.Xml.XPointer.ElementSchemaPointerPart">
            <summary>
            element() scheme based <see cref="N:Mvp.Xml.XPointer"/> pointer part.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.PointerPart">
            <summary>
            Part of SchemaBased <see cref="N:Mvp.Xml.XPointer"/> pointer.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.PointerPart.Evaluate(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer part and returns pointed nodes.
            </summary>
            <param name="doc">Document to evaluate pointer part on</param>
            <param name="nm">Namespace manager</param>
            <returns>Pointed nodes</returns>		    
        </member>
        <member name="M:Mvp.Xml.XPointer.ElementSchemaPointerPart.Evaluate(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer part and returns pointed nodes.
            </summary>
            <param name="doc">Document to evaluate pointer part on</param>
            <param name="nm">Namespace manager</param>
            <returns>Pointed nodes</returns>
        </member>
        <member name="M:Mvp.Xml.XPointer.ElementSchemaPointerPart.ParseSchemaData(Mvp.Xml.XPointer.XPointerLexer)">
            <summary>
            Parses element() based pointer part and builds instance of <c>ElementSchemaPointerPart</c> class.
            </summary>
            <param name="lexer">Lexical analizer.</param>
            <returns>Newly created <c>ElementSchemaPointerPart</c> object.</returns>
        </member>
        <member name="P:Mvp.Xml.XPointer.ElementSchemaPointerPart.XPath">
            <summary>
            Equivalent XPath expression.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.OutputMethod">
            <summary>
            XSLT output method enumeration, see W3C XSLT 1.0 Recommendation at 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>.    
            </summary>
            <remarks>Only <c>xml</c> and <c>text</c> methods are supported by this version of 
            the <c>MultiXmlTextWriter</c>.</remarks>
        </member>
        <member name="T:Mvp.Xml.Exslt.OutputState">
            <summary>
            This class represents redirected output state and properties.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Exslt.OutputState.#ctor">
            <summary>
            Creates new <c>OutputState</c> with default properties values:
            UTF8 encoding, no indentation, nonstandalone document, XML output
            method.
            </summary>                                    
        </member>
        <member name="M:Mvp.Xml.Exslt.OutputState.InitWriter(System.Xml.XmlResolver)">
            <summary>
            Initializes the writer to write redirected output. 
            </summary>              
            <remarks>Depending on the <c>method</c> attribute value, 
            <c>XmlTextWriter</c> or <c>StreamWriter</c> is created. 
            <c>XmlTextWriter</c> is used for outputting XML and  
            <c>StreamWriter</c> - for plain text.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.OutputState.CloseWriter">
            <summary>
            Closes the writer that was used to write redirected output.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.Standalone">
            <summary>
            Specifies whether the result document should be written with 
            a standalone XML document declaration.
            </summary>
            <value>Standalone XML declaration as per W3C XSLT 1.0 Recommendation (see 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>
            for more info).</value>
            <remarks>The property does not affect output while output method is <c>text</c>.</remarks>            
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.Method">
            <summary>
            Specifies output method.
            </summary>
            <value>Output Method as per W3C XSLT 1.0 Recommendation (see 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>
            for more info).</value>        
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.Href">
            <summary>
            Specifies the URI where the result document should be written to.
            </summary>                            
            <value>Absolute or relative URI of the output document.</value>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.Encoding">
            <summary>
            Specifies the preferred character encoding of the result document.
            </summary>
            <value>Output encoding as per W3C XSLT 1.0 Recommendation (see 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>
            for more info).</value>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.Indent">
            <summary>
            Specifies whether the result document should be written in the 
            indented form.
            </summary>
            <value>Output document formatting as per W3C XSLT 1.0 Recommendation (see 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>
            for more info).</value>
            <remarks>The property does not affect output while output method is <c>text</c>.</remarks>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.PublicDoctype">
            <summary>
            Specifies the public identifier to be used in the document 
            type declaration.
            </summary>
            <value>Public part of the output document type definition as per W3C XSLT 1.0 Recommendation (see 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>
            for more info).</value>
            <remarks>The property does not affect output while output method is <c>text</c>.</remarks>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.SystemDoctype">
            <summary>
            Specifies the system identifier to be used in the document 
            type declaration.
            </summary>
            <value>System part of the output document type definition as per W3C XSLT 1.0 Recommendation (see 
            <a href="http://www.w3.org/TR/xslt.html#output">http://www.w3.org/TR/xslt.html#output</a>
            for more info).</value>
            <remarks>The property does not affect output while output method is <c>text</c>.</remarks>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.XmlWriter">
            <summary>
            Actual <c>XmlTextWriter</c> used to write the redirected 
            result document.
            </summary>              
            <value><c>XmlWriter</c>, which is used to write the output document in XML method.</value>                      
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.TextWriter">
            <summary>
            Actual <c>TextWriter</c> used to write the redirected 
            result document in text output method.
            </summary>                                    
            <value><c>StreamWriter</c>, which is used to write the output document in text method.</value>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.Depth">
            <summary>
            Tree depth (used to detect end tag of the <c>exsl:document</c>).
            </summary>
            <value>Current output tree depth.</value>
        </member>
        <member name="P:Mvp.Xml.Exslt.OutputState.OmitXmlDeclaration">
            <summary>
            Specifies whether the XSLT processor should output an XML declaration.        
            </summary>        
        </member>
        <member name="T:Mvp.Xml.Common.XmlFragmentStream">
            <summary>
            Allows streams without a root element (i.e. multiple document 
            fragments) to be passed to an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <remarks>
            <para>
            This class is obsolete. Use <see cref="T:Mvp.Xml.Common.XmlFragmentReader"/> instead.
            </para>
            A faked root element is added at the stream 
            level to enclose the fragments, which can be customized 
            using the overloaded constructors.
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            See: http://weblogs.asp.net/cazzu/archive/2004/04/23/119263.aspx.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes the class with the underlying stream to use, and 
            uses the default &lt;root&gt; container element. 
            </summary>
            <param name="innerStream">The stream to read from.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes the class with the underlying stream to use, with 
            a custom root element. 
            </summary>
            <param name="innerStream">The stream to read from.</param>
            <param name="rootName">Custom root element name to use.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes the class with the underlying stream to use, with 
            a custom root element. 
            </summary>
            <param name="innerStream">The stream to read from.</param>
            <param name="rootName">Custom root element name to use.</param>
            <param name="ns">The namespace of the root element.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.Close">
            <summary>See <see cref="M:System.IO.Stream.Close"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.Flush">
            <summary>See <see cref="M:System.IO.Stream.Flush"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>See <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.SetLength(System.Int64)">
            <summary>See <see cref="M:System.IO.Stream.SetLength(System.Int64)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>See <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>See <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentStream.CanRead">
            <summary>See <see cref="P:System.IO.Stream.CanRead"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentStream.CanSeek">
            <summary>See <see cref="P:System.IO.Stream.CanSeek"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentStream.CanWrite">
            <summary>See <see cref="P:System.IO.Stream.CanWrite"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentStream.Length">
            <summary>See <see cref="P:System.IO.Stream.Length"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentStream.Position">
            <summary>See <see cref="P:System.IO.Stream.Position"/>.</summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltMath">
            <summary>
            This class implements the EXSLT functions in the http://exslt.org/math namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.min(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               number min(node-set)
            </summary>
            <param name="iterator"></param>
            <returns></returns>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.max(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               number max(node-set)
            </summary>
            <param name="iterator"></param>
            <returns></returns>		
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.highest(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               node-set highest(node-set)
            </summary>
            <param name="iterator">The input nodeset</param>
            <returns>All the nodes that contain the max value in the nodeset</returns>		
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.lowest(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               node-set lowest(node-set)
            </summary>
            <param name="iterator">The input nodeset</param>
            <returns>All the nodes that contain the min value in the nodeset</returns>		
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.abs(System.Double)">
            <summary>
             Implements the following function 
                number abs(number)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.sqrt(System.Double)">
            <summary>
             Implements the following function 
                number sqrt(number)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.power(System.Double,System.Double)">
            <summary>
             Implements the following function 
                number power(number, number)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.log(System.Double)">
            <summary>
             Implements the following function 
                number log(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.constant(System.String,System.Double)">
            <summary>
             Implements the following function 
                number constant(string, number)
            </summary>        
            <returns>The specified constant or NaN</returns>
            <remarks>This method only supports the constants 
            E and PI. Also the precision parameter is ignored.</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.random">
            <summary>
             Implements the following function 
                number random()
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.sin(System.Double)">
            <summary>
             Implements the following function 
                number sin(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.asin(System.Double)">
            <summary>
             Implements the following function 
                number asin(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.cos(System.Double)">
            <summary>
             Implements the following function 
                number cos(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.acos(System.Double)">
            <summary>
             Implements the following function 
                number acos(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.tan(System.Double)">
            <summary>
             Implements the following function 
                number tan(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.atan(System.Double)">
            <summary>
             Implements the following function 
                number atan(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.atan2(System.Double,System.Double)">
            <summary>
             Implements the following function 
                number atan2(number, number)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltMath.exp(System.Double)">
            <summary>
             Implements the following function 
                number exp(number)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerSchemaPointerPart">
            <summary>
            xpointer() scheme based XPointer pointer part.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerSchemaPointerPart.Evaluate(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer part and returns pointed nodes.
            </summary>
            <param name="doc">Document to evaluate pointer part on</param>
            <param name="nm">Namespace manager</param>
            <returns>Pointed nodes</returns>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerSchema">
            <summary>
            XPointer scheme.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerParser">
            <summary>
            XPointer parser.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.ShorthandPointer">
            <summary>
            Shorthand XPointer pointer.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.ShorthandPointer.#ctor(System.String)">
            <summary>
            Creates shorthand XPointer given bare name.
            </summary>
            <param name="n">Shorthand (bare name)</param>
        </member>
        <member name="M:Mvp.Xml.XPointer.ShorthandPointer.Evaluate(System.Xml.XPath.XPathNavigator)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer and returns 
            iterator over pointed nodes.
            </summary>
            <remarks>Note, that returned XPathNodeIterator is already moved once.</remarks>
            <param name="nav">XPathNavigator to evaluate the 
            <see cref="N:Mvp.Xml.XPointer"/> on.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNodeIterator"/> over pointed nodes</returns>	    					
        </member>
        <member name="T:Mvp.Xml.Exslt.GDNMath">
            <summary>
            This class implements addditional functions in the http://gotdotnet.com/exslt/math namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNMath.avg(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               number avg(node-set)
            </summary>
            <param name="iterator"></param>
            <returns>The average of all the value of all the nodes in the 
            node set</returns>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltNamespaces">
            <summary>
            Exslt (and other) namespaces constants.
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.DatesAndTimes">
            <summary>EXSLT Dates and Times module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.Math">
            <summary>EXSLT Math module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.Random">
            <summary>EXSLT Random module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.RegularExpressions">
            <summary>EXSLT Regexp module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.Sets">
            <summary>EXSLT Sets module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.Strings">
            <summary>EXSLT Strings module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.GDNDatesAndTimes">
            <summary>GotDotNet Dates and Times module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.GDNMath">
            <summary>GotDotNet Math module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.GDNRegularExpressions">
            <summary>GotDotNet Regexp module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.GDNSets">
            <summary>GotDotNet Sets module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.GDNStrings">
            <summary>GotDotNet Strings module namespace</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltNamespaces.GDNDynamic">
            <summary>GotDotNet Dynamic module namespace</summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.XPathDocumentWriter">
            <summary>
            <see cref="T:System.Xml.XmlWriter"/> that can produce an 
            <see cref="T:System.Xml.XPath.XPathDocument"/> without the need 
            to parse XML.
            </summary>
            <remarks>
            Using this writer whenever you need to perform 
            fast chained transformations. Using this class 
            avoids reparsing of the intermediate output, 
            yielding lower memory and CPU usage.
            <para>
            Future versions of <see cref="T:System.Xml.XPath.XPathDocument"/> may 
            offer this functionality out of the box.
            </para>
            <para>
            <b>Important: </b> this class requires unrestricted 
            member access reflection permissions in order to run. 
            If the Mvp.Xml assembly is installed in the GAC, it will 
            run without problems. The Mvp.Xml allows partially trusted 
            callers, so only this assembly needs to be GAC'ed. 
            </para>
            <para>
            Alternatively, you can configure .NET security policy 
            to allow the appropriate permission (see <see cref="T:System.Security.Permissions.ReflectionPermission"/>, 
            <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"/> and 
            <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess"/>).
            </para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathDocumentWriter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mvp.Xml.Common.XPath.XPathDocumentWriter"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathDocumentWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mvp.Xml.Common.XPath.XPathDocumentWriter"/> using 
            the given <paramref name="baseUri"/>.
            </summary>
            <param name="baseUri">Base URI to used to construct the <see cref="T:System.Xml.XPath.XPathDocument"/>.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathDocumentWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathDocumentWriter.Close">
            <summary>
            Closes the writer and retrieves the created <see cref="T:System.Xml.XPath.XPathDocument"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathDocumentWriter.Dispose(System.Boolean)">
            <summary>
            Never disposes the underlying writer as it's not 
            keeping in-memory state.
            </summary>
            <remarks>
            This override also avoids an exception that is thrown 
            otherwise by the base <see cref="T:System.Xml.XmlRawWriter"/> 
            being used internally.
            </remarks>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathDocumentWriter.WriteState">
            <summary>
            Reports <see cref="F:System.Xml.WriteState.Start"/> always, 
            as the underlying writer is always writing to 
            the <see cref="T:System.Xml.XPath.XPathDocument"/> directly.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XmlFirstLowerWriter">
            <summary>
            Implements an <see cref="T:System.Xml.XmlWriter"/> that turns the 
            first letter of outgoing elements and attributes into lowercase.
            </summary>
            <remarks>
            To be used in conjunction with <see cref="T:Mvp.Xml.Common.XmlFirstUpperReader"/>.
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            See http://weblogs.asp.net/cazzu/archive/2004/05/10/129106.aspx.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstLowerWriter.#ctor(System.IO.TextWriter)">
            <summary>
            See <see cref="T:System.Xml.XmlTextWriter"/> ctors.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstLowerWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            See <see cref="T:System.Xml.XmlTextWriter"/> ctors.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstLowerWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            See <see cref="T:System.Xml.XmlTextWriter"/> ctors.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstLowerWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstLowerWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFirstLowerWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XhtmlWriter">
            <summary>
            XHTML writer. Writes XML using the HTML compatibility guidelines defined in the XHTML 1.0 specification.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XhtmlWriter.#ctor(System.Xml.XmlWriter)">
            <summary>
            Creates new instance of the <see cref="T:Mvp.Xml.Common.XhtmlWriter"/>.
            </summary>
            <param name="baseWriter">Base <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XhtmlWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)"/>.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XhtmlWriter.WriteEndElement">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XhtmlWriter.WriteFullEndElement">
            <summary>
            See <see cref="M:System.Xml.XmlWriter.WriteFullEndElement"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XInclude.XIncludingReaderState">
            <summary>
            XIncludingReader state machine.    
            </summary>
            <author>Oleg Tkachenko, http://www.xmllab.net</author>
        </member>
        <member name="T:Mvp.Xml.XInclude.XIncludeKeywords">
            <summary>
            XInclude syntax keyword collection.	
            </summary>
            <author>Oleg Tkachenko, http://www.xmllab.net</author>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.MvpXslTransform">
            <summary>
            <para><see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> class extends capabilities of the <see cref="T:System.Xml.Xsl.XslCompiledTransform"/>
            class by adding support for transforming into <see cref="T:System.Xml.XmlReader"/>, 
            built-in vast collection of EXSLT extention functions, multiple outputs, XHTML output mode, 
            XSLT 2.0 character
            maps and transforming of <see cref="T:System.Xml.XPath.IXPathNavigable"/> along with <see cref="T:System.Xml.XmlResolver"/>.
            Also <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> class provides new improved XSL transformation API 
            by introducing concepts of <see cref="T:Mvp.Xml.Common.Xsl.IXmlTransform"/> interface, <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/>
            and <see cref="T:Mvp.Xml.Common.Xsl.XmlOutput"/>.</para>    
            </summary>
            <remarks><para><see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> class is thread-safe for Transorm() methods. I.e.
            once <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> object is loaded, you can safely call its Transform() methods
            in multiple threads simultaneously.</para>
            <para><see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> supports EXSLT extension functions from the following namespaces:<br/> 
            * http://exslt.org/common<br/>
            * http://exslt.org/dates-and-times<br/>   
            * http://exslt.org/math<br/>
            * http://exslt.org/random<br/>
            * http://exslt.org/regular-expressions<br/>
            * http://exslt.org/sets<br/>
            * http://exslt.org/strings<br/>
            * http://gotdotnet.com/exslt/dates-and-times<br/>
            * http://gotdotnet.com/exslt/math<br/>
            * http://gotdotnet.com/exslt/regular-expressions<br/>
            * http://gotdotnet.com/exslt/sets<br/>
            * http://gotdotnet.com/exslt/strings<br/>
            * http://gotdotnet.com/exslt/dynamic</para>
            <para>Multioutput (&lt;exsl:document&gt; element) is turned off by default and can 
            be turned on using <see cref="P:Mvp.Xml.Common.Xsl.MvpXslTransform.MultiOutput"/> property. Note, that multioutput is not supported
            when transfomation is done to <see cref="T:System.Xml.XmlWriter"/> or <see cref="T:System.Xml.XmlReader"/>.</para>
            <para><see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> uses XSLT extension objects and reflection and so using
            it requires FullTrust security level.</para>
            <para><see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> supports XSLT 2.0-like character map declarations.
            For character mapping semantics see <a href="http://www.w3.org/TR/xslt20/#character-maps">http://www.w3.org/TR/xslt20/#character-maps</a>.
            The only deviation from XSLT 2.0 is that "output", "character-map" and "output-character" elements
            must be in the "http://www.xmllab.net/nxslt" namespace:
            <pre>
            &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:nxslt="http://www.xmllab.net/nxslt"&gt;
               &lt;nxslt:output use-character-maps="testmap"/&gt;
               &lt;nxslt:character-map name="testmap"&gt;
                    &lt;nxslt:output-character character=" " string="&amp;nbsp;" /&gt;
               &lt;/nxslt:character-map&gt;
            </pre>
            </para>
            <para>XHTML output mode can be enforced by setting <see cref="P:Mvp.Xml.Common.Xsl.MvpXslTransform.EnforceXHTMLOutput"/> property.</para>
            <para>Author: Sergey Dubinets, Microsoft XML Team.</para>
            <para>Contributors: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="F:Mvp.Xml.Common.Xsl.MvpXslTransform.compiledTransform">
            <summary>
            Real transformation engine
            </summary>
        </member>
        <member name="F:Mvp.Xml.Common.Xsl.MvpXslTransform.supportedFunctions">
            <summary>
            Supported EXSLT functions
            </summary>
        </member>
        <member name="F:Mvp.Xml.Common.Xsl.MvpXslTransform.multiOutput">
            <summary>
            Multioutput support flag
            </summary>
        </member>
        <member name="F:Mvp.Xml.Common.Xsl.MvpXslTransform.supportCharacterMaps">
            <summary>
            XSLT 2.0 like character maps support flag.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> class. 
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> 
            class with the specified debug setting. 
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Load(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Loads and compiles the style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"/> object.
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)"/>.
            </summary>
            <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface. 
            In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"/> (typically an <see cref="T:System.Xml.XmlDocument"/>), 
            or an <see cref="T:System.Xml.XPath.XPathDocument"/> containing the style sheet.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Load(System.String)">
            <summary>
            Loads and compiles the style sheet located at the specified URI.
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)"/>.
            </summary>
            <param name="stylesheetUri">The URI of the style sheet.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Load(System.Xml.XmlReader)">
            <summary>
            Compiles the style sheet contained in the <see cref="T:System.Xml.XmlReader"/>.
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)"/>.
            </summary>
            <param name="stylesheet">An <see cref="T:System.Xml.XmlReader"/> containing the style sheet.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"/>. 
            The <see cref="T:System.Xml.XmlResolver"/> resolves any XSLT <c>import</c> or <c>include</c> elements and the 
            XSLT settings determine the permissions for the style sheet. 
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)"/>.
            </summary>                     
            <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface. 
            In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"/> (typically an <see cref="T:System.Xml.XmlDocument"/>), 
            or an <see cref="T:System.Xml.XPath.XPathDocument"/> containing the style sheet.</param>
            <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"/> to apply to the style sheet. 
            If this is a null reference (Nothing in Visual Basic), the <see cref="P:System.Xml.Xsl.XsltSettings.Default"/> setting is applied.</param>
            <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"/> used to resolve any 
            style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is a 
            null reference (Nothing in Visual Basic), external resources are not resolved.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Loads and compiles the XSLT style sheet specified by the URI. 
            The <see cref="T:System.Xml.XmlResolver"/> resolves any XSLT <c>import</c> or <c>include</c> elements and the 
            XSLT settings determine the permissions for the style sheet. 
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)"/>.
            </summary>           
            <param name="stylesheetUri">The URI of the style sheet.</param>
            <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"/> to apply to the style sheet. 
            If this is a null reference (Nothing in Visual Basic), the <see cref="P:System.Xml.Xsl.XsltSettings.Default"/> setting is applied.</param>
            <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"/> used to resolve any 
            style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is a 
            null reference (Nothing in Visual Basic), external resources are not resolved.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader"/>. 
            The <see cref="T:System.Xml.XmlResolver"/> resolves any XSLT <c>import</c> or <c>include</c> elements and the 
            XSLT settings determine the permissions for the style sheet. 
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)"/>.
            </summary>                
            <param name="stylesheet">The <see cref="T:System.Xml.XmlReader"/> containing the style sheet.</param>
            <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"/> to apply to the style sheet. 
            If this is a null reference (Nothing in Visual Basic), the <see cref="P:System.Xml.Xsl.XsltSettings.Default"/> setting is applied.</param>
            <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"/> used to resolve any 
            style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is a 
            null reference (Nothing in Visual Basic), external resources are not resolved.</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Transform(Mvp.Xml.Common.Xsl.XmlInput,System.Xml.Xsl.XsltArgumentList,Mvp.Xml.Common.Xsl.XmlOutput)">
            <summary>
            Transforms given <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> into <see cref="T:Mvp.Xml.Common.Xsl.XmlOutput"/>.
            The <see cref="T:System.Xml.Xsl.XsltArgumentList"/> provides additional runtime arguments.
            </summary>
            <param name="input">Default input XML document.</param>
            <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"/> containing the namespace-qualified 
            arguments used as input to the transform. This value can be a null reference (Nothing in Visual Basic).</param>
            <param name="output">Represents the transformation's output.</param>
            <returns>Transformation output.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Transform(Mvp.Xml.Common.Xsl.XmlInput,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms given <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> into <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="input">Default input XML document</param>
            <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"/> containing the namespace-qualified 
            arguments used as input to the transform. This value can be a null reference (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.Transform(Mvp.Xml.Common.Xsl.XmlInput,System.Xml.Xsl.XsltArgumentList,System.Boolean,System.Int32)">
            <summary>
            Transforms given <see cref="T:Mvp.Xml.Common.Xsl.XmlInput"/> into <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="input">Default input XML document</param>
            <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"/> containing the namespace-qualified 
            arguments used as input to the transform. This value can be a null reference (Nothing in Visual Basic).</param>
            <param name="multiThread">Defines in which mode (multithreaded or singlethreaded)
            this instance of XslReader will operate</param>
            <param name="initialBufferSize">Initial buffer size (number of nodes, not bytes)</param>
        </member>
        <member name="F:Mvp.Xml.Common.Xsl.MvpXslTransform.DefaultReaderSettings">
            <summary>
            Default XML Reader settings
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.GetReaderSettings(Mvp.Xml.Common.Xsl.XmlInput)">
            <summary>
            Gets XML Reader settings (customized if there is custom XML resolver)
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.TransformToWriter(Mvp.Xml.Common.Xsl.XmlInput,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
            <summary>
            Transforms to XmlWriter.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.TransformIXPathNavigable(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
            <summary>
            Transforms to IXPathNavigable.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.LoadStylesheetFromReader(System.Xml.XmlReader)">
            <summary>
            Loads XSLT stylesheet from <see cref="T:System.Xml.XmlReader"/>.
            Wraps the reader if character maps are supported.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.LoadStylesheetFromReader(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Loads XSLT stylesheet from <see cref="T:System.Xml.XmlReader"/>, with given settings and resolver.
            Wraps the reader if character maps are supported.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.AddExsltExtensionObjectsSync(System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Adds the objects that implement the EXSLT extensions to the provided argument 
            list. The extension objects added depend on the value of the SupportedFunctions
            property.
            </summary>
            <param name="list">The argument list</param>
            <returns>An XsltArgumentList containing the contents of the list passed in 
            and objects that implement the EXSLT. </returns>
            <remarks>If null is passed in then a new XsltArgumentList is constructed. </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.AddExsltExtensionObjects(System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Adds the extension objects that implement all EXSLT functions to the provided 
            argument list.
            </summary>
            <param name="list">The argument list</param>        
            <returns>An XsltArgumentList containing required EXSLT extension objects. </returns>
            <remarks>If null is passed in then a new XsltArgumentList is constructed. </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.MvpXslTransform.AddExsltExtensionObjects(System.Xml.Xsl.XsltArgumentList,Mvp.Xml.Exslt.ExsltFunctionNamespace)">
            <summary>
            Adds the extension objects that implement all EXSLT functions to the provided 
            argument list. The extension objects added depend on the value of the supportedFunctions
            argument.
            </summary>
            <param name="list">The argument list</param>
            <param name="supportedFunctions">Required EXSLT modules</param>
            <returns>An XsltArgumentList containing required EXSLT extension objects. </returns>
            <remarks>If null is passed in then a new XsltArgumentList is constructed. </remarks>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.SupportedFunctions">
            <summary>
            Bitwise enumeration used to specify which EXSLT functions should be accessible to 
            the <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> object. The default value is ExsltFunctionNamespace.All 
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.MultiOutput">
            <summary>
            Boolean flag used to specify whether multiple output (via exsl:document) is 
            supported.
            Note: This property is ignored (hence multiple output is not supported) when
            transformation is done to XmlReader or XmlWriter (use overloaded method, 
            which transforms to MultiXmlTextWriter instead).
            Note: Because of some restrictions and slight overhead this feature is
            disabled by default. If you need multiple output support, set this property to
            true before the Transform() call.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.EnforceXHTMLOutput">
            <summary>
            Enforces <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> instance to output results in XHTML format.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.SupportCharacterMaps">
            <summary>
            Boolean flag used to specify whether XSLT 2.0 character maps are
            supported.
            </summary>
            <remarks>Note: <see cref="T:Mvp.Xml.Common.Xsl.MvpXslTransform"/> is XSLT 1.0 processor, so 
            XSLT 2.0 character maps must be defined in custom "http://www.xmllab.net/nxslt"
            namespace. Here is a sample:
            &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:nxslt="http://www.xmllab.net/nxslt"&gt;
                &lt;nxslt:output use-character-maps="testmap"/&gt;
                &lt;nxslt:character-map name="testmap"&gt;
                    &lt;nxslt:output-character character="&amp;#160;" string="&amp;amp;nbsp;" /&gt;
                &lt;/nxslt:character-map&gt;
            &lt;/xsl:stylesheet&gt;
            </remarks>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.TemporaryFiles">
            <summary>
            Gets the TempFileCollection that contains the temporary files generated 
            on disk after a successful call to the Load method. 
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.OutputSettings">
            <summary>
            Gets an <see cref="T:System.Xml.XmlWriterSettings"/> object that contains the output 
            information derived from the xsl:output element of the style sheet.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.MvpXslTransform.CompiledTransform">
            <summary>
            Core XSLT engine.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.GDNDatesAndTimes">
            <summary>
            This class implements additional functions in the 
            "http://gotdotnet.com/exslt/dates-and-times" namespace.    
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.avg(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               string date2:avg(node-set)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-avg.xml  
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.min(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               string date2:min(node-set)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-min.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.max(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               string date2:max(node-set)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-max.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayAbbreviation_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayAbbreviation_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayAbbreviation(System.String)">
            <summary>
            Implements the following function 
               string date2:day-abbreviation(string)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-day-abbreviation.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The abbreviated current day name according to 
            specified culture or the empty string if the culture isn't 
            supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayAbbreviation(System.String,System.String)">
            <summary>
            Implements the following function 
               string date2:day-abbreviation(string, string)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-day-abbreviation.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The abbreviated day name of the specified date according to 
            specified culture or the empty string if the input date is invalid or
            the culture isn't supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayName_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayName_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayName(System.String,System.String)">
            <summary>
            Implements the following function 
               string date2:day-name(string, string?)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-day-name.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The day name of the specified date according to 
            specified culture or the empty string if the input date is invalid or
            the culture isn't supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.dayName(System.String)">
            <summary>
            Implements the following function 
               string date2:day-name(string, string?)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-day-name.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The day name of the current date according to 
            specified culture or the empty string if
            the culture isn't supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthAbbreviation_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthAbbreviation_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthAbbreviation(System.String)">
            <summary>
            Implements the following function 
               string date2:month-abbreviation(string)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-month-abbreviation.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The abbreviated current month name according to 
            specified culture or the empty string if the culture isn't 
            supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthAbbreviation(System.String,System.String)">
            <summary>
            Implements the following function 
               string date2:month-abbreviation(string, string)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-month-abbreviation.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The abbreviated month name of the specified date according to 
            specified culture or the empty string if the input date is invalid or
            the culture isn't supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthName_RENAME_ME(System.String,System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthName_RENAME_ME(System.String)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthName(System.String,System.String)">
            <summary>
            Implements the following function 
               string date2:month-name(string, string?)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-month-name.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The month name of the specified date according to 
            specified culture or the empty string if the input date is invalid or
            the culture isn't supported.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDatesAndTimes.monthName(System.String)">
            <summary>
            Implements the following function 
               string date2:month-name(string, string?)
            See http://www.xmland.net/exslt/doc/GDNDatesAndTimes-month-name.xml
            </summary>        
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
            <returns>The month name of the current date according to 
            specified culture or the empty string if
            the culture isn't supported.</returns>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltContextFunction">
            <summary>
            IXsltContextFunction wrapper around extension function.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator">
            <summary>
            An <see cref="T:System.Xml.XPath.XPathNodeIterator"/> that allows 
            arbitrary addition of the <see cref="T:System.Xml.XPath.XPathNavigator"/> 
            nodes that belong to the set.
            </summary>
            <remarks>
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            <para>Contributors: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator"/>
            with given initial capacity.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator"/>, 
            using the received navigator as the initial item in the set. 
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.#ctor(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator"/>
            using given list of navigators.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.#ctor(System.Xml.XPath.XPathNodeIterator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator"/>
            using given list of navigators.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.#ctor(System.Collections.Generic.List{System.Xml.XPath.XPathNavigator})">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.XPathNavigatorIterator"/>
            using given list of navigators.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Add(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds a <see cref="T:System.Xml.XPath.XPathNavigator"/> to the set.
            </summary>
            <param name="navigator">The navigator to add. It's cloned automatically.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Add(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Adds a <see cref="T:System.Xml.XPath.XPathNodeIterator"/> containing a set of navigators to add.
            </summary>
            <param name="iterator">The set of navigators to add. Each one is cloned automatically.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Add(System.Collections.Generic.IEnumerable{System.Xml.XPath.XPathNavigator})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing a set of navigators to add.
            </summary>
            <param name="navigators">The set of navigators to add. Each one is cloned automatically.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Contains(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the list contains a navigator positioned at the same 
            location as the specified XPathNavigator. This 
            method relies on the IsSamePositon() method of the XPathNavightor. 
            </summary>
            <param name="value">The object to locate in the list.</param>
            <returns>true if the object is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.ContainsValue(System.String)">
            <summary>
            Determines whether the list contains a navigator whose Value property matches
            the target value
            </summary>
            <param name="value">The value to locate in the list.</param>
            <returns>true if the value is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.RemoveAt(System.Int32)">
            <summary>
            Removes the list item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Reset">
            <summary>
            Resets the iterator.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Clone">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNodeIterator.Clone"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.XPathNavigatorIterator.MoveNext">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Count">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNodeIterator.Count"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathNavigatorIterator.Current">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNodeIterator.Current"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.XPathNavigatorIterator.CurrentPosition">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.DynamicContext">
            <summary>
            Provides the evaluation context for fast execution and custom 
            variables resolution.
            </summary>
            <remarks>
            This class is responsible for resolving variables during dynamic expression execution.
            <para>Discussed in http://weblogs.asp.net/cazzu/archive/2003/10/07/30888.aspx</para>
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.DynamicContext"/> class.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.#ctor(System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.DynamicContext"/> 
            class with the specified <see cref="T:System.Xml.NameTable"/>.
            </summary>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.#ctor(System.Xml.XmlNamespaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.#ctor(System.Xml.XmlNamespaceManager,System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.Common.XPath.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.CompareDocument(System.String,System.String)">
            <summary>
            Implementation equal to <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.LookupNamespace(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.LookupPrefix(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.Compile(System.String)">
            <summary>
            Shortcut method that compiles an expression using an empty navigator.
            </summary>
            <param name="xpath">The expression to compile</param>
            <returns>A compiled <see cref="T:System.Xml.XPath.XPathExpression"/>.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.AddVariable(System.String,System.Object)">
            <summary>
            Adds the variable to the dynamic evaluation context.
            </summary>
            <param name="name">The name of the variable to add to the context.</param>
            <param name="value">The value of the variable to add to the context.</param>
            <remarks>
            Value type conversion for XPath evaluation is as follows:
            <list type="table">
            	<listheader>
            		<term>CLR Type</term>
            		<description>XPath type</description>
            	</listheader>
            	<item>
            		<term>System.String</term>
            		<description>XPathResultType.String</description>
            	</item>
            	<item>
            		<term>System.Double (or types that can be converted to)</term>
            		<description>XPathResultType.Number</description>
            	</item>
            	<item>
            		<term>System.Boolean</term>
            		<description>XPathResultType.Boolean</description>
            	</item>
            	<item>
            		<term>System.Xml.XPath.XPathNavigator</term>
            		<description>XPathResultType.Navigator</description>
            	</item>
            	<item>
            		<term>System.Xml.XPath.XPathNodeIterator</term>
            		<description>XPathResultType.NodeSet</description>
            	</item>
            	<item>
            		<term>Others</term>
            		<description>XPathResultType.Any</description>
            	</item>
            </list>
            <note type="note">See the topic "Compile, Select, Evaluate, and Matches with 
            XPath and XPathExpressions" in MSDN documentation for additional information.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            See <see cref="T:System.Xml.Xsl.XsltContext"/>. Not used in our implementation.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.ResolveVariable(System.String,System.String)">
            <summary>
            Resolves the dynamic variables added to the context. See <see cref="T:System.Xml.Xsl.XsltContext"/>. 
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.DynamicContext.Whitespace">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.DynamicContext.DynamicVariable">
            <summary>
            Represents a variable during dynamic expression execution.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.DynamicContext.DynamicVariable.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="T:Mvp.Xml.Common.XmlNodeFactory">
            <summary>
            Creates <see cref="T:System.Xml.XmlNode"/> wrapper instances 
            for different XML APIs, for use in XML serialization.
            </summary>
            <remarks>
            <see cref="T:System.Xml.XmlNode"/> instances returned by this factory only 
            support the <see cref="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)"/> and <see cref="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)"/> 
            methods, as they are intended for use only for serialization, and to avoid 
            <see cref="T:System.Xml.XmlDocument"/> loading for fast performance. All other members 
            will throw an <see cref="T:System.NotSupportedException"/>.
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            See: http://weblogs.asp.net/cazzu/archive/2004/05/31/144922.aspx and 
            http://weblogs.asp.net/cazzu/posts/XmlMessagePerformance.aspx.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeFactory.Create(System.Object)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNode"/> wrapper for any object, 
            to be serialized through the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="value">The object to wrap.</param>
            <returns>A node that can only be used for XML serialization.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeFactory.Create(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNode"/> serializable 
            wrapper for an <see cref="T:System.Xml.XPath.XPathNavigator"/>.
            </summary>
            <param name="navigator">The navigator to wrap.</param>
            <returns>A node that can only be used for XML serialization.</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeFactory.Create(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNode"/> serializable 
            wrapper for an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The reader to wrap.</param>
            <returns>A node that can only be used for XML serialization.</returns>
            <remarks>
            After serialization, the reader is automatically closed.
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeFactory.Create(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlDocument"/> serializable 
            wrapper for an <see cref="T:System.Xml.XPath.XPathNavigator"/>.
            </summary>
            <param name="reader">The reader to wrap.</param>
            <param name="defaultAttrs">Whether default attributes should be serialized.</param>
            <returns>A document that can only be used for XML serialization.</returns>
            <remarks>
            After serialization, the reader is automatically closed.
            </remarks>
        </member>
        <member name="T:Mvp.Xml.Common.XmlNamespaces">
            <summary>
            Provides public constants for wellknown XML namespaces.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></remarks>
        </member>
        <member name="F:Mvp.Xml.Common.XmlNamespaces.Xml">
            <summary>
            The public XML 1.0 namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/2004/REC-xml-20040204/</remarks>
        </member>
        <member name="F:Mvp.Xml.Common.XmlNamespaces.XmlNs">
            <summary>
            Public Xml Namespaces specification namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Mvp.Xml.Common.XmlNamespaces.XmlNsPrefix">
            <summary>
            Public Xml Namespaces prefix. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Mvp.Xml.Common.XmlNamespaces.Xsi">
            <summary>
            XML Schema instance namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="F:Mvp.Xml.Common.XmlNamespaces.Xsd">
            <summary>
            XML 1.0 Schema namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="T:Mvp.Xml.Common.XmlFragmentReader">
            <summary>
            Wraps an <see cref="T:System.Xml.XmlReader"/> which was created to read 
            fragments (using <see cref="F:System.Xml.ConformanceLevel.Fragment"/> for 
            its <see cref="T:System.Xml.XmlReaderSettings"/>) with a "virtual" root node 
            so that it can be loaded into an <see cref="T:System.Xml.XmlDocument"/> or 
            <see cref="T:System.Xml.XPath.XPathDocument"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentReader.#ctor(System.String,System.Xml.XmlReader)">
            <summary>
            Instantiates the reader using the given <paramref name="rootElementName"/> 
            for the virtual root node.
            </summary>
            <param name="baseReader">XML fragment reader.</param>
            <param name="rootElementName">Name of the virtual root element.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentReader.#ctor(System.String,System.String,System.Xml.XmlReader)">
            <summary>
            Instantiates the reader using the given <paramref name="rootElementName"/> and 
            <paramref name="rootXmlNamespace"/> for the virtual root node.
            </summary>
            <param name="baseReader">XML fragment reader.</param>
            <param name="rootElementName">Name of the virtual root element.</param>
            <param name="rootXmlNamespace">XML namespace for the virtual root element.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentReader.#ctor(System.Xml.XmlQualifiedName,System.Xml.XmlReader)">
            <summary>
            Instantiates the reader using the given <paramref name="rootName"/> for the virtual root node.
            </summary>
            <param name="baseReader">XML fragment reader.</param>
            <param name="rootName">Qualified name of the virtual root element.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlFragmentReader.Read">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Read"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.ReadState">
            <summary>
            See <see cref="P:System.Xml.XmlReader.ReadState"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.NodeType">
            <summary>
            See <see cref="P:System.Xml.XmlReader.NodeType"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.Depth">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Depth"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.LocalName">
            <summary>
            See <see cref="P:System.Xml.XmlReader.LocalName"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.NamespaceURI">
            <summary>
            See <see cref="P:System.Xml.XmlReader.NamespaceURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.Prefix">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Prefix"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlFragmentReader.Name">
            <summary>
            See <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XmlBaseAwareXmlReader">
            <summary>
            Custom <see cref="T:System.Xml.XmlReader"/> supporting <a href="http://www.w3.org/TR/xmlbase/">XML Base</a>.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given URI.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.Xml.XmlResolver)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given URI using the given resolver.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given URI and 
            name table.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.TextReader)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given TextReader.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.IO.TextReader)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given uri and 
            TextReader.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given TextReader 
            and name table.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given uri, name table
            and TextReader.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.Stream)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given stream.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.IO.Stream)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given uri and stream.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlResolver)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given uri and stream.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given stream 
            and name table.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given stream,
            uri and name table.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.String,System.Xml.XmlReaderSettings)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given uri and <see cref="T:System.Xml.XmlReaderSettings"/>.        
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.TextReader,System.Xml.XmlReaderSettings)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given <see cref="T:System.IO.TextReader"/> and <see cref="T:System.Xml.XmlReaderSettings"/>.        
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given <see cref="T:System.IO.Stream"/> and <see cref="T:System.Xml.XmlReaderSettings"/>.        
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given <see cref="T:System.Xml.XmlReader"/> and <see cref="T:System.Xml.XmlReaderSettings"/>.        
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given 
            <see cref="T:System.IO.TextReader"/>, <see cref="T:System.Xml.XmlReaderSettings"/>
            and base uri.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
            <summary>
            Creates XmlBaseAwareXmlReader instance for given 
            <see cref="T:System.IO.Stream"/>, <see cref="T:System.Xml.XmlReaderSettings"/>
            and base uri.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Common.XmlBaseAwareXmlReader.Read">
            <summary>
            See <see cref="M:System.Xml.XmlTextReader.Read"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlBaseAwareXmlReader.BaseURI">
            <summary>
            See <see cref="P:System.Xml.XmlTextReader.BaseURI"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerLexer">
            <summary>
            XPointer lexical analyzer.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.LexUtils">
            <summary>
            Lexical utilities.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.LexUtils.IsWhitespace(System.Char)">
            <summary>
            Checks if given character is XML 1.0 whitespace character.
            </summary>        
        </member>
        <member name="T:Mvp.Xml.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.Arg_NullOrEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be null or an empty string..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.AttributeOrNamespaceInIncludeLocationError">
            <summary>
              Looks up a localized string similar to Include location identifies an attribute or namespace node!.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.CircularInclusion">
            <summary>
              Looks up a localized string similar to Circular inclusion has been detected, inclusion location: {0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.CircularInclusionLong">
            <summary>
              Looks up a localized string similar to Circular inclusion has been detected, inclusion location: {0}. In {1}, Line {2}, Position {3}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.CircumflexCharMustBeEscaped">
            <summary>
              Looks up a localized string similar to Circumflex character must be escaped in XPointer..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.CustomXmlResolverError">
            <summary>
              Looks up a localized string similar to An exception has occured during GetEntity call to custom XmlResolver..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.CustomXmlResolverReturnedNull">
            <summary>
              Looks up a localized string similar to Custom XmlResolver returned null..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.CustomXmlResolverReturnedUnsupportedType">
            <summary>
              Looks up a localized string similar to Custom XmlResolver returned object of an unsupported type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.EmptyElementSchemeXPointer">
            <summary>
              Looks up a localized string similar to Syntax error in element() scheme data: empty XPointer..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.FallbackNotChildOfInclude">
            <summary>
              Looks up a localized string similar to xi:fallback element must be direct child of xi:include element. Location: {0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.FallbackNotChildOfIncludeLong">
            <summary>
              Looks up a localized string similar to xi:fallback element must be direct child of xi:include element. Location: {0}, Line {1}, Position {2}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.FatalResourceException">
            <summary>
              Looks up a localized string similar to Resource error has occured and no fallback has been provided: {0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.FragmentIDInHref">
            <summary>
              Looks up a localized string similar to Fragment identifiers must not be used in &apos;href&apos; attribute..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.IncludeChildOfInclude">
            <summary>
              Looks up a localized string similar to xi:include element cannot be child of xi:include element. Location: {0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.IncludeChildOfIncludeLong">
            <summary>
              Looks up a localized string similar to xi:include element cannot be child of xi:include element. Location: {0}, Line {1}, Position {2}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.IndexingXPathNavigator_KeyArgumentNotString">
            <summary>
              Looks up a localized string similar to Type of the first argument of key() function must be string..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.IndexingXPathNavigator_KeyWrongArguments">
            <summary>
              Looks up a localized string similar to Wrong number of arguments of key() function..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.IntradocumentReferencesNotSupported">
            <summary>
              Looks up a localized string similar to XIncludingReader doesn&apos;t support intra-document references..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidCharForAccept">
            <summary>
              Looks up a localized string similar to &apos;accept&apos; attribute contains a character not allowed in HTTP header: 0x{0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidNameToken">
            <summary>
              Looks up a localized string similar to Invalid Name token: {0}:{1}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidToken">
            <summary>
              Looks up a localized string similar to Invalid token..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidTokenAfterShorthandPointer">
            <summary>
              Looks up a localized string similar to Invalid token after shorthand pointer..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidTokenInElementSchemeWhileClosingRoundBracketExpected">
            <summary>
              Looks up a localized string similar to Syntax error in element() scheme data: Invalid token in ChildSequence, a closing round bracket was expected..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidTokenInElementSchemeWhileNumberExpected">
            <summary>
              Looks up a localized string similar to Syntax error in element() scheme data: Invalid token in ChildSequence, a number was expected..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidTokenInXmlnsSchemeWhileEqualsSignExpected">
            <summary>
              Looks up a localized string similar to Syntax error in xmlns() scheme data: Invalid token in XmlnsSchemaData, equal sign was expected..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidTokenInXmlnsSchemeWhileNCNameExpected">
            <summary>
              Looks up a localized string similar to Syntax error in xmlns() scheme data: Invalid token in XmlnsSchemaData, NCName was expected..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.InvalidURI">
            <summary>
              Looks up a localized string similar to Invalid URI &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.IOErrorWhileFetchingResource">
            <summary>
              Looks up a localized string similar to I/O error while reading resource &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.MalformedXInclusionResult">
            <summary>
              Looks up a localized string similar to Malformed XInclusion result - xi:include element at the top level must include a single element and optional comments and PIs..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.MissingHrefAndXpointerException">
            <summary>
              Looks up a localized string similar to &apos;href&apos; or &apos;xpointer&apos; attributes can&apos;t both be omitted on xi:include element. Location: {0}.&quot;.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.MissingHrefAndXpointerExceptionLong">
            <summary>
              Looks up a localized string similar to &apos;href&apos; or &apos;xpointer&apos; attributes can&apos;t both be omitted on xi:include element. Location: {0}, Line {1}, Position {2}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.NonXmlCharacter">
            <summary>
              Looks up a localized string similar to Included document contains a character not allowed in XML: 0x{0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.NoSubresourcesIdentifiedException">
            <summary>
              Looks up a localized string similar to XPointer &apos;{0}&apos; doesn&apos;t identify any subresources..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.NotSupportedEncoding">
            <summary>
              Looks up a localized string similar to Not supported encoding &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.NullXPointer">
            <summary>
              Looks up a localized string similar to XPointer pointer cannot be null..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.OutOfMemoryWhileFetchingResource">
            <summary>
              Looks up a localized string similar to Out of memory error while reading resource &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.ResourceError">
            <summary>
              Looks up a localized string similar to Resource &apos;{0}&apos; cannot be fetched..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.SecurityException">
            <summary>
              Looks up a localized string similar to Security exception while fetching &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.SyntaxErrorInXmlnsSchemeData">
            <summary>
              Looks up a localized string similar to Syntax error in xmlns() scheme data: {0}.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.SyntaxErrorInXPath1SchemeData">
            <summary>
              Looks up a localized string similar to Syntax error in xpath1() scheme data: {0}.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.SyntaxErrorInXPointerSchemeData">
            <summary>
              Looks up a localized string similar to Syntax error in xpointer() scheme data: {0}.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.TwoFallbacks">
            <summary>
              Looks up a localized string similar to xi:include element cannot contain more than one xi:fallback element. Location: {0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.TwoFallbacksLong">
            <summary>
              Looks up a localized string similar to xi:include element cannot contain more than one xi:fallback element. Location: {0}, Line {1}, Position {2}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.UndeclaredPrefix">
            <summary>
              Looks up a localized string similar to Undeclared prefix &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.UnexpectedEndOfSchemeData">
            <summary>
              Looks up a localized string similar to Unexpected end of scheme data..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.UnknownParseAttrValue">
            <summary>
              Looks up a localized string similar to Unknown &apos;parse&apos; attribute value: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.UnknownParseAttrValueLong">
            <summary>
              Looks up a localized string similar to Unknown &apos;parse&apos; attribute value: &apos;{0}&apos;. In {1}, Line {2}, Position {3}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.UnknownXIncludeElement">
            <summary>
              Looks up a localized string similar to Unknown element in the XInclude namespace has been detected: {0}..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.UnresolvableURI">
            <summary>
              Looks up a localized string similar to Unable to resolve URI reference &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.URISchemaNotSupported">
            <summary>
              Looks up a localized string similar to URI schema is not supported: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.Xml_MissingRoot">
            <summary>
              Looks up a localized string similar to Root element is missing..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.XmlDocumentFactory_NotImplementedDOM">
            <summary>
              Looks up a localized string similar to The XmlDocument instance can only be used for serialization purposes..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.XmlFragmentStream_EOF">
            <summary>
              Looks up a localized string similar to Attempt to read past EOF..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.XmlNodeListFactory_IHasXmlNodeMissing">
            <summary>
              Looks up a localized string similar to The XPath query was not executed against an XmlNode-based object (such as XmlDocument)..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.XPathCache_BadSortObject">
            <summary>
              Looks up a localized string similar to Sort expression must be either a string or an XPathExpression..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.XPathNavigatorIterator_CantAddAfterMove">
            <summary>
              Looks up a localized string similar to Can&apos;t add new elements after the iterator has moved..
            </summary>
        </member>
        <member name="P:Mvp.Xml.Properties.Resources.ZeroIndexInElementSchemechildSequence">
            <summary>
              Looks up a localized string similar to Syntax error in element() scheme data: 0 index in ChildSequence..
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerException">
            <summary>
            Generic XPointer exception.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ApplicationException"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ApplicationException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerSyntaxException">
            <summary>
            XPointer Framework syntax error.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerSyntaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XPointer.XPointerSyntaxException"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerSyntaxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XPointer.XPointerSyntaxException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Mvp.Xml.XPointer.NoSubresourcesIdentifiedException">
            <summary>
            XPointer doesn't identify any subresources - it's an error as per 
            XPointer Framework.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.NoSubresourcesIdentifiedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XPointer.NoSubresourcesIdentifiedException"/> 
            class with a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Mvp.Xml.XPointer.NoSubresourcesIdentifiedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mvp.Xml.XPointer.NoSubresourcesIdentifiedException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Mvp.Xml.XInclude.XIncludingReader">
            <summary>
            <c>XIncludingReader</c> class implements streamable subset of the
            XInclude 1.0 in a fast, non-caching, forward-only fashion.
            To put it another way <c>XIncludingReader</c> is XML Base and XInclude 1.0 aware
            <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <remarks><para>See <a href="http://www.codeplex.com/MVPXML/Wiki/View.aspx?title=XInclude.NET">XInclude.NET homepage</a> for more info.</para>    
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified underlying <c>XmlReader</c> reader.
            </summary>
            <param name="reader">Underlying reader to read from</param>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL.
            </summary>
            <param name="url">Document location.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.Xml.XmlResolver)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL and resolver.
            </summary>
            <param name="url">Document location.</param>
            <param name="resolver">Resolver to acquire external resources.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL and nametable.
            </summary>
            <param name="url">Document location.</param>
            <param name="nt">Name table.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.IO.TextReader)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified <c>TextReader</c> reader.
            </summary>
            <param name="reader"><c>TextReader</c>.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.IO.TextReader)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL and <c>TextReader</c> reader.
            </summary>
            <param name="reader"><c>TextReader</c>.</param>
            <param name="url">Source document's URL</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified <c>TextReader</c> reader and nametable.
            </summary>
            <param name="reader"><c>TextReader</c>.</param>
            <param name="nt">Nametable.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL, <c>TextReader</c> reader and nametable.
            </summary>
            <param name="reader"><c>TextReader</c>.</param>
            <param name="nt">Nametable.</param>
            <param name="url">Source document's URI</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.IO.Stream)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified <c>Stream</c>.
            </summary>
            <param name="input"><c>Stream</c>.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.IO.Stream)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL and <c>Stream</c>.
            </summary>
            <param name="input"><c>Stream</c>.</param>
            <param name="url">Source document's URL</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlResolver)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL, <c>Stream</c> and resolver.
            </summary>
            <param name="input"><c>Stream</c>.</param>
            <param name="url">Source document's URL</param>
            <param name="resolver">Resolver to acquire external resources.</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified <c>Stream</c> and nametable.
            </summary>
            <param name="input"><c>Stream</c>.</param>
            <param name="nt">Nametable</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            Creates new instance of <c>XIncludingReader</c> class with
            specified URL, <c>Stream</c> and nametable.
            </summary>
            <param name="input"><c>Stream</c>.</param>
            <param name="nt">Nametable</param>
            <param name="url">Source document's URL</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.Close">
            <summary>See <see cref="M:System.Xml.XmlReader.Close"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.GetAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.GetAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.GetAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.LookupNamespace(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.MoveToAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.MoveToAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.MoveToAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.MoveToElement">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToElement"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.MoveToFirstAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.MoveToNextAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ReadAttributeValue">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ResolveEntity">
            <summary>See <see cref="M:System.Xml.XmlReader.ResolveEntity"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ReadInnerXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadInnerXml"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ReadOuterXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadOuterXml"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ReadString">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadString"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.Read">
            <summary>See <see cref="M:System.Xml.XmlReader.Read"/></summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            See <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/>.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.IsIncludeElement(System.Xml.XmlReader)">
            <summary>
            Checks if given reader is positioned on a xi:include element.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.IsFallbackElement(System.Xml.XmlReader)">
            <summary>
            /// Checks if given reader is positioned on a xi:fallback element.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.GetResource(System.String,System.String,System.String,System.Net.WebResponse@)">
            <summary>
            Fetches resource by URI.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ProcessIncludeElement">
            <summary>
            Processes xi:include element.
            </summary>		
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ResolveHref(System.String)">
            <summary>
            Resolves include location.
            </summary>
            <param name="href">href value</param>
            <returns>Include location.</returns>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.SkipContent">
            <summary>
            Skips content of an element using directly current reader's methods.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ProcessFallback(System.Int32,System.Exception)">
            <summary>
            Fallback processing.
            </summary>
            <param name="depth"><c>xi:include</c> depth level.</param>    
            <param name="e">Resource error, which caused this processing.</param>
            <remarks>When inluding fails due to any resource error, <c>xi:inlcude</c> 
            element content is processed as follows: each child <c>xi:include</c> - 
            fatal error, more than one child <c>xi:fallback</c> - fatal error. No 
            <c>xi:fallback</c> - the resource error results in a fatal error.
            Content of first <c>xi:fallback</c> element is included in a usual way.</remarks>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.CheckAndSkipContent">
            <summary>
            Skips xi:include element's content, while checking XInclude syntax (no 
            xi:include, no more than one xi:fallback).
            </summary>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ThrowCircularInclusionError(System.Xml.XmlReader,System.Uri)">
            <summary>
            Throws CircularInclusionException.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.AreDifferentLangs(System.String,System.String)">
            <summary>
            Compares two languages as per IETF RFC 3066.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.CreateAcquiredInfoset(System.Uri)">
            <summary>
            Creates acquired infoset.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.CreateAcquiredInfoset(System.Uri,System.IO.TextReader)">
            <summary>
            Creates acquired infoset.
            </summary>
            <param name="reader">Source reader</param>
            <param name="includeLocation">Base URI</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.CreateAcquiredInfoset(System.Xml.XmlReader)">
            <summary>
            Creates acquired infoset.
            </summary>
            <param name="reader">Source reader</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ProcessInterDocXMLInclusion(System.String,System.String)">
            <summary>
            Processes inter-document inclusion (xml mode).
            </summary>
            <param name="href">'href' attr value</param>
            <param name="xpointer">'xpointer attr value'</param>
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.ProcessInterDocTextInclusion(System.String)">
            <summary>
            Process inter-document inclusion as text.
            </summary>
            <param name="href">'href' attr value</param>        
        </member>
        <member name="M:Mvp.Xml.XInclude.XIncludingReader.CheckLoops(System.Uri,System.String)">
            <summary>
            Checks for inclusion loops.
            </summary>        
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.AttributeCount">
            <summary>See <see cref="P:System.Xml.XmlReader.AttributeCount"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.BaseURI">
            <summary>See <see cref="P:System.Xml.XmlReader.BaseURI"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.HasValue">
            <summary>See <see cref="P:System.Xml.XmlReader.HasValue"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.IsDefault">
            <summary>See <see cref="P:System.Xml.XmlReader.IsDefault"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Name">
            <summary>See <see cref="P:System.Xml.XmlReader.Name"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.LocalName">
            <summary>See <see cref="P:System.Xml.XmlReader.LocalName"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.NamespaceURI">
            <summary>See <see cref="P:System.Xml.XmlReader.NamespaceURI"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.NameTable">
            <summary>See <see cref="P:System.Xml.XmlReader.NameTable"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.NodeType">
            <summary>See <see cref="P:System.Xml.XmlReader.NodeType"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Prefix">
            <summary>See <see cref="P:System.Xml.XmlReader.Prefix"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.QuoteChar">
            <summary>See <see cref="P:System.Xml.XmlReader.QuoteChar"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Depth">
            <summary>See <see cref="P:System.Xml.XmlReader.Depth"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.EOF">
            <summary>See <see cref="P:System.Xml.XmlReader.EOF"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.IsEmptyElement">
            <summary>See <see cref="P:System.Xml.XmlReader.IsEmptyElement"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.ReadState">
            <summary>See <see cref="P:System.Xml.XmlReader.ReadState"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Item(System.Int32)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.Int32)"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Item(System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Item(System.String,System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String,System.String)"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.XmlLang">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlLang"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.XmlSpace">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlSpace"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Value">
            <summary>See <see cref="P:System.Xml.XmlReader.Value"/></summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.LineNumber">
            <summary>
            Gets the current line number.
            See <see cref="P:System.Xml.IXmlLineInfo.LineNumber"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.LinePosition">
            <summary>
              	Gets the current line position.
            See <see cref="P:System.Xml.IXmlLineInfo.LinePosition"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.WhitespaceHandling">
            <summary>
            See <see cref="P:System.Xml.XmlTextReader.WhitespaceHandling"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.XmlResolver">
            <summary>
            XmlResolver to resolve external URI references
            </summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.Encoding">
            <summary>
            Gets the encoding of the document.
            </summary>
            <remarks>If underlying XmlReader doesn't support Encoding property, null is returned.</remarks>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.MakeRelativeBaseUri">
            <summary>
            Flag indicating whether to emit <c>xml:base</c> as relative URI.
            True by default.
            </summary>
        </member>
        <member name="P:Mvp.Xml.XInclude.XIncludingReader.ExposeTextInclusionsAsCDATA">
            <summary>
            Flag indicating whether expose text inclusions
            as CDATA or as Text. By default it's Text.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.Xsl.CharacterMap">
            <summary>
            Represents XSLT 2.0 Character map, see http://www.w3.org/TR/xslt20/#character-maps.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMap.#ctor">
            <summary>
            Creates empty character map.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.Xsl.CharacterMap.AddMapping(System.Char,System.String)">
            <summary>
            Adds mapping for given character.
            </summary>        
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.CharacterMap.Map">
            <summary>
            Gets mapping collection.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.Xsl.CharacterMap.ReferencedCharacterMaps">
            <summary>
            Referenced character maps.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltRandom">
            <summary>
            This class implements the EXSLT functions in the http://exslt.org/random namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequence">
            <summary>
             Implements the following function 
                number+ random:random-sequence(number?, number?)
            </summary>				
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequence_RENAME_ME">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>	
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequence(System.Double)">
            <summary>
             Implements the following function 
                number+ random:random-sequence(number?, number?)
            </summary>	
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequence_RENAME_ME(System.Double)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>	
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequence(System.Double,System.Double)">
            <summary>
             Implements the following function 
                number+ random:random-sequence(number?, number?)
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequence_RENAME_ME(System.Double,System.Double)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>	
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRandom.randomSequenceImpl(System.Double,System.Int32)">
            <summary>
            random-sequence() implementation;
            </summary>
            <param name="number"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator">
            <summary>
            <see cref="T:System.Xml.XPath.XPathNodeIterator"/> over a single node. Can be used to return a single
            node out of an XSLT or XPath extension function.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates new instance of SingletonXPathNodeIterator over
            given node.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator.Clone">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNodeIterator.Clone"/>
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator.MoveNext">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext"/>
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator.Count">
            <summary>
            Always 1. See <see cref="P:System.Xml.XPath.XPathNodeIterator.Count"/>
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator.Current">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNodeIterator.Current"/>
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.SingletonXPathNodeIterator.CurrentPosition">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition"/>
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPointerReader">
            <summary>
            <c>XPointerReader</c> is an <see cref="T:System.Xml.XmlReader"/> that implements XPointer Framework in
            a fast, non-caching, forward-only way. <c>XPointerReader</c> 
            supports XPointer Framework, element(), xmlns(), xpath1() and
            xpointer() (XPath subset only) XPointer schemes.
            </summary>
            <remarks><para>See <a href="http://www.codeplex.com/MVPXML/Wiki/View.aspx?title=XPointer.NET">XPointer.NET homepage</a> for more info.</para>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IHasXPathNavigator">
            <summary>
            Enables a class to return an <see cref="T:System.Xml.XPath.XPathNavigator"/> from the current context or position.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IHasXPathNavigator.GetNavigator">
            <summary>
            Returns the <see cref="T:System.Xml.XPath.XPathNavigator"/> for the current context or position.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.Init(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Initializes the <c>XPointerReader</c>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instnace with given <see cref="T:System.Xml.XPath.IXPathNavigable"/>
            and xpointer.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instnace with given <see cref="T:System.Xml.XPath.XPathNavigator"/>
            and xpointer.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.String,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instance with given uri and xpointer.
            </summary>	    
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.String,System.Xml.XmlNameTable,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instance with given uri, nametable and xpointer.
            </summary>	    
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instance with given uri, stream, nametable and xpointer.
            </summary>	    
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.String,System.IO.Stream,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instance with given uri, stream and xpointer.
            </summary>	    
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.Xml.XmlReader,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instance with given XmlReader and xpointer.
            Additionally sets a flag whether to support schema-determined IDs.
            </summary>	    
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates <c>XPointerReader</c> instance with given
            document's URI and content.
            </summary>
            <param name="uri">XML document's base URI</param>
            <param name="content">XML document's content</param>
            <param name="xpointer">XPointer pointer</param>        
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.Close">
            <summary>See <see cref="M:System.Xml.XmlReader.Close"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.GetAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.GetAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.GetAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.LookupNamespace(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.MoveToAttribute(System.Int32)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.MoveToAttribute(System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.MoveToAttribute(System.String,System.String)">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.MoveToElement">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToElement"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.MoveToFirstAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.MoveToNextAttribute">
            <summary>See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.ReadAttributeValue">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.ResolveEntity">
            <summary>See <see cref="M:System.Xml.XmlReader.ResolveEntity"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.ReadInnerXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadInnerXml"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.ReadOuterXml">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadOuterXml"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.ReadString">
            <summary>See <see cref="M:System.Xml.XmlReader.ReadString"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.Read">
            <summary>See <see cref="M:System.Xml.XmlReader.Read"/>.</summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.GetNavigator">
            <summary>
            Returns the XPathNavigator for the current context or position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPointerReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            See <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/>.
            </summary>        
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.AttributeCount">
            <summary>See <see cref="P:System.Xml.XmlReader.AttributeCount"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.BaseURI">
            <summary>See <see cref="P:System.Xml.XmlReader.BaseURI"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.HasValue">
            <summary>See <see cref="P:System.Xml.XmlReader.HasValue"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.IsDefault">
            <summary>See <see cref="P:System.Xml.XmlReader.IsDefault"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Name">
            <summary>See <see cref="P:System.Xml.XmlReader.Name"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.LocalName">
            <summary>See <see cref="P:System.Xml.XmlReader.LocalName"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.NamespaceURI">
            <summary>See <see cref="P:System.Xml.XmlReader.NamespaceURI"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.NameTable">
            <summary>See <see cref="P:System.Xml.XmlReader.NameTable"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.NodeType">
            <summary>See <see cref="P:System.Xml.XmlReader.NodeType"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Prefix">
            <summary>See <see cref="P:System.Xml.XmlReader.Prefix"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.QuoteChar">
            <summary>See <see cref="P:System.Xml.XmlReader.QuoteChar"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Depth">
            <summary>See <see cref="P:System.Xml.XmlReader.Depth"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.EOF">
            <summary>See <see cref="P:System.Xml.XmlReader.EOF"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.IsEmptyElement">
            <summary>See <see cref="P:System.Xml.XmlReader.IsEmptyElement"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.ReadState">
            <summary>See <see cref="P:System.Xml.XmlReader.ReadState"/>.</summary>            
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Item(System.Int32)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.Int32)"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Item(System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String)"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Item(System.String,System.String)">
            <summary>See <see cref="P:System.Xml.XmlReader.Item(System.String,System.String)"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.XmlLang">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlLang"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.XmlSpace">
            <summary>See <see cref="P:System.Xml.XmlReader.XmlSpace"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.Value">
            <summary>See <see cref="P:System.Xml.XmlReader.Value"/>.</summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.LineNumber">
            <summary>
            Gets the current line number.
            See <see cref="P:System.Xml.IXmlLineInfo.LineNumber"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.XPointer.XPointerReader.LinePosition">
            <summary>
              	Gets the current line position.
            See <see cref="P:System.Xml.IXmlLineInfo.LinePosition"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.XPointer.XPath1SchemaPointerPart">
            <summary>
            xpath1() scheme based XPointer pointer part.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XPath1SchemaPointerPart.Evaluate(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer part and returns pointed nodes.
            </summary>
            <param name="doc">Document to evaluate pointer part on</param>
            <param name="nm">Namespace manager</param>
            <returns>Pointed nodes</returns>		    
        </member>
        <member name="T:Mvp.Xml.XPointer.XmlnsSchemaPointerPart">
            <summary>
            xmlns() scheme based <see cref="N:Mvp.Xml.XPointer"/> pointer part.
            </summary>
        </member>
        <member name="M:Mvp.Xml.XPointer.XmlnsSchemaPointerPart.#ctor(System.String,System.String)">
            <summary>
            Creates xmlns() scheme pointer part with given
            namespace prefix and namespace URI. 
            </summary>
            <param name="prefix">Namespace prefix</param>
            <param name="uri">Namespace URI</param>
        </member>
        <member name="M:Mvp.Xml.XPointer.XmlnsSchemaPointerPart.Evaluate(System.Xml.XPath.XPathNavigator,System.Xml.XmlNamespaceManager)">
            <summary>
            Evaluates <see cref="N:Mvp.Xml.XPointer"/> pointer part and returns pointed nodes.
            </summary>
            <param name="doc">Document to evaluate pointer part on</param>
            <param name="nm">Namespace manager</param>
            <returns>Pointed nodes</returns>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltFunctionNamespace">
            <summary>
            Enumeration used to indicate an EXSLT function namespace. 
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.None">
            <summary>Nothing</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.DatesAndTimes">
            <summary>Dates and Times module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.Math">
            <summary>Math module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.RegularExpressions">
            <summary>RegExp module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.Sets">
            <summary>Sets module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.Strings">
            <summary>Strings module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.GDNDatesAndTimes">
            <summary>GotDotNet Dates and Times module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.GDNSets">
            <summary>GotDotNet Sets module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.GDNMath">
            <summary>GotDotNet Math module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.GDNRegularExpressions">
            <summary>GotDotNet RegExp module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.GDNStrings">
            <summary>GotDotNet Strings module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.Random">
            <summary>Random module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.GDNDynamic">
            <summary>GotDotNet Dynamic module</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.AllExslt">
            <summary>All EXSLT modules</summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltFunctionNamespace.All">
            <summary>All modules</summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltTransform">
            <summary>
            Transforms XML data using an XSLT stylesheet. Supports a number of EXSLT as 
            defined at http://www.exslt.org
            </summary>
            <remarks>
            XslCompiledTransform supports the XSLT 1.0 syntax. The XSLT stylesheet must use the 
            namespace http://www.w3.org/1999/XSL/Transform. Additional arguments can also be 
            added to the stylesheet using the XsltArgumentList class. 
            This class contains input parameters for the stylesheet and extension objects which can be called from the stylesheet.
            This class also recognizes functions from the following namespaces:<br/>
            * http://exslt.org/common<br/>
            * http://exslt.org/dates-and-times<br/>
            * http://exslt.org/math<br/>
            * http://exslt.org/random<br/>
            * http://exslt.org/regular-expressions<br/>
            * http://exslt.org/sets<br/>
            * http://exslt.org/strings<br/>
            * http://gotdotnet.com/exslt/dates-and-times<br/>
            * http://gotdotnet.com/exslt/math<br/>
            * http://gotdotnet.com/exslt/regular-expressions<br/>
            * http://gotdotnet.com/exslt/sets<br/>
            * http://gotdotnet.com/exslt/strings<br/>
            * http://gotdotnet.com/exslt/dynamic<br/>
            </remarks>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.sync">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.xslTransform">
            <summary>
            The XslTransform object wrapped by this class. 
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform._supportedFunctions">
            <summary>
            Bitwise enumeration used to specify which EXSLT functions should be accessible to 
            the ExsltTransform object. The default value is ExsltFunctionNamespace.All 
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.exsltMath">
            <summary>
            Extension object which implements the functions in the http://exslt.org/math namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.exsltRandom">
            <summary>
            Extension object which implements the functions in the http://exslt.org/random namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.exsltDatesAndTimes">
            <summary>
            Extension object which implements the functions in the http://exslt.org/dates-and-times namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.exsltRegularExpressions">
            <summary>
            Extension object which implements the functions in the http://exslt.org/regular-expressions namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.exsltStrings">
            <summary>
            Extension object which implements the functions in the http://exslt.org/strings namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.exsltSets">
            <summary>
            Extension object which implements the functions in the http://exslt.org/sets namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.gdnDatesAndTimes">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/dates-and-times namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.gdnRegularExpressions">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/regular-expressions namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.gdnMath">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/math namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.gdnSets">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/sets namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.gdnStrings">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/strings namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform.gdnDynamic">
            <summary>
            Extension object which implements the functions in the http://gotdotnet.com/exslt/dynamic namespace
            </summary>
        </member>
        <member name="F:Mvp.Xml.Exslt.ExsltTransform._multiOutput">
            <summary>
            Boolean flag used to specify whether multiple output is supported.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.#ctor">
            <summary>
            Initializes a new instance of the ExsltTransform class. 
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExsltTransform 
            class with the specified debug setting.  
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Load(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Loads and compiles the style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"/> object.
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)"/>.
            </summary>
            <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface. 
            In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"/> (typically an <see cref="T:System.Xml.XmlDocument"/>), 
            or an <see cref="T:System.Xml.XPath.XPathDocument"/> containing the style sheet.</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Load(System.String)">
            <summary>
            Loads and compiles the style sheet located at the specified URI.
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)"/>.
            </summary>
            <param name="stylesheetUri">The URI of the style sheet.</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Load(System.Xml.XmlReader)">
            <summary>
            Compiles the style sheet contained in the <see cref="T:System.Xml.XmlReader"/>.
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)"/>.
            </summary>
            <param name="stylesheet">An <see cref="T:System.Xml.XmlReader"/> containing the style sheet.</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"/>. 
            The <see cref="T:System.Xml.XmlResolver"/> resolves any XSLT <c>import</c> or <c>include</c> elements and the 
            XSLT settings determine the permissions for the style sheet. 
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)"/>.
            </summary>                     
            <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface. 
            In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"/> (typically an <see cref="T:System.Xml.XmlDocument"/>), 
            or an <see cref="T:System.Xml.XPath.XPathDocument"/> containing the style sheet.</param>
            <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"/> to apply to the style sheet. 
            If this is a null reference (Nothing in Visual Basic), the <see cref="P:System.Xml.Xsl.XsltSettings.Default"/> setting is applied.</param>
            <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"/> used to resolve any 
            style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is a 
            null reference (Nothing in Visual Basic), external resources are not resolved.</param>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Loads and compiles the XSLT style sheet specified by the URI. 
            The <see cref="T:System.Xml.XmlResolver"/> resolves any XSLT <c>import</c> or <c>include</c> elements and the 
            XSLT settings determine the permissions for the style sheet. 
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)"/>.
            </summary>           
            <param name="stylesheetUri">The URI of the style sheet.</param>
            <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"/> to apply to the style sheet. 
            If this is a null reference (Nothing in Visual Basic), the <see cref="P:System.Xml.Xsl.XsltSettings.Default"/> setting is applied.</param>
            <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"/> used to resolve any 
            style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is a 
            null reference (Nothing in Visual Basic), external resources are not resolved.</param>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
            <summary>
            Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader"/>. 
            The <see cref="T:System.Xml.XmlResolver"/> resolves any XSLT <c>import</c> or <c>include</c> elements and the 
            XSLT settings determine the permissions for the style sheet. 
            See also <see cref="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)"/>.
            </summary>                
            <param name="stylesheet">The <see cref="T:System.Xml.XmlReader"/> containing the style sheet.</param>
            <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"/> to apply to the style sheet. 
            If this is a null reference (Nothing in Visual Basic), the <see cref="P:System.Xml.Xsl.XsltSettings.Default"/> setting is applied.</param>
            <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"/> used to resolve any 
            style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is a 
            null reference (Nothing in Visual Basic), external resources are not resolved.</param>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
            <summary>
            Executes the transform using the input document specified by the 
            IXPathNavigable object and outputs the results to an XmlWriter. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.String,System.String)">
            <summary>
            Executes the transform using the input document specified by the URI 
            and outputs the results to a file. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.String,System.Xml.XmlWriter)">
            <summary>
            Executes the transform using the input document specified by the URI 
            and outputs the results to an XmlWriter.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            Executes the transform using the input document specified by the 
            XmlReader object and outputs the results to an XmlWriter. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
            <summary>
            Executes the transform using the input document specified by the 
            IXPathNavigable object and outputs the results to a stream. 
            The XsltArgumentList provides additional runtime arguments. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
            <summary>
            Executes the transform using the input document specified by the 
            IXPathNavigable object and outputs the results to an TextWriter. 
            The XsltArgumentList provides additional run-time arguments.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
            <summary>
            Executes the transform using the input document specified by the 
            IXPathNavigable object and outputs the results to an XmlWriter. 
            The XsltArgumentList provides additional run-time arguments. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
            <summary>
            Executes the transform using the input document specified by the URI 
            and outputs the results to stream. 
            The XsltArgumentList provides additional run-time arguments. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
            <summary>
            Executes the transform using the input document specified by the URI and 
            outputs the results to a TextWriter.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
            <summary>
            Executes the transform using the input document specified by the URI 
            and outputs the results to an XmlWriter. 
            The XsltArgumentList provides additional run-time arguments.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
            <summary>
            Executes the transform using the input document specified by the XmlReader 
            object and outputs the results to a stream. 
            The XsltArgumentList provides additional run-time arguments. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
            <summary>
            Executes the transform using the input document specified by the XmlReader 
            object and outputs the results to a TextWriter. 
            The XsltArgumentList provides additional run-time arguments.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
            <summary>
            Executes the transform using the input document specified by the XmlReader 
            object and outputs the results to an XmlWriter. 
            The XsltArgumentList provides additional run-time arguments. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
            <summary>
            Executes the transform using the input document specified by the XmlReader 
            object and outputs the results to an XmlWriter. 
            The XsltArgumentList provides additional run-time arguments and the 
            XmlResolver resolves the XSLT document() function. 
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltTransform.AddExsltExtensionObjects(System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Adds the objects that implement the EXSLT extensions to the provided argument 
            list. The extension objects added depend on the value of the SupportedFunctions
            property.
            </summary>
            <param name="list">The argument list</param>
            <returns>An XsltArgumentList containing the contents of the list passed in 
            and objects that implement the EXSLT. </returns>
            <remarks>If null is passed in then a new XsltArgumentList is constructed. </remarks>
        </member>
        <member name="P:Mvp.Xml.Exslt.ExsltTransform.SupportedFunctions">
            <summary>
            Bitwise enumeration used to specify which EXSLT functions should be accessible to 
            the ExsltTransform object. The default value is ExsltFunctionNamespace.All 
            </summary>
        </member>
        <member name="P:Mvp.Xml.Exslt.ExsltTransform.MultiOutput">
            <summary>
            Boolean flag used to specify whether multiple output (via exsl:document) is 
            supported.
            Note: This property is ignored (hence multiple output is not supported) when
            transformation is done to XmlReader or XmlWriter (use overloaded method, 
            which transforms to MultiXmlTextWriter instead).
            Note: Because of some restrictions and slight overhead this feature is
            disabled by default. If you need multiple output support, set this property to
            true before the Transform() call.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Exslt.ExsltTransform.OutputSettings">
            <summary>
            Gets an <see cref="T:System.Xml.XmlWriterSettings"/> object that contains the output 
            information derived from the xsl:output element of the style sheet.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Exslt.ExsltTransform.TemporaryFiles">
            <summary>
            Gets the TempFileCollection that contains the temporary files generated 
            on disk after a successful call to the Load method. 
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XmlNodeListFactory">
            <summary>
            Constructs <see cref="T:System.Xml.XmlNodeList"/> instances from 
            <see cref="T:System.Xml.XPath.XPathNodeIterator"/> objects.
            </summary>
            <remarks>See http://weblogs.asp.net/cazzu/archive/2004/04/14/113479.aspx. 
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            <para>Contributors: Oleg Tkachenko, http://www.xmllab.net</para>
            </remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeListFactory.CreateNodeList(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Creates an instance of a <see cref="T:System.Xml.XmlNodeList"/> that allows 
            enumerating <see cref="T:System.Xml.XmlNode"/> elements in the iterator.
            </summary>
            <param name="iterator">The result of a previous node selection 
            through an <see cref="T:System.Xml.XPath.XPathNavigator"/> query.</param>
            <returns>An initialized list ready to be enumerated.</returns>
            <remarks>The underlying XML store used to issue the query must be 
            an object inheriting <see cref="T:System.Xml.XmlNode"/>, such as 
            <see cref="T:System.Xml.XmlDocument"/>.</remarks>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeListFactory.XmlNodeListIterator.ReadToEnd">
            <summary>
            Reads the entire iterator.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNodeListFactory.XmlNodeListIterator.ReadTo(System.Int32)">
            <summary>
            Reads up to the specified index, or until the 
            iterator is consumed.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlNodeListFactory.XmlNodeListIterator.Done">
            <summary>
            Flags that the iterator has been consumed.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlNodeListFactory.XmlNodeListIterator.CurrentPosition">
            <summary>
            Current count of nodes in the iterator (read so far).
            </summary>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltRegularExpressions">
            <summary>
            This class implements the EXSLT functions in the http://exslt.org/regular-expressions namespace.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRegularExpressions.test(System.String,System.String)">
            <summary>
            Implements the following function 
            	boolean test(string, string)
            </summary>
            <param name="str"></param>
            <param name="regexp"></param>
            <returns></returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRegularExpressions.test(System.String,System.String,System.String)">
            <summary>
            Implements the following function 
            	boolean test(string, string, string)
            </summary>
            <param name="str"></param>
            <param name="regexp"></param>
            <param name="flags">One of 'i', 'g' or 'm'</param>
            <returns></returns>
            <remarks>Supports the string 'm' as a flag which indicates multiline mode</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRegularExpressions.match(System.String,System.String)">
            <summary>
            Implements the following function 
            	node-set match(string, string)
            </summary>
            <param name="str"></param>
            <param name="regexp"></param>
            <returns> The matching strings are returned as a set of 'match' elements.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRegularExpressions.match(System.String,System.String,System.String)">
            <summary>
            Implements the following function 
            	node-set match(string, string, string)
            </summary>
            <param name="str"></param>
            <param name="regexp"></param>
            <param name="flags"></param>
            <returns> The matching strings are returned as a set of 'match' elements.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltRegularExpressions.replace(System.String,System.String,System.String,System.String)">
            <summary>
            Implements the following function 
            	string replace(string, string, string, string)
            </summary>
            <param name="input"></param>
            <param name="regexp"></param>
            <param name="flags"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="T:Mvp.Xml.Exslt.GDNSets">
            <summary>
              This class implements additional functions in the http://gotdotnet.com/exslt/sets namespace.
            </summary>		
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNSets.subset(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               boolean subset(node-set, node-set) 
            </summary>
            <param name="nodeset1">An input nodeset</param>
            <param name="nodeset2">Another input nodeset</param>
            <returns>True if all the nodes in the first nodeset are contained 
            in the second nodeset</returns>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNSets.subset2(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               boolean subset(node-set, node-set) 
            This is an optimized version, using document identification
            and binary search techniques. 
            </summary>
            <param name="nodeset1">An input nodeset</param>
            <param name="nodeset2">Another input nodeset</param>
            <returns>True if all the nodes in the first nodeset are contained 
            in the second nodeset</returns>
            <author>Dimitre Novatchev</author>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="T:Mvp.Xml.Exslt.GDNDynamic">
            <summary>
              This class implements additional functions in the 
              http://gotdotnet.com/exslt/dynamic namespace.
            </summary>		
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDynamic.evaluate(System.Xml.XPath.XPathNodeIterator,System.String)">
            <summary>
            Implements the following function 
               object dyn2:evaluate(node-set, string, string?) 
            </summary>
            <param name="contextNode">Context node</param>
            <param name="expression">Expression to evaluate</param>
            <returns>Result of evaluating given Xpath expression WRT to context node.</returns>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>    
        </member>
        <member name="M:Mvp.Xml.Exslt.GDNDynamic.evaluate(System.Xml.XPath.XPathNodeIterator,System.String,System.String)">
            <summary>
            Implements the following function 
               object dyn2:evaluate(node-set, string, string?) 
            </summary>
            <param name="contextNode">Context node</param>
            <param name="expression">Expression to evaluate</param>
            <param name="namespaces">Namespace bindings</param>
            <returns>Result of evaluating given Xpath expression WRT to context node.</returns>
            <remarks>THIS FUNCTION IS NOT PART OF EXSLT!!!</remarks>
        </member>
        <member name="T:Mvp.Xml.Exslt.ExsltSets">
            <summary>
              This class implements the EXSLT functions in the http://exslt.org/sets namespace.
            </summary>			
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.difference(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               node-set difference(node-set, node-set) 
            </summary>
            <param name="nodeset1">An input nodeset</param>
            <param name="nodeset2">Another input nodeset</param>
            <returns>The those nodes that are in the node set 
            passed as the first argument that are not in the node set 
            passed as the second argument.</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.difference2(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements an optimized algorithm for the following function 
               node-set difference(node-set, node-set) 
            Uses document identification and binary search,
            based on the fact that a node-set is always in document order.
            </summary>
            <param name="nodeset1">An input nodeset</param>
            <param name="nodeset2">Another input nodeset</param>
            <returns>The those nodes that are in the node set 
            passed as the first argument that are not in the node set 
            passed as the second argument.</returns>
            <author>Dimitre Novatchev</author>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.distinct(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
               node-set distinct(node-set)
            </summary>
            <param name="nodeset">The input nodeset</param>
            <returns>Returns the nodes in the nodeset whose string value is 
            distinct</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.distinct2(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
            node-set distinct2(node-set)
            
            This implements an optimized algorithm
            using a Hashtable
               
            </summary>
            <param name="nodeset">The input nodeset</param>
            <returns>Returns the nodes in the nodeset whose string value is 
            distinct</returns>
            <author>Dimitre Novatchev</author>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.hasSameNode(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements 
               boolean hassamenode(node-set, node-set)
            </summary>
            <param name="nodeset1"></param>
            <param name="nodeset2"></param>
            <returns>true if both nodeset contain at least one of the same node</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.hasSameNode2(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements 
               boolean hassamenode2(node-set, node-set)
               
            Optimized by using a document identification and
            binary search algorithm
            </summary>
            <param name="nodeset1">The first nodeset</param>
            <param name="nodeset2">The second nodeset</param>
            <returns>true if both nodeset contain 
            at least one of the same node</returns>
            <author>Dimitre Novatchev</author>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.hasSameNode_RENAME_ME(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            This wrapper method will be renamed during custom build 
            to provide conformant EXSLT function name.
            </summary>        
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.intersection(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
              node-set intersection(node-set, node-set)
            </summary>
            <param name="nodeset1">The first node-set</param>
            <param name="nodeset2">The second node-set</param>
            <returns>The node-set, which is the intersection
                     of nodeset1 and nodeset2
            </returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.intersection3(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
             <summary>
               Implements the following function 
               node-set intersection3(node-set, node-set)
            
               This is an optimisation of the initial implementation
               of intersection(). It uses a document identification
               and a binary search algorithm, based on the fact
               that a node-set is always in document order.
             </summary>
             <param name="nodeset1">The first node-set</param>
             <param name="nodeset2">The second node-set</param>
             <returns>The node-set, which is the intersection
                      of nodeset1 and nodeset2
             </returns>
             <author>Dimitre Novatchev</author>				
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.leading(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
            	node-set leading(node-set, node-set)
            </summary>
            <param name="nodeset1"></param>
            <param name="nodeset2"></param>
            <returns>returns the nodes in the node set passed as the 
            first argument that precede, in document order, the first node 
            in the node set passed as the second argument</returns>
        </member>
        <member name="M:Mvp.Xml.Exslt.ExsltSets.trailing(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Implements the following function 
            	node-set trailing(node-set, node-set)
            </summary>
            <param name="nodeset1"></param>
            <param name="nodeset2"></param>
            <returns>returns the nodes in the node set passed as the 
            first argument that follow, in document order, the first node 
            in the node set passed as the second argument</returns>
        </member>
        <member name="T:Mvp.Xml.Exslt.auxEXSLT">
            <summary>
              This class implements some auxiliary methods
              which should not be exposed in any namespace
            </summary>	
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator">
            <summary>	
            <see cref="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator"/> enables lazy or eager indexing of any XML store
            (<see cref="T:System.Xml.XmlDocument"/>, <see cref="T:System.Xml.XPath.XPathDocument"/> or any other <see cref="T:System.Xml.XPath.IXPathNavigable"/> XML store) thus
            providing an alternative way to select nodes using XSLT key() function directly from an index table 
            instead of searhing the XML tree. This allows drastically decrease selection time
            on preindexed selections.
            </summary>
            <remarks>
            <para>Author: Oleg Tkachenko, <a href="http://www.xmllab.net">http://www.xmllab.net</a>.</para>
            <para>Contributors: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            <para>See <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnxmlnet/html/XMLindexing.asp">"XML Indexing Part 1: XML IDs, XSLT Keys and IndexingXPathNavigator"</a> article for more info.</para>
            </remarks>    
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates IndexingXPathNavigator over specified XPathNavigator.
            </summary>
            <param name="navigator">Core XPathNavigator</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.BuildIndexes">
            <summary>
            Builds indexes according to defined keys.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.AddKey(System.String,System.String,System.String)">
            <summary>
            Adds named key for use with key() function.
            </summary>
            <param name="keyName">The name of the key</param>
            <param name="match">XPath pattern, defining the nodes to which 
            this key is applicable</param>
            <param name="use">XPath expression used to determine 
            the value of the key for each matching node</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.Compile(System.String)">
            <summary>
            Compiles XPath expressions using base XPathNavigator.Compile()
            method and set IndexingXsltContext instance to the result of 
            the compilation so compiled expressions support key() extension
            function.
            </summary>
            <param name="xpath">XPath expression to complile</param>
            <returns>Compiled XPath expression with augmented context 
            to support key() extension function</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.Select(System.String)">
            <summary>
            Selects a node set using the specified XPath expression.
            </summary>
            <param name="xpath">A string representing an XPath expression</param>
            <returns>An XPathNodeIterator pointing to the selected node set</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.Clone">
            <summary>
            Creates new cloned version of the IndexingXPathNavigator.
            </summary>
            <returns>Cloned copy of the IndexingXPathNavigator</returns>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.GetAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToFirstAttribute">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToNextAttribute">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.GetNamespace(System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToNamespace(System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToNext">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNext"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToPrevious">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToPrevious"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToFirst">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToFirstChild">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToParent">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToParent"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToRoot">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToRoot"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.MoveToId(System.String)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            See <see cref="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.NodeType">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.NodeType"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.LocalName">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.LocalName"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.Name">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.Name"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.NamespaceURI">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.NamespaceURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.Prefix">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.Prefix"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.Value">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathItem.Value"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.BaseURI">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.BaseURI"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IsEmptyElement">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.IsEmptyElement"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XmlLang">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.XmlLang"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.NameTable">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.NameTable"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.HasAttributes">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.HasAttributes"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.HasChildren">
            <summary>
            See <see cref="P:System.Xml.XPath.XPathNavigator.HasChildren"/>.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext">
            <summary>
            XsltContext providing key() extension function.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext.#ctor(Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndexManager,System.Xml.XmlNameTable)">
            <summary>
            Creates new IndexingXsltContext.
            </summary>
            <param name="manager">Newly created IndexingXsltContext</param>
            <param name="nt">The name table to use.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext.CompareDocument(System.String,System.String)">
            <summary>
            Not applicable.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Not applicable.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext.ResolveVariable(System.String,System.String)">
            <summary>
            No custom variables.
            </summary>    
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            Resolves key() extension function.
            </summary>
            <param name="prefix">The prefix of the function as it appears in the XPath expression</param>
            <param name="name">The name of the function</param>
            <param name="argTypes">An array of argument types for the function being resolved</param>
            <returns>KeyExtentionFunction implementation for key() extension function and null
            for anything else.</returns>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.IndexingXsltContext.Whitespace">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction">
            <summary>
            key() extension function implementation.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction.#ctor(Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndexManager)">
            <summary>
            Creates new KeyExtentionFunction object.
            </summary>
            <param name="manager">Index manager for accessing indexes</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            Provides the method to invoke the function with the given arguments in the given context.
            </summary>
            <param name="xsltContext">Given XSLT context</param>
            <param name="args">Array of actual arguments</param>
            <param name="docContext">Context document</param>
            <returns></returns>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction.Minargs">
            <summary>
            Gets the minimum number of arguments for the function.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction.Maxargs">
            <summary>
            Gets the maximum number of arguments for the function. 
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction.ArgTypes">
            <summary>
            Gets the supplied XPath types for the function's argument list.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyExtensionFunction.ReturnType">
            <summary>
            Gets the XPathResultType representing the XPath type returned by the function.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef">
            <summary>
            Compilable key definition.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef.#ctor(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Creates a key definition with specified 'match' and 'use' expressions.
            </summary>
            <param name="nav">XPathNavigator to compile XPath expressions</param>
            <param name="match">XPath pattern, defining the nodes to 
            which this key is applicable</param>
            <param name="use">XPath expression expression used to 
            determine the value of the key for each matching node.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef.Compile">
            <summary>
            Compiles match and use expressions.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef.Match">
            <summary>
            XPath pattern, defining the nodes to 
            which this key is applicable.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef.Use">
            <summary>
            XPath expression expression used to 
            determine the value of the key for each matching node.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef.MatchExpr">
            <summary>
            Compiled XPath pattern, defining the nodes to 
            which this key is applicable.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef.UseExpr">
            <summary>
            Compiled XPath expression expression used to 
            determine the value of the key for each matching node.
            </summary>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndex">
            <summary>
            Index table for XPathNavigator.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndex.#ctor">
            <summary>
            Creates index over specified XPathNavigator.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndex.AddKey(Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef)">
            <summary>
            Adds a key.
            </summary>
            <param name="key">Key definition</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndex.GetNodes(System.Object)">
            <summary>
            Returns indexed nodes by a key value.
            </summary>
            <param name="keyValue">Key value</param>    
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndex.MatchNode(System.Xml.XPath.XPathNavigator)">
            <summary>
            Matches given node against "match" pattern and adds it to 
            the index table if the matching succeeded.
            </summary>
            <param name="node">Node to match</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndex.AddNodeToIndex(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Adds node to the index slot according to key value.
            </summary>
            <param name="node">Node to add to index</param>
            <param name="key">String key value</param>
        </member>
        <member name="T:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndexManager">
            <summary>
            Index manager. Manages collection of named indexes.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndexManager.AddKey(System.Xml.XPath.XPathNavigator,System.String,Mvp.Xml.Common.XPath.IndexingXPathNavigator.KeyDef)">
            <summary>
            Adds new key to the named index.
            </summary>
            <param name="nav">XPathNavigator over XML document to be indexed</param>
            <param name="indexName">Index name</param>
            <param name="key">Key definition</param>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndexManager.BuildIndexes">
            <summary>
            Builds indexes.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XPath.IndexingXPathNavigator.XPathNavigatorIndexManager.GetNodes(System.String,System.Object)">
            <summary>
            Get indexed nodes by index name and key value.
            </summary>    
            <param name="indexName">Index name</param>
            <param name="value">Key value</param>
            <returns>Indexed nodes</returns>
        </member>
        <member name="T:Mvp.Xml.Common.XmlNormalizingReader">
            <summary>
            Reader that only exposes xmlns attribute declarations if they 
            have not been previously declared by a parent element, 
            normalizing the output XML so that no duplicate namespace 
            declarations exist.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNormalizingReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes the normalizing reader with the 
            underlying reader to use.
            </summary>
            <param name="baseReader">Underlying reader to normalize.</param>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNormalizingReader.Read">
            <summary>
            See <see cref="M:System.Xml.XmlReader.Read"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNormalizingReader.MoveToFirstAttribute">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/>.
            </summary>
        </member>
        <member name="M:Mvp.Xml.Common.XmlNormalizingReader.MoveToNextAttribute">
            <summary>
            See <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/>.
            </summary>
        </member>
        <member name="P:Mvp.Xml.Common.XmlNormalizingReader.AttributeCount">
            <summary>
            See <see cref="P:System.Xml.XmlReader.AttributeCount"/>.
            </summary>
        </member>
    </members>
</doc>
